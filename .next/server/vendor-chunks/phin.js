/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/phin";
exports.ids = ["vendor-chunks/phin"];
exports.modules = {

/***/ "(action-browser)/./node_modules/phin/lib/phin.js":
/*!***************************************!*\
  !*** ./node_modules/phin/lib/phin.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {URL} = __webpack_require__(/*! url */ \"url\")\n\nconst centra = __webpack_require__(/*! centra */ \"(action-browser)/./node_modules/centra/createRequest.js\")\n\nconst unspecifiedFollowRedirectsDefault = 20\n\n/**\n* phin options object. phin also supports all options from <a href=\"https://nodejs.org/api/http.html#http_http_request_options_callback\">http.request(options, callback)</a> by passing them on to this method (or similar).\n* @typedef {Object} phinOptions\n* @property {string} url - URL to request (autodetect infers from this URL)\n* @property {string} [method=GET] - Request method ('GET', 'POST', etc.)\n* @property {string|Buffer|object} [data] - Data to send as request body (phin may attempt to convert this data to a string if it isn't already)\n* @property {Object} [form] - Object to send as form data (sets 'Content-Type' and 'Content-Length' headers, as well as request body) (overwrites 'data' option if present)\n* @property {Object} [headers={}] - Request headers\n* @property {Object} [core={}] - Custom core HTTP options\n* @property {string} [parse=none] - Response parsing. Errors will be given if the response can't be parsed. 'none' returns body as a `Buffer`, 'json' attempts to parse the body as JSON, and 'string' attempts to parse the body as a string\n* @property {boolean} [followRedirects=false] - Enable HTTP redirect following\n* @property {boolean} [stream=false] - Enable streaming of response. (Removes body property)\n* @property {boolean} [compression=false] - Enable compression for request\n* @property {?number} [timeout=null] - Request timeout in milliseconds\n* @property {string} [hostname=autodetect] - URL hostname\n* @property {Number} [port=autodetect] - URL port\n* @property {string} [path=autodetect] - URL path\n*/\n\n/**\n* Response data\n* @callback phinResponseCallback\n* @param {?(Error|string)} error - Error if any occurred in request, otherwise null.\n* @param {?http.serverResponse} phinResponse - phin response object. Like <a href='https://nodejs.org/api/http.html#http_class_http_serverresponse'>http.ServerResponse</a> but has a body property containing response body, unless stream. If stream option is enabled, a stream property will be provided to callback with a readable stream.\n*/\n\n/**\n* Sends an HTTP request\n* @param {phinOptions|string} options - phin options object (or string for auto-detection)\n* @returns {Promise<http.serverResponse>} - phin-adapted response object\n*/\nconst phin = async (opts) => {\n\tif (typeof(opts) !== 'string') {\n\t\tif (!opts.hasOwnProperty('url')) {\n\t\t\tthrow new Error('Missing url option from options for request method.')\n\t\t}\n\t}\n\n\tconst req = centra(typeof opts === 'object' ? opts.url : opts, opts.method || 'GET')\n\n\tif (opts.headers) req.header(opts.headers)\n\tif (opts.stream) req.stream()\n\tif (opts.timeout) req.timeout(opts.timeout)\n\tif (opts.data) req.body(opts.data)\n\tif (opts.form) req.body(opts.form, 'form')\n\tif (opts.compression) req.compress()\n\n\tif (opts.followRedirects) {\n\t\tif (opts.followRedirects === true) {\n\t\t\treq.followRedirects(unspecifiedFollowRedirectsDefault)\n\t\t} else if (typeof opts.followRedirects === 'number') {\n\t\t\treq.followRedirects(opts.followRedirects)\n\t\t}\n\t}\n\n\tif (typeof opts.core === 'object') {\n\t\tObject.keys(opts.core).forEach((optName) => {\n\t\t\treq.option(optName, opts.core[optName])\n\t\t})\n\t}\n\n\tconst res = await req.send()\n\n\tif (opts.stream) {\n\t\tres.stream = res\n\n\t\treturn res\n\t}\n\telse {\n\t\tres.coreRes.body = res.body\n\n\t\tif (opts.parse) {\n\t\t\tif (opts.parse === 'json') {\n\t\t\t\tres.coreRes.body = await res.json()\n\t\n\t\t\t\treturn res.coreRes\n\t\t\t}\n\t\t\telse if (opts.parse === 'string') {\n\t\t\t\tres.coreRes.body = res.coreRes.body.toString()\n\n\t\t\t\treturn res.coreRes\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn res.coreRes\n\t}\n}\n\n// If we're running Node.js 8+, let's promisify it\n\nphin.promisified = phin\n\nphin.unpromisified = (opts, cb) => {\n\tphin(opts).then((data) => {\n\t\tif (cb) cb(null, data)\n\t}).catch((err) => {\n\t\tif (cb) cb(err, null)\n\t})\n}\n\n// Defaults\n\nphin.defaults = (defaultOpts) => async (opts) => {\n\tconst nops = typeof opts === 'string' ? {'url': opts} : opts\n\n\tObject.keys(defaultOpts).forEach((doK) => {\n\t\tif (!nops.hasOwnProperty(doK) || nops[doK] === null) {\n\t\t\tnops[doK] = defaultOpts[doK]\n\t\t}\n\t})\n\n\treturn await phin(nops)\n}\n\nmodule.exports = phin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9waGluL2xpYi9waGluLmpzIiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLG1CQUFPLENBQUMsZ0JBQUs7O0FBRTNCLGVBQWUsbUJBQU8sQ0FBQyx1RUFBUTs7QUFFL0I7O0FBRUE7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsc0JBQXNCO0FBQ25DLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVEsV0FBVztBQUNoQyxhQUFhLFFBQVEsUUFBUTtBQUM3QixhQUFhLFFBQVE7QUFDckIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsaUJBQWlCO0FBQzNCLFVBQVUsc0JBQXNCO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQSxVQUFVLG9CQUFvQjtBQUM5QixZQUFZLDhCQUE4QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLEVBQUU7QUFDRjs7QUFFQTs7QUFFQTtBQUNBLDBDQUEwQyxhQUFhOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRuLy4vbm9kZV9tb2R1bGVzL3BoaW4vbGliL3BoaW4uanM/NDA0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7VVJMfSA9IHJlcXVpcmUoJ3VybCcpXG5cbmNvbnN0IGNlbnRyYSA9IHJlcXVpcmUoJ2NlbnRyYScpXG5cbmNvbnN0IHVuc3BlY2lmaWVkRm9sbG93UmVkaXJlY3RzRGVmYXVsdCA9IDIwXG5cbi8qKlxuKiBwaGluIG9wdGlvbnMgb2JqZWN0LiBwaGluIGFsc28gc3VwcG9ydHMgYWxsIG9wdGlvbnMgZnJvbSA8YSBocmVmPVwiaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9odHRwX3JlcXVlc3Rfb3B0aW9uc19jYWxsYmFja1wiPmh0dHAucmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk8L2E+IGJ5IHBhc3NpbmcgdGhlbSBvbiB0byB0aGlzIG1ldGhvZCAob3Igc2ltaWxhcikuXG4qIEB0eXBlZGVmIHtPYmplY3R9IHBoaW5PcHRpb25zXG4qIEBwcm9wZXJ0eSB7c3RyaW5nfSB1cmwgLSBVUkwgdG8gcmVxdWVzdCAoYXV0b2RldGVjdCBpbmZlcnMgZnJvbSB0aGlzIFVSTClcbiogQHByb3BlcnR5IHtzdHJpbmd9IFttZXRob2Q9R0VUXSAtIFJlcXVlc3QgbWV0aG9kICgnR0VUJywgJ1BPU1QnLCBldGMuKVxuKiBAcHJvcGVydHkge3N0cmluZ3xCdWZmZXJ8b2JqZWN0fSBbZGF0YV0gLSBEYXRhIHRvIHNlbmQgYXMgcmVxdWVzdCBib2R5IChwaGluIG1heSBhdHRlbXB0IHRvIGNvbnZlcnQgdGhpcyBkYXRhIHRvIGEgc3RyaW5nIGlmIGl0IGlzbid0IGFscmVhZHkpXG4qIEBwcm9wZXJ0eSB7T2JqZWN0fSBbZm9ybV0gLSBPYmplY3QgdG8gc2VuZCBhcyBmb3JtIGRhdGEgKHNldHMgJ0NvbnRlbnQtVHlwZScgYW5kICdDb250ZW50LUxlbmd0aCcgaGVhZGVycywgYXMgd2VsbCBhcyByZXF1ZXN0IGJvZHkpIChvdmVyd3JpdGVzICdkYXRhJyBvcHRpb24gaWYgcHJlc2VudClcbiogQHByb3BlcnR5IHtPYmplY3R9IFtoZWFkZXJzPXt9XSAtIFJlcXVlc3QgaGVhZGVyc1xuKiBAcHJvcGVydHkge09iamVjdH0gW2NvcmU9e31dIC0gQ3VzdG9tIGNvcmUgSFRUUCBvcHRpb25zXG4qIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGFyc2U9bm9uZV0gLSBSZXNwb25zZSBwYXJzaW5nLiBFcnJvcnMgd2lsbCBiZSBnaXZlbiBpZiB0aGUgcmVzcG9uc2UgY2FuJ3QgYmUgcGFyc2VkLiAnbm9uZScgcmV0dXJucyBib2R5IGFzIGEgYEJ1ZmZlcmAsICdqc29uJyBhdHRlbXB0cyB0byBwYXJzZSB0aGUgYm9keSBhcyBKU09OLCBhbmQgJ3N0cmluZycgYXR0ZW1wdHMgdG8gcGFyc2UgdGhlIGJvZHkgYXMgYSBzdHJpbmdcbiogQHByb3BlcnR5IHtib29sZWFufSBbZm9sbG93UmVkaXJlY3RzPWZhbHNlXSAtIEVuYWJsZSBIVFRQIHJlZGlyZWN0IGZvbGxvd2luZ1xuKiBAcHJvcGVydHkge2Jvb2xlYW59IFtzdHJlYW09ZmFsc2VdIC0gRW5hYmxlIHN0cmVhbWluZyBvZiByZXNwb25zZS4gKFJlbW92ZXMgYm9keSBwcm9wZXJ0eSlcbiogQHByb3BlcnR5IHtib29sZWFufSBbY29tcHJlc3Npb249ZmFsc2VdIC0gRW5hYmxlIGNvbXByZXNzaW9uIGZvciByZXF1ZXN0XG4qIEBwcm9wZXJ0eSB7P251bWJlcn0gW3RpbWVvdXQ9bnVsbF0gLSBSZXF1ZXN0IHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXG4qIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaG9zdG5hbWU9YXV0b2RldGVjdF0gLSBVUkwgaG9zdG5hbWVcbiogQHByb3BlcnR5IHtOdW1iZXJ9IFtwb3J0PWF1dG9kZXRlY3RdIC0gVVJMIHBvcnRcbiogQHByb3BlcnR5IHtzdHJpbmd9IFtwYXRoPWF1dG9kZXRlY3RdIC0gVVJMIHBhdGhcbiovXG5cbi8qKlxuKiBSZXNwb25zZSBkYXRhXG4qIEBjYWxsYmFjayBwaGluUmVzcG9uc2VDYWxsYmFja1xuKiBAcGFyYW0gez8oRXJyb3J8c3RyaW5nKX0gZXJyb3IgLSBFcnJvciBpZiBhbnkgb2NjdXJyZWQgaW4gcmVxdWVzdCwgb3RoZXJ3aXNlIG51bGwuXG4qIEBwYXJhbSB7P2h0dHAuc2VydmVyUmVzcG9uc2V9IHBoaW5SZXNwb25zZSAtIHBoaW4gcmVzcG9uc2Ugb2JqZWN0LiBMaWtlIDxhIGhyZWY9J2h0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfY2xhc3NfaHR0cF9zZXJ2ZXJyZXNwb25zZSc+aHR0cC5TZXJ2ZXJSZXNwb25zZTwvYT4gYnV0IGhhcyBhIGJvZHkgcHJvcGVydHkgY29udGFpbmluZyByZXNwb25zZSBib2R5LCB1bmxlc3Mgc3RyZWFtLiBJZiBzdHJlYW0gb3B0aW9uIGlzIGVuYWJsZWQsIGEgc3RyZWFtIHByb3BlcnR5IHdpbGwgYmUgcHJvdmlkZWQgdG8gY2FsbGJhY2sgd2l0aCBhIHJlYWRhYmxlIHN0cmVhbS5cbiovXG5cbi8qKlxuKiBTZW5kcyBhbiBIVFRQIHJlcXVlc3RcbiogQHBhcmFtIHtwaGluT3B0aW9uc3xzdHJpbmd9IG9wdGlvbnMgLSBwaGluIG9wdGlvbnMgb2JqZWN0IChvciBzdHJpbmcgZm9yIGF1dG8tZGV0ZWN0aW9uKVxuKiBAcmV0dXJucyB7UHJvbWlzZTxodHRwLnNlcnZlclJlc3BvbnNlPn0gLSBwaGluLWFkYXB0ZWQgcmVzcG9uc2Ugb2JqZWN0XG4qL1xuY29uc3QgcGhpbiA9IGFzeW5jIChvcHRzKSA9PiB7XG5cdGlmICh0eXBlb2Yob3B0cykgIT09ICdzdHJpbmcnKSB7XG5cdFx0aWYgKCFvcHRzLmhhc093blByb3BlcnR5KCd1cmwnKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHVybCBvcHRpb24gZnJvbSBvcHRpb25zIGZvciByZXF1ZXN0IG1ldGhvZC4nKVxuXHRcdH1cblx0fVxuXG5cdGNvbnN0IHJlcSA9IGNlbnRyYSh0eXBlb2Ygb3B0cyA9PT0gJ29iamVjdCcgPyBvcHRzLnVybCA6IG9wdHMsIG9wdHMubWV0aG9kIHx8ICdHRVQnKVxuXG5cdGlmIChvcHRzLmhlYWRlcnMpIHJlcS5oZWFkZXIob3B0cy5oZWFkZXJzKVxuXHRpZiAob3B0cy5zdHJlYW0pIHJlcS5zdHJlYW0oKVxuXHRpZiAob3B0cy50aW1lb3V0KSByZXEudGltZW91dChvcHRzLnRpbWVvdXQpXG5cdGlmIChvcHRzLmRhdGEpIHJlcS5ib2R5KG9wdHMuZGF0YSlcblx0aWYgKG9wdHMuZm9ybSkgcmVxLmJvZHkob3B0cy5mb3JtLCAnZm9ybScpXG5cdGlmIChvcHRzLmNvbXByZXNzaW9uKSByZXEuY29tcHJlc3MoKVxuXG5cdGlmIChvcHRzLmZvbGxvd1JlZGlyZWN0cykge1xuXHRcdGlmIChvcHRzLmZvbGxvd1JlZGlyZWN0cyA9PT0gdHJ1ZSkge1xuXHRcdFx0cmVxLmZvbGxvd1JlZGlyZWN0cyh1bnNwZWNpZmllZEZvbGxvd1JlZGlyZWN0c0RlZmF1bHQpXG5cdFx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0cy5mb2xsb3dSZWRpcmVjdHMgPT09ICdudW1iZXInKSB7XG5cdFx0XHRyZXEuZm9sbG93UmVkaXJlY3RzKG9wdHMuZm9sbG93UmVkaXJlY3RzKVxuXHRcdH1cblx0fVxuXG5cdGlmICh0eXBlb2Ygb3B0cy5jb3JlID09PSAnb2JqZWN0Jykge1xuXHRcdE9iamVjdC5rZXlzKG9wdHMuY29yZSkuZm9yRWFjaCgob3B0TmFtZSkgPT4ge1xuXHRcdFx0cmVxLm9wdGlvbihvcHROYW1lLCBvcHRzLmNvcmVbb3B0TmFtZV0pXG5cdFx0fSlcblx0fVxuXG5cdGNvbnN0IHJlcyA9IGF3YWl0IHJlcS5zZW5kKClcblxuXHRpZiAob3B0cy5zdHJlYW0pIHtcblx0XHRyZXMuc3RyZWFtID0gcmVzXG5cblx0XHRyZXR1cm4gcmVzXG5cdH1cblx0ZWxzZSB7XG5cdFx0cmVzLmNvcmVSZXMuYm9keSA9IHJlcy5ib2R5XG5cblx0XHRpZiAob3B0cy5wYXJzZSkge1xuXHRcdFx0aWYgKG9wdHMucGFyc2UgPT09ICdqc29uJykge1xuXHRcdFx0XHRyZXMuY29yZVJlcy5ib2R5ID0gYXdhaXQgcmVzLmpzb24oKVxuXHRcblx0XHRcdFx0cmV0dXJuIHJlcy5jb3JlUmVzXG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChvcHRzLnBhcnNlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRyZXMuY29yZVJlcy5ib2R5ID0gcmVzLmNvcmVSZXMuYm9keS50b1N0cmluZygpXG5cblx0XHRcdFx0cmV0dXJuIHJlcy5jb3JlUmVzXG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiByZXMuY29yZVJlc1xuXHR9XG59XG5cbi8vIElmIHdlJ3JlIHJ1bm5pbmcgTm9kZS5qcyA4KywgbGV0J3MgcHJvbWlzaWZ5IGl0XG5cbnBoaW4ucHJvbWlzaWZpZWQgPSBwaGluXG5cbnBoaW4udW5wcm9taXNpZmllZCA9IChvcHRzLCBjYikgPT4ge1xuXHRwaGluKG9wdHMpLnRoZW4oKGRhdGEpID0+IHtcblx0XHRpZiAoY2IpIGNiKG51bGwsIGRhdGEpXG5cdH0pLmNhdGNoKChlcnIpID0+IHtcblx0XHRpZiAoY2IpIGNiKGVyciwgbnVsbClcblx0fSlcbn1cblxuLy8gRGVmYXVsdHNcblxucGhpbi5kZWZhdWx0cyA9IChkZWZhdWx0T3B0cykgPT4gYXN5bmMgKG9wdHMpID0+IHtcblx0Y29uc3Qgbm9wcyA9IHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJyA/IHsndXJsJzogb3B0c30gOiBvcHRzXG5cblx0T2JqZWN0LmtleXMoZGVmYXVsdE9wdHMpLmZvckVhY2goKGRvSykgPT4ge1xuXHRcdGlmICghbm9wcy5oYXNPd25Qcm9wZXJ0eShkb0spIHx8IG5vcHNbZG9LXSA9PT0gbnVsbCkge1xuXHRcdFx0bm9wc1tkb0tdID0gZGVmYXVsdE9wdHNbZG9LXVxuXHRcdH1cblx0fSlcblxuXHRyZXR1cm4gYXdhaXQgcGhpbihub3BzKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBoaW5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/phin/lib/phin.js\n");

/***/ })

};
;