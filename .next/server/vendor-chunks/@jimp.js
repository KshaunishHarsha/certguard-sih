"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@jimp";
exports.ids = ["vendor-chunks/@jimp"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@jimp/bmp/es/index.js":
/*!********************************************!*\
  !*** ./node_modules/@jimp/bmp/es/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var bmp_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bmp-js */ \"(action-browser)/./node_modules/bmp-js/index.js\");\n/* harmony import */ var bmp_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bmp_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\nconst MIME_TYPE = \"image/bmp\";\nconst MIME_TYPE_SECOND = \"image/x-ms-bmp\";\nfunction toAGBR(image) {\n  return (0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.scan)(image, 0, 0, image.bitmap.width, image.bitmap.height, function (x, y, index) {\n    const red = this.bitmap.data[index + 0];\n    const green = this.bitmap.data[index + 1];\n    const blue = this.bitmap.data[index + 2];\n    const alpha = this.bitmap.data[index + 3];\n    this.bitmap.data[index + 0] = alpha;\n    this.bitmap.data[index + 1] = blue;\n    this.bitmap.data[index + 2] = green;\n    this.bitmap.data[index + 3] = red;\n  }).bitmap;\n}\nfunction fromAGBR(bitmap) {\n  return (0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.scan)({\n    bitmap\n  }, 0, 0, bitmap.width, bitmap.height, function (x, y, index) {\n    const alpha = this.bitmap.data[index + 0];\n    const blue = this.bitmap.data[index + 1];\n    const green = this.bitmap.data[index + 2];\n    const red = this.bitmap.data[index + 3];\n    this.bitmap.data[index + 0] = red;\n    this.bitmap.data[index + 1] = green;\n    this.bitmap.data[index + 2] = blue;\n    this.bitmap.data[index + 3] = bitmap.is_with_alpha ? alpha : 0xff;\n  }).bitmap;\n}\nconst decode = data => fromAGBR(bmp_js__WEBPACK_IMPORTED_MODULE_0___default().decode(data));\nconst encode = image => bmp_js__WEBPACK_IMPORTED_MODULE_0___default().encode(toAGBR(image)).data;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  mime: {\n    [MIME_TYPE]: [\"bmp\"]\n  },\n  constants: {\n    MIME_BMP: MIME_TYPE,\n    MIME_X_MS_BMP: MIME_TYPE_SECOND\n  },\n  decoders: {\n    [MIME_TYPE]: decode,\n    [MIME_TYPE_SECOND]: decode\n  },\n  encoders: {\n    [MIME_TYPE]: encode,\n    [MIME_TYPE_SECOND]: encode\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9ibXAvZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF5QjtBQUNVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLFNBQVMsaURBQUk7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxTQUFTLGlEQUFJO0FBQ2I7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdDQUFnQyxvREFBVTtBQUMxQyx3QkFBd0Isb0RBQVU7QUFDbEMsaUVBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyxFQUFFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9ibXAvZXMvaW5kZXguanM/N2Q1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQk1QIGZyb20gXCJibXAtanNcIjtcbmltcG9ydCB7IHNjYW4gfSBmcm9tIFwiQGppbXAvdXRpbHNcIjtcbmNvbnN0IE1JTUVfVFlQRSA9IFwiaW1hZ2UvYm1wXCI7XG5jb25zdCBNSU1FX1RZUEVfU0VDT05EID0gXCJpbWFnZS94LW1zLWJtcFwiO1xuZnVuY3Rpb24gdG9BR0JSKGltYWdlKSB7XG4gIHJldHVybiBzY2FuKGltYWdlLCAwLCAwLCBpbWFnZS5iaXRtYXAud2lkdGgsIGltYWdlLmJpdG1hcC5oZWlnaHQsIGZ1bmN0aW9uICh4LCB5LCBpbmRleCkge1xuICAgIGNvbnN0IHJlZCA9IHRoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAwXTtcbiAgICBjb25zdCBncmVlbiA9IHRoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAxXTtcbiAgICBjb25zdCBibHVlID0gdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDJdO1xuICAgIGNvbnN0IGFscGhhID0gdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDNdO1xuICAgIHRoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAwXSA9IGFscGhhO1xuICAgIHRoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAxXSA9IGJsdWU7XG4gICAgdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDJdID0gZ3JlZW47XG4gICAgdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDNdID0gcmVkO1xuICB9KS5iaXRtYXA7XG59XG5mdW5jdGlvbiBmcm9tQUdCUihiaXRtYXApIHtcbiAgcmV0dXJuIHNjYW4oe1xuICAgIGJpdG1hcFxuICB9LCAwLCAwLCBiaXRtYXAud2lkdGgsIGJpdG1hcC5oZWlnaHQsIGZ1bmN0aW9uICh4LCB5LCBpbmRleCkge1xuICAgIGNvbnN0IGFscGhhID0gdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDBdO1xuICAgIGNvbnN0IGJsdWUgPSB0aGlzLmJpdG1hcC5kYXRhW2luZGV4ICsgMV07XG4gICAgY29uc3QgZ3JlZW4gPSB0aGlzLmJpdG1hcC5kYXRhW2luZGV4ICsgMl07XG4gICAgY29uc3QgcmVkID0gdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDNdO1xuICAgIHRoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAwXSA9IHJlZDtcbiAgICB0aGlzLmJpdG1hcC5kYXRhW2luZGV4ICsgMV0gPSBncmVlbjtcbiAgICB0aGlzLmJpdG1hcC5kYXRhW2luZGV4ICsgMl0gPSBibHVlO1xuICAgIHRoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAzXSA9IGJpdG1hcC5pc193aXRoX2FscGhhID8gYWxwaGEgOiAweGZmO1xuICB9KS5iaXRtYXA7XG59XG5jb25zdCBkZWNvZGUgPSBkYXRhID0+IGZyb21BR0JSKEJNUC5kZWNvZGUoZGF0YSkpO1xuY29uc3QgZW5jb2RlID0gaW1hZ2UgPT4gQk1QLmVuY29kZSh0b0FHQlIoaW1hZ2UpKS5kYXRhO1xuZXhwb3J0IGRlZmF1bHQgKCgpID0+ICh7XG4gIG1pbWU6IHtcbiAgICBbTUlNRV9UWVBFXTogW1wiYm1wXCJdXG4gIH0sXG4gIGNvbnN0YW50czoge1xuICAgIE1JTUVfQk1QOiBNSU1FX1RZUEUsXG4gICAgTUlNRV9YX01TX0JNUDogTUlNRV9UWVBFX1NFQ09ORFxuICB9LFxuICBkZWNvZGVyczoge1xuICAgIFtNSU1FX1RZUEVdOiBkZWNvZGUsXG4gICAgW01JTUVfVFlQRV9TRUNPTkRdOiBkZWNvZGVcbiAgfSxcbiAgZW5jb2RlcnM6IHtcbiAgICBbTUlNRV9UWVBFXTogZW5jb2RlLFxuICAgIFtNSU1FX1RZUEVfU0VDT05EXTogZW5jb2RlXG4gIH1cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/bmp/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/core/es/composite/composite-modes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@jimp/core/es/composite/composite-modes.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   darken: () => (/* binding */ darken),\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   dstOver: () => (/* binding */ dstOver),\n/* harmony export */   exclusion: () => (/* binding */ exclusion),\n/* harmony export */   hardLight: () => (/* binding */ hardLight),\n/* harmony export */   lighten: () => (/* binding */ lighten),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   overlay: () => (/* binding */ overlay),\n/* harmony export */   screen: () => (/* binding */ screen),\n/* harmony export */   srcOver: () => (/* binding */ srcOver)\n/* harmony export */ });\nfunction srcOver(src, dst) {\n  let ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  src.a *= ops;\n  const a = dst.a + src.a - dst.a * src.a;\n  const r = (src.r * src.a + dst.r * dst.a * (1 - src.a)) / a;\n  const g = (src.g * src.a + dst.g * dst.a * (1 - src.a)) / a;\n  const b = (src.b * src.a + dst.b * dst.a * (1 - src.a)) / a;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nfunction dstOver(src, dst) {\n  let ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  src.a *= ops;\n  const a = dst.a + src.a - dst.a * src.a;\n  const r = (dst.r * dst.a + src.r * src.a * (1 - dst.a)) / a;\n  const g = (dst.g * dst.a + src.g * src.a * (1 - dst.a)) / a;\n  const b = (dst.b * dst.a + src.b * src.a * (1 - dst.a)) / a;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nfunction multiply(src, dst) {\n  let ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  src.a *= ops;\n  const a = dst.a + src.a - dst.a * src.a;\n  const sra = src.r * src.a;\n  const sga = src.g * src.a;\n  const sba = src.b * src.a;\n  const dra = dst.r * dst.a;\n  const dga = dst.g * dst.a;\n  const dba = dst.b * dst.a;\n  const r = (sra * dra + sra * (1 - dst.a) + dra * (1 - src.a)) / a;\n  const g = (sga * dga + sga * (1 - dst.a) + dga * (1 - src.a)) / a;\n  const b = (sba * dba + sba * (1 - dst.a) + dba * (1 - src.a)) / a;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nfunction add(src, dst) {\n  let ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  src.a *= ops;\n  const a = dst.a + src.a - dst.a * src.a;\n  const sra = src.r * src.a;\n  const sga = src.g * src.a;\n  const sba = src.b * src.a;\n  const dra = dst.r * dst.a;\n  const dga = dst.g * dst.a;\n  const dba = dst.b * dst.a;\n  const r = (sra + dra) / a;\n  const g = (sga + dga) / a;\n  const b = (sba + dba) / a;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nfunction screen(src, dst) {\n  let ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  src.a *= ops;\n  const a = dst.a + src.a - dst.a * src.a;\n  const sra = src.r * src.a;\n  const sga = src.g * src.a;\n  const sba = src.b * src.a;\n  const dra = dst.r * dst.a;\n  const dga = dst.g * dst.a;\n  const dba = dst.b * dst.a;\n  const r = (sra * dst.a + dra * src.a - sra * dra + sra * (1 - dst.a) + dra * (1 - src.a)) / a;\n  const g = (sga * dst.a + dga * src.a - sga * dga + sga * (1 - dst.a) + dga * (1 - src.a)) / a;\n  const b = (sba * dst.a + dba * src.a - sba * dba + sba * (1 - dst.a) + dba * (1 - src.a)) / a;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nfunction overlay(src, dst) {\n  let ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  src.a *= ops;\n  const a = dst.a + src.a - dst.a * src.a;\n  const sra = src.r * src.a;\n  const sga = src.g * src.a;\n  const sba = src.b * src.a;\n  const dra = dst.r * dst.a;\n  const dga = dst.g * dst.a;\n  const dba = dst.b * dst.a;\n  const r = (2 * dra <= dst.a ? 2 * sra * dra + sra * (1 - dst.a) + dra * (1 - src.a) : sra * (1 + dst.a) + dra * (1 + src.a) - 2 * dra * sra - dst.a * src.a) / a;\n  const g = (2 * dga <= dst.a ? 2 * sga * dga + sga * (1 - dst.a) + dga * (1 - src.a) : sga * (1 + dst.a) + dga * (1 + src.a) - 2 * dga * sga - dst.a * src.a) / a;\n  const b = (2 * dba <= dst.a ? 2 * sba * dba + sba * (1 - dst.a) + dba * (1 - src.a) : sba * (1 + dst.a) + dba * (1 + src.a) - 2 * dba * sba - dst.a * src.a) / a;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nfunction darken(src, dst) {\n  let ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  src.a *= ops;\n  const a = dst.a + src.a - dst.a * src.a;\n  const sra = src.r * src.a;\n  const sga = src.g * src.a;\n  const sba = src.b * src.a;\n  const dra = dst.r * dst.a;\n  const dga = dst.g * dst.a;\n  const dba = dst.b * dst.a;\n  const r = (Math.min(sra * dst.a, dra * src.a) + sra * (1 - dst.a) + dra * (1 - src.a)) / a;\n  const g = (Math.min(sga * dst.a, dga * src.a) + sga * (1 - dst.a) + dga * (1 - src.a)) / a;\n  const b = (Math.min(sba * dst.a, dba * src.a) + sba * (1 - dst.a) + dba * (1 - src.a)) / a;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nfunction lighten(src, dst) {\n  let ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  src.a *= ops;\n  const a = dst.a + src.a - dst.a * src.a;\n  const sra = src.r * src.a;\n  const sga = src.g * src.a;\n  const sba = src.b * src.a;\n  const dra = dst.r * dst.a;\n  const dga = dst.g * dst.a;\n  const dba = dst.b * dst.a;\n  const r = (Math.max(sra * dst.a, dra * src.a) + sra * (1 - dst.a) + dra * (1 - src.a)) / a;\n  const g = (Math.max(sga * dst.a, dga * src.a) + sga * (1 - dst.a) + dga * (1 - src.a)) / a;\n  const b = (Math.max(sba * dst.a, dba * src.a) + sba * (1 - dst.a) + dba * (1 - src.a)) / a;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nfunction hardLight(src, dst) {\n  let ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  src.a *= ops;\n  const a = dst.a + src.a - dst.a * src.a;\n  const sra = src.r * src.a;\n  const sga = src.g * src.a;\n  const sba = src.b * src.a;\n  const dra = dst.r * dst.a;\n  const dga = dst.g * dst.a;\n  const dba = dst.b * dst.a;\n  const r = (2 * sra <= src.a ? 2 * sra * dra + sra * (1 - dst.a) + dra * (1 - src.a) : sra * (1 + dst.a) + dra * (1 + src.a) - 2 * dra * sra - dst.a * src.a) / a;\n  const g = (2 * sga <= src.a ? 2 * sga * dga + sga * (1 - dst.a) + dga * (1 - src.a) : sga * (1 + dst.a) + dga * (1 + src.a) - 2 * dga * sga - dst.a * src.a) / a;\n  const b = (2 * sba <= src.a ? 2 * sba * dba + sba * (1 - dst.a) + dba * (1 - src.a) : sba * (1 + dst.a) + dba * (1 + src.a) - 2 * dba * sba - dst.a * src.a) / a;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nfunction difference(src, dst) {\n  let ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  src.a *= ops;\n  const a = dst.a + src.a - dst.a * src.a;\n  const sra = src.r * src.a;\n  const sga = src.g * src.a;\n  const sba = src.b * src.a;\n  const dra = dst.r * dst.a;\n  const dga = dst.g * dst.a;\n  const dba = dst.b * dst.a;\n  const r = (sra + dra - 2 * Math.min(sra * dst.a, dra * src.a)) / a;\n  const g = (sga + dga - 2 * Math.min(sga * dst.a, dga * src.a)) / a;\n  const b = (sba + dba - 2 * Math.min(sba * dst.a, dba * src.a)) / a;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nfunction exclusion(src, dst) {\n  let ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  src.a *= ops;\n  const a = dst.a + src.a - dst.a * src.a;\n  const sra = src.r * src.a;\n  const sga = src.g * src.a;\n  const sba = src.b * src.a;\n  const dra = dst.r * dst.a;\n  const dga = dst.g * dst.a;\n  const dba = dst.b * dst.a;\n  const r = (sra * dst.a + dra * src.a - 2 * sra * dra + sra * (1 - dst.a) + dra * (1 - src.a)) / a;\n  const g = (sga * dst.a + dga * src.a - 2 * sga * dga + sga * (1 - dst.a) + dga * (1 - src.a)) / a;\n  const b = (sba * dst.a + dba * src.a - 2 * sba * dba + sba * (1 - dst.a) + dba * (1 - src.a)) / a;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\n//# sourceMappingURL=composite-modes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/core/es/composite/composite-modes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/core/es/composite/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@jimp/core/es/composite/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ composite)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ \"(action-browser)/./node_modules/@jimp/core/es/constants.js\");\n/* harmony import */ var _composite_modes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./composite-modes */ \"(action-browser)/./node_modules/@jimp/core/es/composite/composite-modes.js\");\n\n\n\n\n/**\n * Composites a source image over to this image respecting alpha channels\n * @param {Jimp} src the source Jimp instance\n * @param {number} x the x position to blit the image\n * @param {number} y the y position to blit the image\n * @param {object} options determine what mode to use\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nfunction composite(src, x, y) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let cb = arguments.length > 4 ? arguments[4] : undefined;\n  if (typeof options === \"function\") {\n    cb = options;\n    options = {};\n  }\n  if (!(src instanceof this.constructor)) {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"The source must be a Jimp image\", cb);\n  }\n  if (typeof x !== \"number\" || typeof y !== \"number\") {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"x and y must be numbers\", cb);\n  }\n  let {\n    mode,\n    opacitySource,\n    opacityDest\n  } = options;\n  if (!mode) {\n    mode = _constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_SOURCE_OVER;\n  }\n  if (typeof opacitySource !== \"number\" || opacitySource < 0 || opacitySource > 1) {\n    opacitySource = 1.0;\n  }\n  if (typeof opacityDest !== \"number\" || opacityDest < 0 || opacityDest > 1) {\n    opacityDest = 1.0;\n  }\n\n  // eslint-disable-next-line import/namespace\n  const blendmode = _composite_modes__WEBPACK_IMPORTED_MODULE_2__[mode];\n\n  // round input\n  x = Math.round(x);\n  y = Math.round(y);\n  const baseImage = this;\n  if (opacityDest !== 1.0) {\n    baseImage.opacity(opacityDest);\n  }\n  src.scanQuiet(0, 0, src.bitmap.width, src.bitmap.height, function (sx, sy, idx) {\n    const dstIdx = baseImage.getPixelIndex(x + sx, y + sy, _constants__WEBPACK_IMPORTED_MODULE_1__.EDGE_CROP);\n    if (dstIdx === -1) {\n      // Skip target pixels outside of dst\n      return;\n    }\n    const blended = blendmode({\n      r: this.bitmap.data[idx + 0] / 255,\n      g: this.bitmap.data[idx + 1] / 255,\n      b: this.bitmap.data[idx + 2] / 255,\n      a: this.bitmap.data[idx + 3] / 255\n    }, {\n      r: baseImage.bitmap.data[dstIdx + 0] / 255,\n      g: baseImage.bitmap.data[dstIdx + 1] / 255,\n      b: baseImage.bitmap.data[dstIdx + 2] / 255,\n      a: baseImage.bitmap.data[dstIdx + 3] / 255\n    }, opacitySource);\n    baseImage.bitmap.data[dstIdx + 0] = this.constructor.limit255(blended.r * 255);\n    baseImage.bitmap.data[dstIdx + 1] = this.constructor.limit255(blended.g * 255);\n    baseImage.bitmap.data[dstIdx + 2] = this.constructor.limit255(blended.b * 255);\n    baseImage.bitmap.data[dstIdx + 3] = this.constructor.limit255(blended.a * 255);\n  });\n  if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n  return this;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9jb3JlL2VzL2NvbXBvc2l0ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdEO0FBQ2Q7QUFDVTs7QUFFcEQ7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLHVCQUF1QjtBQUNsQyxhQUFhLE1BQU07QUFDbkI7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtREFBVTtBQUNyQjtBQUNBO0FBQ0EsV0FBVyxtREFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsV0FBVyx5REFBMkI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IsNkNBQWM7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsaURBQW1CO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxNQUFNLDBEQUFhO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9jb3JlL2VzL2NvbXBvc2l0ZS9pbmRleC5qcz9lZWU5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9kZVBhdHRlcm4sIHRocm93RXJyb3IgfSBmcm9tIFwiQGppbXAvdXRpbHNcIjtcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgKiBhcyBjb21wb3NpdGVNb2RlcyBmcm9tIFwiLi9jb21wb3NpdGUtbW9kZXNcIjtcblxuLyoqXG4gKiBDb21wb3NpdGVzIGEgc291cmNlIGltYWdlIG92ZXIgdG8gdGhpcyBpbWFnZSByZXNwZWN0aW5nIGFscGhhIGNoYW5uZWxzXG4gKiBAcGFyYW0ge0ppbXB9IHNyYyB0aGUgc291cmNlIEppbXAgaW5zdGFuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IHRoZSB4IHBvc2l0aW9uIHRvIGJsaXQgdGhlIGltYWdlXG4gKiBAcGFyYW0ge251bWJlcn0geSB0aGUgeSBwb3NpdGlvbiB0byBibGl0IHRoZSBpbWFnZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgZGV0ZXJtaW5lIHdoYXQgbW9kZSB0byB1c2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBvc2l0ZShzcmMsIHgsIHkpIHtcbiAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICBsZXQgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IHVuZGVmaW5lZDtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjYiA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghKHNyYyBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpKSB7XG4gICAgcmV0dXJuIHRocm93RXJyb3IuY2FsbCh0aGlzLCBcIlRoZSBzb3VyY2UgbXVzdCBiZSBhIEppbXAgaW1hZ2VcIiwgY2IpO1xuICB9XG4gIGlmICh0eXBlb2YgeCAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgeSAhPT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiB0aHJvd0Vycm9yLmNhbGwodGhpcywgXCJ4IGFuZCB5IG11c3QgYmUgbnVtYmVyc1wiLCBjYik7XG4gIH1cbiAgbGV0IHtcbiAgICBtb2RlLFxuICAgIG9wYWNpdHlTb3VyY2UsXG4gICAgb3BhY2l0eURlc3RcbiAgfSA9IG9wdGlvbnM7XG4gIGlmICghbW9kZSkge1xuICAgIG1vZGUgPSBjb25zdGFudHMuQkxFTkRfU09VUkNFX09WRVI7XG4gIH1cbiAgaWYgKHR5cGVvZiBvcGFjaXR5U291cmNlICE9PSBcIm51bWJlclwiIHx8IG9wYWNpdHlTb3VyY2UgPCAwIHx8IG9wYWNpdHlTb3VyY2UgPiAxKSB7XG4gICAgb3BhY2l0eVNvdXJjZSA9IDEuMDtcbiAgfVxuICBpZiAodHlwZW9mIG9wYWNpdHlEZXN0ICE9PSBcIm51bWJlclwiIHx8IG9wYWNpdHlEZXN0IDwgMCB8fCBvcGFjaXR5RGVzdCA+IDEpIHtcbiAgICBvcGFjaXR5RGVzdCA9IDEuMDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbmFtZXNwYWNlXG4gIGNvbnN0IGJsZW5kbW9kZSA9IGNvbXBvc2l0ZU1vZGVzW21vZGVdO1xuXG4gIC8vIHJvdW5kIGlucHV0XG4gIHggPSBNYXRoLnJvdW5kKHgpO1xuICB5ID0gTWF0aC5yb3VuZCh5KTtcbiAgY29uc3QgYmFzZUltYWdlID0gdGhpcztcbiAgaWYgKG9wYWNpdHlEZXN0ICE9PSAxLjApIHtcbiAgICBiYXNlSW1hZ2Uub3BhY2l0eShvcGFjaXR5RGVzdCk7XG4gIH1cbiAgc3JjLnNjYW5RdWlldCgwLCAwLCBzcmMuYml0bWFwLndpZHRoLCBzcmMuYml0bWFwLmhlaWdodCwgZnVuY3Rpb24gKHN4LCBzeSwgaWR4KSB7XG4gICAgY29uc3QgZHN0SWR4ID0gYmFzZUltYWdlLmdldFBpeGVsSW5kZXgoeCArIHN4LCB5ICsgc3ksIGNvbnN0YW50cy5FREdFX0NST1ApO1xuICAgIGlmIChkc3RJZHggPT09IC0xKSB7XG4gICAgICAvLyBTa2lwIHRhcmdldCBwaXhlbHMgb3V0c2lkZSBvZiBkc3RcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYmxlbmRlZCA9IGJsZW5kbW9kZSh7XG4gICAgICByOiB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDBdIC8gMjU1LFxuICAgICAgZzogdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAxXSAvIDI1NSxcbiAgICAgIGI6IHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMl0gLyAyNTUsXG4gICAgICBhOiB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDNdIC8gMjU1XG4gICAgfSwge1xuICAgICAgcjogYmFzZUltYWdlLmJpdG1hcC5kYXRhW2RzdElkeCArIDBdIC8gMjU1LFxuICAgICAgZzogYmFzZUltYWdlLmJpdG1hcC5kYXRhW2RzdElkeCArIDFdIC8gMjU1LFxuICAgICAgYjogYmFzZUltYWdlLmJpdG1hcC5kYXRhW2RzdElkeCArIDJdIC8gMjU1LFxuICAgICAgYTogYmFzZUltYWdlLmJpdG1hcC5kYXRhW2RzdElkeCArIDNdIC8gMjU1XG4gICAgfSwgb3BhY2l0eVNvdXJjZSk7XG4gICAgYmFzZUltYWdlLmJpdG1hcC5kYXRhW2RzdElkeCArIDBdID0gdGhpcy5jb25zdHJ1Y3Rvci5saW1pdDI1NShibGVuZGVkLnIgKiAyNTUpO1xuICAgIGJhc2VJbWFnZS5iaXRtYXAuZGF0YVtkc3RJZHggKyAxXSA9IHRoaXMuY29uc3RydWN0b3IubGltaXQyNTUoYmxlbmRlZC5nICogMjU1KTtcbiAgICBiYXNlSW1hZ2UuYml0bWFwLmRhdGFbZHN0SWR4ICsgMl0gPSB0aGlzLmNvbnN0cnVjdG9yLmxpbWl0MjU1KGJsZW5kZWQuYiAqIDI1NSk7XG4gICAgYmFzZUltYWdlLmJpdG1hcC5kYXRhW2RzdElkeCArIDNdID0gdGhpcy5jb25zdHJ1Y3Rvci5saW1pdDI1NShibGVuZGVkLmEgKiAyNTUpO1xuICB9KTtcbiAgaWYgKGlzTm9kZVBhdHRlcm4oY2IpKSB7XG4gICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/core/es/composite/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/core/es/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/@jimp/core/es/constants.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTO: () => (/* binding */ AUTO),\n/* harmony export */   BLEND_ADD: () => (/* binding */ BLEND_ADD),\n/* harmony export */   BLEND_DARKEN: () => (/* binding */ BLEND_DARKEN),\n/* harmony export */   BLEND_DESTINATION_OVER: () => (/* binding */ BLEND_DESTINATION_OVER),\n/* harmony export */   BLEND_DIFFERENCE: () => (/* binding */ BLEND_DIFFERENCE),\n/* harmony export */   BLEND_EXCLUSION: () => (/* binding */ BLEND_EXCLUSION),\n/* harmony export */   BLEND_HARDLIGHT: () => (/* binding */ BLEND_HARDLIGHT),\n/* harmony export */   BLEND_LIGHTEN: () => (/* binding */ BLEND_LIGHTEN),\n/* harmony export */   BLEND_MULTIPLY: () => (/* binding */ BLEND_MULTIPLY),\n/* harmony export */   BLEND_OVERLAY: () => (/* binding */ BLEND_OVERLAY),\n/* harmony export */   BLEND_SCREEN: () => (/* binding */ BLEND_SCREEN),\n/* harmony export */   BLEND_SOURCE_OVER: () => (/* binding */ BLEND_SOURCE_OVER),\n/* harmony export */   EDGE_CROP: () => (/* binding */ EDGE_CROP),\n/* harmony export */   EDGE_EXTEND: () => (/* binding */ EDGE_EXTEND),\n/* harmony export */   EDGE_WRAP: () => (/* binding */ EDGE_WRAP),\n/* harmony export */   HORIZONTAL_ALIGN_CENTER: () => (/* binding */ HORIZONTAL_ALIGN_CENTER),\n/* harmony export */   HORIZONTAL_ALIGN_LEFT: () => (/* binding */ HORIZONTAL_ALIGN_LEFT),\n/* harmony export */   HORIZONTAL_ALIGN_RIGHT: () => (/* binding */ HORIZONTAL_ALIGN_RIGHT),\n/* harmony export */   VERTICAL_ALIGN_BOTTOM: () => (/* binding */ VERTICAL_ALIGN_BOTTOM),\n/* harmony export */   VERTICAL_ALIGN_MIDDLE: () => (/* binding */ VERTICAL_ALIGN_MIDDLE),\n/* harmony export */   VERTICAL_ALIGN_TOP: () => (/* binding */ VERTICAL_ALIGN_TOP)\n/* harmony export */ });\n// used to auto resizing etc.\nconst AUTO = -1;\n\n// Align modes for cover, contain, bit masks\nconst HORIZONTAL_ALIGN_LEFT = 1;\nconst HORIZONTAL_ALIGN_CENTER = 2;\nconst HORIZONTAL_ALIGN_RIGHT = 4;\nconst VERTICAL_ALIGN_TOP = 8;\nconst VERTICAL_ALIGN_MIDDLE = 16;\nconst VERTICAL_ALIGN_BOTTOM = 32;\n\n// blend modes\nconst BLEND_SOURCE_OVER = \"srcOver\";\nconst BLEND_DESTINATION_OVER = \"dstOver\";\nconst BLEND_MULTIPLY = \"multiply\";\nconst BLEND_ADD = \"add\";\nconst BLEND_SCREEN = \"screen\";\nconst BLEND_OVERLAY = \"overlay\";\nconst BLEND_DARKEN = \"darken\";\nconst BLEND_LIGHTEN = \"lighten\";\nconst BLEND_HARDLIGHT = \"hardLight\";\nconst BLEND_DIFFERENCE = \"difference\";\nconst BLEND_EXCLUSION = \"exclusion\";\n\n// Edge Handling\nconst EDGE_EXTEND = 1;\nconst EDGE_WRAP = 2;\nconst EDGE_CROP = 3;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9jb3JlL2VzL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNPOztBQUVQO0FBQ087QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVQO0FBQ087QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFUDtBQUNPO0FBQ0E7QUFDQTtBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dG4vLi9ub2RlX21vZHVsZXMvQGppbXAvY29yZS9lcy9jb25zdGFudHMuanM/YTMxNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB1c2VkIHRvIGF1dG8gcmVzaXppbmcgZXRjLlxuZXhwb3J0IGNvbnN0IEFVVE8gPSAtMTtcblxuLy8gQWxpZ24gbW9kZXMgZm9yIGNvdmVyLCBjb250YWluLCBiaXQgbWFza3NcbmV4cG9ydCBjb25zdCBIT1JJWk9OVEFMX0FMSUdOX0xFRlQgPSAxO1xuZXhwb3J0IGNvbnN0IEhPUklaT05UQUxfQUxJR05fQ0VOVEVSID0gMjtcbmV4cG9ydCBjb25zdCBIT1JJWk9OVEFMX0FMSUdOX1JJR0hUID0gNDtcbmV4cG9ydCBjb25zdCBWRVJUSUNBTF9BTElHTl9UT1AgPSA4O1xuZXhwb3J0IGNvbnN0IFZFUlRJQ0FMX0FMSUdOX01JRERMRSA9IDE2O1xuZXhwb3J0IGNvbnN0IFZFUlRJQ0FMX0FMSUdOX0JPVFRPTSA9IDMyO1xuXG4vLyBibGVuZCBtb2Rlc1xuZXhwb3J0IGNvbnN0IEJMRU5EX1NPVVJDRV9PVkVSID0gXCJzcmNPdmVyXCI7XG5leHBvcnQgY29uc3QgQkxFTkRfREVTVElOQVRJT05fT1ZFUiA9IFwiZHN0T3ZlclwiO1xuZXhwb3J0IGNvbnN0IEJMRU5EX01VTFRJUExZID0gXCJtdWx0aXBseVwiO1xuZXhwb3J0IGNvbnN0IEJMRU5EX0FERCA9IFwiYWRkXCI7XG5leHBvcnQgY29uc3QgQkxFTkRfU0NSRUVOID0gXCJzY3JlZW5cIjtcbmV4cG9ydCBjb25zdCBCTEVORF9PVkVSTEFZID0gXCJvdmVybGF5XCI7XG5leHBvcnQgY29uc3QgQkxFTkRfREFSS0VOID0gXCJkYXJrZW5cIjtcbmV4cG9ydCBjb25zdCBCTEVORF9MSUdIVEVOID0gXCJsaWdodGVuXCI7XG5leHBvcnQgY29uc3QgQkxFTkRfSEFSRExJR0hUID0gXCJoYXJkTGlnaHRcIjtcbmV4cG9ydCBjb25zdCBCTEVORF9ESUZGRVJFTkNFID0gXCJkaWZmZXJlbmNlXCI7XG5leHBvcnQgY29uc3QgQkxFTkRfRVhDTFVTSU9OID0gXCJleGNsdXNpb25cIjtcblxuLy8gRWRnZSBIYW5kbGluZ1xuZXhwb3J0IGNvbnN0IEVER0VfRVhURU5EID0gMTtcbmV4cG9ydCBjb25zdCBFREdFX1dSQVAgPSAyO1xuZXhwb3J0IGNvbnN0IEVER0VfQ1JPUCA9IDM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/core/es/constants.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/core/es/index.js":
/*!*********************************************!*\
  !*** ./node_modules/@jimp/core/es/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addConstants: () => (/* binding */ addConstants),\n/* harmony export */   addJimpMethods: () => (/* binding */ addJimpMethods),\n/* harmony export */   addType: () => (/* reexport safe */ _utils_mime__WEBPACK_IMPORTED_MODULE_10__.addType),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   jimpEvChange: () => (/* binding */ jimpEvChange),\n/* harmony export */   jimpEvMethod: () => (/* binding */ jimpEvMethod)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n/* harmony import */ var any_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! any-base */ \"(action-browser)/./node_modules/any-base/index.js\");\n/* harmony import */ var any_base__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(any_base__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var pixelmatch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! pixelmatch */ \"(action-browser)/./node_modules/pixelmatch/index.js\");\n/* harmony import */ var pixelmatch__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(pixelmatch__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var tinycolor2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tinycolor2 */ \"(action-browser)/./node_modules/tinycolor2/esm/tinycolor.js\");\n/* harmony import */ var _modules_phash__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/phash */ \"(action-browser)/./node_modules/@jimp/core/es/modules/phash.js\");\n/* harmony import */ var _request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./request */ \"(action-browser)/./node_modules/@jimp/core/es/request.js\");\n/* harmony import */ var _composite__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./composite */ \"(action-browser)/./node_modules/@jimp/core/es/composite/index.js\");\n/* harmony import */ var _utils_promisify__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/promisify */ \"(action-browser)/./node_modules/@jimp/core/es/utils/promisify.js\");\n/* harmony import */ var _utils_mime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/mime */ \"(action-browser)/./node_modules/@jimp/core/es/utils/mime.js\");\n/* harmony import */ var _utils_image_bitmap__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/image-bitmap */ \"(action-browser)/./node_modules/@jimp/core/es/utils/image-bitmap.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./constants */ \"(action-browser)/./node_modules/@jimp/core/es/constants.js\");\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst alphabet = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_\";\n\n// an array storing the maximum string length of hashes at various bases\n// 0 and 1 do not exist as possible hash lengths\nconst maxHashLength = [NaN, NaN];\nfor (let i = 2; i < 65; i++) {\n  const maxHash = any_base__WEBPACK_IMPORTED_MODULE_4___default()((any_base__WEBPACK_IMPORTED_MODULE_4___default().BIN), alphabet.slice(0, i))(new Array(64 + 1).join(\"1\"));\n  maxHashLength.push(maxHash.length);\n}\n\n// no operation\nfunction noop() {}\n\n// error checking methods\n\nfunction isArrayBuffer(test) {\n  return Object.prototype.toString.call(test).toLowerCase().indexOf(\"arraybuffer\") > -1;\n}\n\n// Prepare a Buffer object from the arrayBuffer. Necessary in the browser > node conversion,\n// But this function is not useful when running in node directly\nfunction bufferFromArrayBuffer(arrayBuffer) {\n  const buffer = Buffer.alloc(arrayBuffer.byteLength);\n  const view = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < buffer.length; ++i) {\n    buffer[i] = view[i];\n  }\n  return buffer;\n}\nfunction loadFromURL(options, cb) {\n  (0,_request__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(options, (err, data) => {\n    if (err) {\n      return cb(err);\n    }\n    if (typeof data === \"object\" && Buffer.isBuffer(data)) {\n      return cb(null, data);\n    }\n    if (typeof data === \"object\" && isArrayBuffer(data)) {\n      return cb(null, bufferFromArrayBuffer(data));\n    }\n    return new Error(`Could not load Buffer from <${options.url}>`);\n  });\n}\nfunction loadBufferFromPath(src, cb) {\n  if ((fs__WEBPACK_IMPORTED_MODULE_0___default()) && typeof (fs__WEBPACK_IMPORTED_MODULE_0___default().readFile) === \"function\" && !src.match(/^(http|ftp)s?:\\/\\/./)) {\n    fs__WEBPACK_IMPORTED_MODULE_0___default().readFile(src, cb);\n  } else {\n    loadFromURL({\n      url: src\n    }, cb);\n  }\n}\nfunction isRawRGBAData(obj) {\n  return obj && typeof obj === \"object\" && typeof obj.width === \"number\" && typeof obj.height === \"number\" && (Buffer.isBuffer(obj.data) || obj.data instanceof Uint8Array || typeof Uint8ClampedArray === \"function\" && obj.data instanceof Uint8ClampedArray) && (obj.data.length === obj.width * obj.height * 4 || obj.data.length === obj.width * obj.height * 3);\n}\nfunction makeRGBABufferFromRGB(buffer) {\n  if (buffer.length % 3 !== 0) {\n    throw new Error(\"Buffer length is incorrect\");\n  }\n  const rgbaBuffer = Buffer.allocUnsafe(buffer.length / 3 * 4);\n  let j = 0;\n  for (let i = 0; i < buffer.length; i++) {\n    rgbaBuffer[j] = buffer[i];\n    if ((i + 1) % 3 === 0) {\n      rgbaBuffer[++j] = 255;\n    }\n    j++;\n  }\n  return rgbaBuffer;\n}\nconst emptyBitmap = {\n  data: null,\n  width: null,\n  height: null\n};\n\n/**\n * Jimp constructor (from a file)\n * @param path a path to the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from a url with options)\n * @param options { url, otherOptions}\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from another Jimp image or raw image data)\n * @param image a Jimp image to clone\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from a Buffer)\n * @param data a Buffer containing the image data\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param background color to fill the image with\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\nclass Jimp extends (events__WEBPACK_IMPORTED_MODULE_2___default()) {\n  // An object representing a bitmap in memory, comprising:\n  //  - data: a buffer of the bitmap data\n  //  - width: the width of the image in pixels\n  //  - height: the height of the image in pixels\n\n  // Default colour to use for new pixels\n\n  // Default MIME is PNG\n\n  // Exif data for the image\n\n  // Whether Transparency supporting formats will be exported as RGB or RGBA\n\n  constructor() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    super();\n    _defineProperty(this, \"bitmap\", emptyBitmap);\n    _defineProperty(this, \"_background\", 0x00000000);\n    _defineProperty(this, \"_originalMime\", Jimp.MIME_PNG);\n    _defineProperty(this, \"_exif\", null);\n    _defineProperty(this, \"_rgba\", true);\n    _defineProperty(this, \"writeAsync\", path => (0,_utils_promisify__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this.write, this, path));\n    _defineProperty(this, \"getBase64Async\", mime => (0,_utils_promisify__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this.getBase64, this, mime));\n    _defineProperty(this, \"getBuffer\", _utils_image_bitmap__WEBPACK_IMPORTED_MODULE_9__.getBuffer);\n    _defineProperty(this, \"getBufferAsync\", _utils_image_bitmap__WEBPACK_IMPORTED_MODULE_9__.getBufferAsync);\n    _defineProperty(this, \"getPixelColour\", this.getPixelColor);\n    _defineProperty(this, \"setPixelColour\", this.setPixelColor);\n    const jimpInstance = this;\n    let cb = noop;\n    if (isArrayBuffer(args[0])) {\n      args[0] = bufferFromArrayBuffer(args[0]);\n    }\n    function finish() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      const [err] = args;\n      const evData = err || {};\n      evData.methodName = \"constructor\";\n      setTimeout(() => {\n        // run on next tick.\n        if (err && cb === noop) {\n          jimpInstance.emitError(\"constructor\", err);\n        } else if (!err) {\n          jimpInstance.emitMulti(\"constructor\", \"initialized\");\n        }\n        cb.call(jimpInstance, ...args);\n      }, 1);\n    }\n    if (typeof args[0] === \"number\" && typeof args[1] === \"number\" || parseInt(args[0], 10) && parseInt(args[1], 10)) {\n      // create a new image\n      const w = parseInt(args[0], 10);\n      const h = parseInt(args[1], 10);\n      cb = args[2];\n\n      // with a hex color\n      if (typeof args[2] === \"number\") {\n        this._background = args[2];\n        cb = args[3];\n      }\n\n      // with a css color\n      if (typeof args[2] === \"string\") {\n        this._background = Jimp.cssColorToHex(args[2]);\n        cb = args[3];\n      }\n      if (typeof cb === \"undefined\") {\n        cb = noop;\n      }\n      if (typeof cb !== \"function\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"cb must be a function\", finish);\n      }\n      this.bitmap = {\n        data: Buffer.alloc(w * h * 4),\n        width: w,\n        height: h\n      };\n      for (let i = 0; i < this.bitmap.data.length; i += 4) {\n        this.bitmap.data.writeUInt32BE(this._background, i);\n      }\n      finish(null, this);\n    } else if (typeof args[0] === \"object\" && args[0].url) {\n      cb = args[1] || noop;\n      if (typeof cb !== \"function\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"cb must be a function\", finish);\n      }\n      loadFromURL(args[0], (err, data) => {\n        if (err) {\n          return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, err, finish);\n        }\n        this.parseBitmap(data, args[0].url, finish);\n      });\n    } else if (args[0] instanceof Jimp) {\n      // clone an existing Jimp\n      const [original] = args;\n      cb = args[1];\n      if (typeof cb === \"undefined\") {\n        cb = noop;\n      }\n      if (typeof cb !== \"function\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"cb must be a function\", finish);\n      }\n      this.bitmap = {\n        data: Buffer.from(original.bitmap.data),\n        width: original.bitmap.width,\n        height: original.bitmap.height\n      };\n      this._quality = original._quality;\n      this._deflateLevel = original._deflateLevel;\n      this._deflateStrategy = original._deflateStrategy;\n      this._filterType = original._filterType;\n      this._rgba = original._rgba;\n      this._background = original._background;\n      this._originalMime = original._originalMime;\n      finish(null, this);\n    } else if (isRawRGBAData(args[0])) {\n      const [imageData] = args;\n      cb = args[1] || noop;\n      const isRGBA = imageData.width * imageData.height * 4 === imageData.data.length;\n      const buffer = isRGBA ? Buffer.from(imageData.data) : makeRGBABufferFromRGB(imageData.data);\n      this.bitmap = {\n        data: buffer,\n        width: imageData.width,\n        height: imageData.height\n      };\n      finish(null, this);\n    } else if (typeof args[0] === \"string\") {\n      // read from a path\n      const path = args[0];\n      cb = args[1];\n      if (typeof cb === \"undefined\") {\n        cb = noop;\n      }\n      if (typeof cb !== \"function\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"cb must be a function\", finish);\n      }\n      loadBufferFromPath(path, (err, data) => {\n        if (err) {\n          return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, err, finish);\n        }\n        this.parseBitmap(data, path, finish);\n      });\n    } else if (typeof args[0] === \"object\" && Buffer.isBuffer(args[0])) {\n      // read from a buffer\n      const data = args[0];\n      cb = args[1];\n      if (typeof cb !== \"function\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"cb must be a function\", finish);\n      }\n      this.parseBitmap(data, null, finish);\n    } else {\n      // Allow client libs to add new ways to build a Jimp object.\n      // Extra constructors must be added by `Jimp.appendConstructorOption()`\n      cb = args[args.length - 1];\n      if (typeof cb !== \"function\") {\n        // TODO: try to solve the args after cb problem.\n        cb = args[args.length - 2];\n        if (typeof cb !== \"function\") {\n          cb = noop;\n        }\n      }\n      const extraConstructor = Jimp.__extraConstructors.find(c => c.test(...args));\n      if (extraConstructor) {\n        new Promise((resolve, reject) => {\n          extraConstructor.run.call(this, resolve, reject, ...args);\n        }).then(() => finish(null, this)).catch(finish);\n      } else {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"No matching constructor overloading was found. \" + \"Please see the docs for how to call the Jimp constructor.\", finish);\n      }\n    }\n  }\n\n  /**\n   * Parse a bitmap with the loaded image types.\n   *\n   * @param {Buffer} data raw image data\n   * @param {string} path optional path to file\n   * @param {function(Error, Jimp)} finish (optional) a callback for when complete\n   * @memberof Jimp\n   */\n  parseBitmap(data, path, finish) {\n    _utils_image_bitmap__WEBPACK_IMPORTED_MODULE_9__.parseBitmap.call(this, data, null, finish);\n  }\n\n  /**\n   * Sets the type of the image (RGB or RGBA) when saving in a format that supports transparency (default is RGBA)\n   * @param {boolean} bool A Boolean, true to use RGBA or false to use RGB\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  rgba(bool, cb) {\n    if (typeof bool !== \"boolean\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"bool must be a boolean, true for RGBA or false for RGB\", cb);\n    }\n    this._rgba = bool;\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_3__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n\n  /**\n   * Emit for multiple listeners\n   * @param {string} methodName name of the method to emit an error for\n   * @param {string} eventName name of the eventName to emit an error for\n   * @param {object} data to emit\n   */\n  emitMulti(methodName, eventName) {\n    let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    data = Object.assign(data, {\n      methodName,\n      eventName\n    });\n    this.emit(\"any\", data);\n    if (methodName) {\n      this.emit(methodName, data);\n    }\n    this.emit(eventName, data);\n  }\n  emitError(methodName, err) {\n    this.emitMulti(methodName, \"error\", err);\n  }\n\n  /**\n   * Get the current height of the image\n   * @return {number} height of the image\n   */\n  getHeight() {\n    return this.bitmap.height;\n  }\n\n  /**\n   * Get the current width of the image\n   * @return {number} width of the image\n   */\n  getWidth() {\n    return this.bitmap.width;\n  }\n\n  /**\n   * Nicely format Jimp object when sent to the console e.g. console.log(image)\n   * @returns {string} pretty printed\n   */\n  inspect() {\n    return \"<Jimp \" + (this.bitmap === emptyBitmap ? \"pending...\" : this.bitmap.width + \"x\" + this.bitmap.height) + \">\";\n  }\n\n  /**\n   * Nicely format Jimp object when converted to a string\n   * @returns {string} pretty printed\n   */\n  toString() {\n    return \"[object Jimp]\";\n  }\n\n  /**\n   * Returns the original MIME of the image (default: \"image/png\")\n   * @returns {string} the MIME\n   */\n  getMIME() {\n    const mime = this._originalMime || Jimp.MIME_PNG;\n    return mime;\n  }\n\n  /**\n   * Returns the appropriate file extension for the original MIME of the image (default: \"png\")\n   * @returns {string} the file extension\n   */\n  getExtension() {\n    const mime = this.getMIME();\n    return _utils_mime__WEBPACK_IMPORTED_MODULE_10__.getExtension(mime);\n  }\n\n  /**\n   * Writes the image to a file\n   * @param {string} path a path to the destination file\n   * @param {function(Error, Jimp)} cb (optional) a function to call when the image is saved to disk\n   * @returns {Jimp} this for chaining of methods\n   */\n  write(path, cb) {\n    if (!(fs__WEBPACK_IMPORTED_MODULE_0___default()) || !(fs__WEBPACK_IMPORTED_MODULE_0___default().createWriteStream)) {\n      throw new Error(\"Cant access the filesystem. You can use the getBase64 method.\");\n    }\n    if (typeof path !== \"string\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"path must be a string\", cb);\n    }\n    if (typeof cb === \"undefined\") {\n      cb = noop;\n    }\n    if (typeof cb !== \"function\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"cb must be a function\", cb);\n    }\n    const mime = _utils_mime__WEBPACK_IMPORTED_MODULE_10__.getType(path) || this.getMIME();\n    const pathObj = path__WEBPACK_IMPORTED_MODULE_1___default().parse(path);\n    if (pathObj.dir) {\n      fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(pathObj.dir, {\n        recursive: true\n      });\n    }\n    this.getBuffer(mime, (err, buffer) => {\n      if (err) {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, err, cb);\n      }\n      const stream = fs__WEBPACK_IMPORTED_MODULE_0___default().createWriteStream(path);\n      stream.on(\"open\", () => {\n        stream.write(buffer);\n        stream.end();\n      }).on(\"error\", err => {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, err, cb);\n      });\n      stream.on(\"finish\", () => {\n        cb.call(this, null, this);\n      });\n    });\n    return this;\n  }\n  /**\n   * Converts the image to a base 64 string\n   * @param {string} mime the mime type of the image data to be created\n   * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n   * @returns {Jimp} this for chaining of methods\n   */\n  getBase64(mime, cb) {\n    if (mime === Jimp.AUTO) {\n      // allow auto MIME detection\n      mime = this.getMIME();\n    }\n    if (typeof mime !== \"string\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"mime must be a string\", cb);\n    }\n    if (typeof cb !== \"function\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"cb must be a function\", cb);\n    }\n    this.getBuffer(mime, function (err, data) {\n      if (err) {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, err, cb);\n      }\n      const src = \"data:\" + mime + \";base64,\" + data.toString(\"base64\");\n      cb.call(this, null, src);\n    });\n    return this;\n  }\n  /**\n   * Generates a perceptual hash of the image <https://en.wikipedia.org/wiki/Perceptual_hashing>. And pads the string. Can configure base.\n   * @param {number} base (optional) a number between 2 and 64 representing the base for the hash (e.g. 2 is binary, 10 is decimal, 16 is hex, 64 is base 64). Defaults to 64.\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {string} a string representing the hash\n   */\n  hash(base, cb) {\n    base = base || 64;\n    if (typeof base === \"function\") {\n      cb = base;\n      base = 64;\n    }\n    if (typeof base !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"base must be a number\", cb);\n    }\n    if (base < 2 || base > 64) {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"base must be a number between 2 and 64\", cb);\n    }\n    let hash = this.pHash();\n    hash = any_base__WEBPACK_IMPORTED_MODULE_4___default()((any_base__WEBPACK_IMPORTED_MODULE_4___default().BIN), alphabet.slice(0, base))(hash);\n    while (hash.length < maxHashLength[base]) {\n      hash = \"0\" + hash; // pad out with leading zeros\n    }\n\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_3__.isNodePattern)(cb)) {\n      cb.call(this, null, hash);\n    }\n    return hash;\n  }\n\n  /**\n   * Calculates the perceptual hash\n   * @returns {number} the perceptual hash\n   */\n  pHash() {\n    const pHash = new _modules_phash__WEBPACK_IMPORTED_MODULE_11__[\"default\"]();\n    return pHash.getHash(this);\n  }\n\n  /**\n   * Calculates the hamming distance of the current image and a hash based on their perceptual hash\n   * @param {hash} compareHash hash to compare to\n   * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n   */\n  distanceFromHash(compareHash) {\n    const pHash = new _modules_phash__WEBPACK_IMPORTED_MODULE_11__[\"default\"]();\n    const currentHash = pHash.getHash(this);\n    return pHash.distance(currentHash, compareHash);\n  }\n\n  /**\n   * Converts the image to a buffer\n   * @param {string} mime the mime type of the image buffer to be created\n   * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n   * @returns {Jimp} this for chaining of methods\n   */\n\n  /**\n   * Returns the offset of a pixel in the bitmap buffer\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @param {number} edgeHandling (optional) define how to sum pixels from outside the border\n   * @param {number} cb (optional) a callback for when complete\n   * @returns {number} the index of the pixel or -1 if not found\n   */\n  getPixelIndex(x, y, edgeHandling, cb) {\n    let xi;\n    let yi;\n    if (typeof edgeHandling === \"function\" && typeof cb === \"undefined\") {\n      cb = edgeHandling;\n      edgeHandling = null;\n    }\n    if (!edgeHandling) {\n      edgeHandling = Jimp.EDGE_EXTEND;\n    }\n    if (typeof x !== \"number\" || typeof y !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"x and y must be numbers\", cb);\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    xi = x;\n    yi = y;\n    if (edgeHandling === Jimp.EDGE_EXTEND) {\n      if (x < 0) xi = 0;\n      if (x >= this.bitmap.width) xi = this.bitmap.width - 1;\n      if (y < 0) yi = 0;\n      if (y >= this.bitmap.height) yi = this.bitmap.height - 1;\n    }\n    if (edgeHandling === Jimp.EDGE_WRAP) {\n      if (x < 0) {\n        xi = this.bitmap.width + x;\n      }\n      if (x >= this.bitmap.width) {\n        xi = x % this.bitmap.width;\n      }\n      if (y < 0) {\n        yi = this.bitmap.height + y;\n      }\n      if (y >= this.bitmap.height) {\n        yi = y % this.bitmap.height;\n      }\n    }\n    let i = this.bitmap.width * yi + xi << 2;\n\n    // if out of bounds index is -1\n    if (xi < 0 || xi >= this.bitmap.width) {\n      i = -1;\n    }\n    if (yi < 0 || yi >= this.bitmap.height) {\n      i = -1;\n    }\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_3__.isNodePattern)(cb)) {\n      cb.call(this, null, i);\n    }\n    return i;\n  }\n\n  /**\n   * Returns the hex colour value of a pixel\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {number} the color of the pixel\n   */\n  getPixelColor(x, y, cb) {\n    if (typeof x !== \"number\" || typeof y !== \"number\") return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"x and y must be numbers\", cb);\n    const idx = this.getPixelIndex(x, y);\n    const hex = this.bitmap.data.readUInt32BE(idx);\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_3__.isNodePattern)(cb)) {\n      cb.call(this, null, hex);\n    }\n    return hex;\n  }\n  /**\n   * Returns the hex colour value of a pixel\n   * @param {number} hex color to set\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {number} the index of the pixel or -1 if not found\n   */\n  setPixelColor(hex, x, y, cb) {\n    if (typeof hex !== \"number\" || typeof x !== \"number\" || typeof y !== \"number\") return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"hex, x and y must be numbers\", cb);\n    const idx = this.getPixelIndex(x, y);\n    this.bitmap.data.writeUInt32BE(hex, idx);\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_3__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n  /**\n   * Determine if the image contains opaque pixels.\n   * @return {boolean} hasAlpha whether the image contains opaque pixels\n   */\n  hasAlpha() {\n    const {\n      width,\n      height,\n      data\n    } = this.bitmap;\n    const byteLen = width * height << 2;\n    for (let idx = 3; idx < byteLen; idx += 4) {\n      if (data[idx] !== 0xff) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate scan through a region of the bitmap\n   * @param {number} x the x coordinate to begin the scan at\n   * @param {number} y the y coordinate to begin the scan at\n   * @param w the width of the scan region\n   * @param h the height of the scan region\n   * @returns {IterableIterator<{x: number, y: number, idx: number, image: Jimp}>}\n   */\n  scanIterator(x, y, w, h) {\n    if (typeof x !== \"number\" || typeof y !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"x and y must be numbers\");\n    }\n    if (typeof w !== \"number\" || typeof h !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"w and h must be numbers\");\n    }\n    return (0,_jimp_utils__WEBPACK_IMPORTED_MODULE_3__.scanIterator)(this, x, y, w, h);\n  }\n}\nfunction addConstants(constants) {\n  let jimpInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Jimp;\n  Object.entries(constants).forEach(_ref => {\n    let [name, value] = _ref;\n    jimpInstance[name] = value;\n  });\n}\nfunction addJimpMethods(methods) {\n  let jimpInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Jimp;\n  Object.entries(methods).forEach(_ref2 => {\n    let [name, value] = _ref2;\n    jimpInstance.prototype[name] = value;\n  });\n}\naddConstants(_constants__WEBPACK_IMPORTED_MODULE_12__);\naddJimpMethods({\n  composite: _composite__WEBPACK_IMPORTED_MODULE_13__[\"default\"]\n});\nJimp.__extraConstructors = [];\n\n/**\n * Allow client libs to add new ways to build a Jimp object.\n * @param {string} name identify the extra constructor.\n * @param {function} test a function that returns true when it accepts the arguments passed to the main constructor.\n * @param {function} run where the magic happens.\n */\nJimp.appendConstructorOption = function (name, test, run) {\n  Jimp.__extraConstructors.push({\n    name,\n    test,\n    run\n  });\n};\n\n/**\n * Read an image from a file or a Buffer. Takes the same args as the constructor\n * @returns {Promise} a promise\n */\nJimp.read = function () {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  return new Promise((resolve, reject) => {\n    // eslint-disable-next-line no-new\n    new Jimp(...args, (err, image) => {\n      if (err) reject(err);else resolve(image);\n    });\n  });\n};\nJimp.create = Jimp.read;\n\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} r the red value (0-255)\n * @param {number} g the green value (0-255)\n * @param {number} b the blue value (0-255)\n * @param {number} a the alpha value (0-255)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {number} an single integer colour value\n */\nJimp.rgbaToInt = function (r, g, b, a, cb) {\n  if (typeof r !== \"number\" || typeof g !== \"number\" || typeof b !== \"number\" || typeof a !== \"number\") {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"r, g, b and a must be numbers\", cb);\n  }\n  if (r < 0 || r > 255) {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"r must be between 0 and 255\", cb);\n  }\n  if (g < 0 || g > 255) {\n    _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"g must be between 0 and 255\", cb);\n  }\n  if (b < 0 || b > 255) {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"b must be between 0 and 255\", cb);\n  }\n  if (a < 0 || a > 255) {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"a must be between 0 and 255\", cb);\n  }\n  let i = r & 0xff;\n  i <<= 8;\n  i |= g & 0xff;\n  i <<= 8;\n  i |= b & 0xff;\n  i <<= 8;\n  i |= a & 0xff;\n\n  // Ensure sign is correct\n  i >>>= 0;\n  if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_3__.isNodePattern)(cb)) {\n    cb.call(this, null, i);\n  }\n  return i;\n};\n\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} i a single integer value representing an RGBA colour (e.g. 0xFF0000FF for red)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {object} an object with the properties r, g, b and a representing RGBA values\n */\nJimp.intToRGBA = function (i, cb) {\n  if (typeof i !== \"number\") {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"i must be a number\", cb);\n  }\n  const rgba = {};\n  rgba.r = Math.floor(i / Math.pow(256, 3));\n  rgba.g = Math.floor((i - rgba.r * Math.pow(256, 3)) / Math.pow(256, 2));\n  rgba.b = Math.floor((i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2)) / Math.pow(256, 1));\n  rgba.a = Math.floor((i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2) - rgba.b * Math.pow(256, 1)) / Math.pow(256, 0));\n  if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_3__.isNodePattern)(cb)) {\n    cb.call(this, null, rgba);\n  }\n  return rgba;\n};\n\n/**\n * Converts a css color (Hex, 8-digit (RGBA) Hex, RGB, RGBA, HSL, HSLA, HSV, HSVA, Named) to a hex number\n * @param {string} cssColor a number\n * @returns {number} a hex number representing a color\n */\nJimp.cssColorToHex = function (cssColor) {\n  cssColor = cssColor || 0; // 0, null, undefined, NaN\n\n  if (typeof cssColor === \"number\") return Number(cssColor);\n  return parseInt((0,tinycolor2__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(cssColor).toHex8(), 16);\n};\n\n/**\n * Limits a number to between 0 or 255\n * @param {number} n a number\n * @returns {number} the number limited to between 0 or 255\n */\nJimp.limit255 = function (n) {\n  n = Math.max(n, 0);\n  n = Math.min(n, 255);\n  return n;\n};\n\n/**\n * Diffs two images and returns\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @param {number} threshold (optional) a number, 0 to 1, the smaller the value the more sensitive the comparison (default: 0.1)\n * @returns {object} an object { percent: percent similar, diff: a Jimp image highlighting differences }\n */\nJimp.diff = function (img1, img2) {\n  let threshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n  if (!(img1 instanceof Jimp) || !(img2 instanceof Jimp)) return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"img1 and img2 must be an Jimp images\");\n  const bmp1 = img1.bitmap;\n  const bmp2 = img2.bitmap;\n  if (bmp1.width !== bmp2.width || bmp1.height !== bmp2.height) {\n    if (bmp1.width * bmp1.height > bmp2.width * bmp2.height) {\n      // img1 is bigger\n      img1 = img1.cloneQuiet().resize(bmp2.width, bmp2.height);\n    } else {\n      // img2 is bigger (or they are the same in area)\n      img2 = img2.cloneQuiet().resize(bmp1.width, bmp1.height);\n    }\n  }\n  if (typeof threshold !== \"number\" || threshold < 0 || threshold > 1) {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"threshold must be a number between 0 and 1\");\n  }\n  const diff = new Jimp(bmp1.width, bmp1.height, 0xffffffff);\n  const numDiffPixels = pixelmatch__WEBPACK_IMPORTED_MODULE_5___default()(bmp1.data, bmp2.data, diff.bitmap.data, diff.bitmap.width, diff.bitmap.height, {\n    threshold\n  });\n  return {\n    percent: numDiffPixels / (diff.bitmap.width * diff.bitmap.height),\n    image: diff\n  };\n};\n\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */\nJimp.distance = function (img1, img2) {\n  const phash = new _modules_phash__WEBPACK_IMPORTED_MODULE_11__[\"default\"]();\n  const hash1 = phash.getHash(img1);\n  const hash2 = phash.getHash(img2);\n  return phash.distance(hash1, hash2);\n};\n\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {hash} hash1 a pHash\n * @param {hash} hash2 a pHash\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */\nJimp.compareHashes = function (hash1, hash2) {\n  const phash = new _modules_phash__WEBPACK_IMPORTED_MODULE_11__[\"default\"]();\n  return phash.distance(hash1, hash2);\n};\n\n/**\n * Compute color difference\n * 0 means no difference, 1 means maximum difference.\n * @param {number} rgba1:    first color to compare.\n * @param {number} rgba2:    second color to compare.\n * Both parameters must be an color object {r:val, g:val, b:val, a:val}\n * Where `a` is optional and `val` is an integer between 0 and 255.\n * @returns {number} float between 0 and 1.\n */\nJimp.colorDiff = function (rgba1, rgba2) {\n  const pow = n => Math.pow(n, 2);\n  const {\n    max\n  } = Math;\n  const maxVal = 255 * 255 * 3;\n  if (rgba1.a !== 0 && !rgba1.a) {\n    rgba1.a = 255;\n  }\n  if (rgba2.a !== 0 && !rgba2.a) {\n    rgba2.a = 255;\n  }\n  return (max(pow(rgba1.r - rgba2.r), pow(rgba1.r - rgba2.r - rgba1.a + rgba2.a)) + max(pow(rgba1.g - rgba2.g), pow(rgba1.g - rgba2.g - rgba1.a + rgba2.a)) + max(pow(rgba1.b - rgba2.b), pow(rgba1.b - rgba2.b - rgba1.a + rgba2.a))) / maxVal;\n};\n\n/**\n * Helper to create Jimp methods that emit events before and after its execution.\n * @param {string} methodName   The name to be appended to Jimp prototype.\n * @param {string} evName       The event name to be called.\n *                     It will be prefixed by `before-` and emitted when on method call.\n *                     It will be appended by `ed` and emitted after the method run.\n * @param {function} method       A function implementing the method itself.\n * It will also create a quiet version that will not emit events, to not\n * mess the user code with many `changed` event calls. You can call with\n * `methodName + \"Quiet\"`.\n *\n * The emitted event comes with a object parameter to the listener with the\n * `methodName` as one attribute.\n */\nfunction jimpEvMethod(methodName, evName, method) {\n  const evNameBefore = \"before-\" + evName;\n  const evNameAfter = evName.replace(/e$/, \"\") + \"ed\";\n  Jimp.prototype[methodName] = function () {\n    let wrappedCb;\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    const cb = args[method.length - 1];\n    const jimpInstance = this;\n    if (typeof cb === \"function\") {\n      wrappedCb = function () {\n        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n        const [err, data] = args;\n        if (err) {\n          jimpInstance.emitError(methodName, err);\n        } else {\n          jimpInstance.emitMulti(methodName, evNameAfter, {\n            [methodName]: data\n          });\n        }\n        cb.apply(this, args);\n      };\n      args[args.length - 1] = wrappedCb;\n    } else {\n      wrappedCb = false;\n    }\n    this.emitMulti(methodName, evNameBefore);\n    let result;\n    try {\n      result = method.apply(this, args);\n      if (!wrappedCb) {\n        this.emitMulti(methodName, evNameAfter, {\n          [methodName]: result\n        });\n      }\n    } catch (error) {\n      error.methodName = methodName;\n      this.emitError(methodName, error);\n    }\n    return result;\n  };\n  Jimp.prototype[methodName + \"Quiet\"] = method;\n}\n\n/**\n * Creates a new image that is a clone of this one.\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns the new image\n */\njimpEvMethod(\"clone\", \"clone\", function (cb) {\n  const clone = new Jimp(this);\n  if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_3__.isNodePattern)(cb)) {\n    cb.call(clone, null, clone);\n  }\n  return clone;\n});\n\n/**\n * Simplify jimpEvMethod call for the common `change` evName.\n * @param {string} methodName name of the method\n * @param {function} method to watch changes for\n */\nfunction jimpEvChange(methodName, method) {\n  jimpEvMethod(methodName, \"change\", method);\n}\n\n/**\n * Sets the type of the image (RGB or RGBA) when saving as PNG format (default is RGBA)\n * @param b A Boolean, true to use RGBA or false to use RGB\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange(\"background\", function (hex, cb) {\n  if (typeof hex !== \"number\") {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"hex must be a hexadecimal rgba value\", cb);\n  }\n  this._background = hex;\n  if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_3__.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n  return this;\n});\n\n/**\n * Scans through a region of the bitmap, calling a function for each pixel.\n * @param {number} x the x coordinate to begin the scan at\n * @param {number} y the y coordinate to begin the scan at\n * @param w the width of the scan region\n * @param h the height of the scan region\n * @param f a function to call on even pixel; the (x, y) position of the pixel\n * and the index of the pixel in the bitmap buffer are passed to the function\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange(\"scan\", function (x, y, w, h, f, cb) {\n  if (typeof x !== \"number\" || typeof y !== \"number\") {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"x and y must be numbers\", cb);\n  }\n  if (typeof w !== \"number\" || typeof h !== \"number\") {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"w and h must be numbers\", cb);\n  }\n  if (typeof f !== \"function\") {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_3__.throwError.call(this, \"f must be a function\", cb);\n  }\n  const result = (0,_jimp_utils__WEBPACK_IMPORTED_MODULE_3__.scan)(this, x, y, w, h, f);\n  if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_3__.isNodePattern)(cb)) {\n    cb.call(this, null, result);\n  }\n  return result;\n});\nif (process.env.ENVIRONMENT === \"BROWSER\") {\n  // For use in a web browser or web worker\n  /* global self */\n  let gl;\n  if (typeof window !== \"undefined\" && typeof window === \"object\") {\n    gl = window;\n  }\n  if (typeof self !== \"undefined\" && typeof self === \"object\") {\n    gl = self;\n  }\n  gl.Jimp = Jimp;\n  gl.Buffer = Buffer;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Jimp);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/core/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/core/es/modules/phash.js":
/*!*****************************************************!*\
  !*** ./node_modules/@jimp/core/es/modules/phash.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\nCopyright (c) 2011 Elliot Shepherd\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n// https://code.google.com/p/ironchef-team21/source/browse/ironchef_team21/src/ImagePHash.java\n\n/*\n * pHash-like image hash.\n * Author: Elliot Shepherd (elliot@jarofworms.com\n * Based On: http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html\n */\n\nfunction ImagePHash(size, smallerSize) {\n  this.size = this.size || size;\n  this.smallerSize = this.smallerSize || smallerSize;\n  initCoefficients(this.size);\n}\nImagePHash.prototype.size = 32;\nImagePHash.prototype.smallerSize = 8;\nImagePHash.prototype.distance = function (s1, s2) {\n  let counter = 0;\n  for (let k = 0; k < s1.length; k++) {\n    if (s1[k] !== s2[k]) {\n      counter++;\n    }\n  }\n  return counter / s1.length;\n};\n\n// Returns a 'binary string' (like. 001010111011100010) which is easy to do a hamming distance on.\nImagePHash.prototype.getHash = function (img) {\n  /* 1. Reduce size.\n   * Like Average Hash, pHash starts with a small image.\n   * However, the image is larger than 8x8; 32x32 is a good size.\n   * This is really done to simplify the DCT computation and not\n   * because it is needed to reduce the high frequencies.\n   */\n  img = img.clone().resize(this.size, this.size);\n\n  /* 2. Reduce color.\n   * The image is reduced to a grayscale just to further simplify\n   * the number of computations.\n   */\n  img.grayscale();\n  const vals = [];\n  for (let x = 0; x < img.bitmap.width; x++) {\n    vals[x] = [];\n    for (let y = 0; y < img.bitmap.height; y++) {\n      vals[x][y] = intToRGBA(img.getPixelColor(x, y)).b;\n    }\n  }\n\n  /* 3. Compute the DCT.\n   * The DCT separates the image into a collection of frequencies\n   * and scalars. While JPEG uses an 8x8 DCT, this algorithm uses\n   * a 32x32 DCT.\n   */\n  const dctVals = applyDCT(vals, this.size);\n\n  /* 4. Reduce the DCT.\n   * This is the magic step. While the DCT is 32x32, just keep the\n   * top-left 8x8. Those represent the lowest frequencies in the\n   * picture.\n   */\n  /* 5. Compute the average value.\n   * Like the Average Hash, compute the mean DCT value (using only\n   * the 8x8 DCT low-frequency values and excluding the first term\n   * since the DC coefficient can be significantly different from\n   * the other values and will throw off the average).\n   */\n  let total = 0;\n  for (let x = 0; x < this.smallerSize; x++) {\n    for (let y = 0; y < this.smallerSize; y++) {\n      total += dctVals[x][y];\n    }\n  }\n  const avg = total / (this.smallerSize * this.smallerSize);\n\n  /* 6. Further reduce the DCT.\n   * This is the magic step. Set the 64 hash bits to 0 or 1\n   * depending on whether each of the 64 DCT values is above or\n   * below the average value. The result doesn't tell us the\n   * actual low frequencies; it just tells us the very-rough\n   * relative scale of the frequencies to the mean. The result\n   * will not vary as long as the overall structure of the image\n   * remains the same; this can survive gamma and color histogram\n   * adjustments without a problem.\n   */\n  let hash = \"\";\n  for (let x = 0; x < this.smallerSize; x++) {\n    for (let y = 0; y < this.smallerSize; y++) {\n      hash += dctVals[x][y] > avg ? \"1\" : \"0\";\n    }\n  }\n  return hash;\n};\n\n// DCT function stolen from http://stackoverflow.com/questions/4240490/problems-with-dct-and-idct-algorithm-in-java\n\n/**\n Convert a 32-bit integer color value to an RGBA object.\n */\nfunction intToRGBA(i) {\n  const a = i & 0xff;\n  i >>>= 8;\n  const b = i & 0xff;\n  i >>>= 8;\n  const g = i & 0xff;\n  i >>>= 8;\n  const r = i & 0xff;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nconst c = [];\nfunction initCoefficients(size) {\n  for (let i = 1; i < size; i++) {\n    c[i] = 1;\n  }\n  c[0] = 1 / Math.sqrt(2.0);\n}\nfunction applyDCT(f, size) {\n  const N = size;\n  const F = [];\n  for (let u = 0; u < N; u++) {\n    F[u] = [];\n    for (let v = 0; v < N; v++) {\n      let sum = 0;\n      for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n          sum += Math.cos((2 * i + 1) / (2.0 * N) * u * Math.PI) * Math.cos((2 * j + 1) / (2.0 * N) * v * Math.PI) * f[i][j];\n        }\n      }\n      sum *= c[u] * c[v] / 4;\n      F[u][v] = sum;\n    }\n  }\n  return F;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ImagePHash);\n//# sourceMappingURL=phash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/core/es/modules/phash.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/core/es/request.js":
/*!***********************************************!*\
  !*** ./node_modules/@jimp/core/es/request.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! isomorphic-fetch */ \"(action-browser)/./node_modules/isomorphic-fetch/fetch-npm-node.js\");\n/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((_ref, cb) => {\n  let {\n    url,\n    ...options\n  } = _ref;\n  fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.arrayBuffer().catch(error => {\n        throw new Error(`Response is not a buffer for url ${url}. Error: ${error.message}`);\n      });\n    }\n    throw new Error(`HTTP Status ${response.status} for url ${url}`);\n  }).then(data => cb(null, data)).catch(error => cb(error));\n});\n//# sourceMappingURL=request.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9jb3JlL2VzL3JlcXVlc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTBCO0FBQzFCLGlFQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsNERBQTRELElBQUksV0FBVyxjQUFjO0FBQ3pGLE9BQU87QUFDUDtBQUNBLG1DQUFtQyxpQkFBaUIsVUFBVSxJQUFJO0FBQ2xFLEdBQUc7QUFDSCxDQUFDLEVBQUU7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRuLy4vbm9kZV9tb2R1bGVzL0BqaW1wL2NvcmUvZXMvcmVxdWVzdC5qcz82NDA2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcImlzb21vcnBoaWMtZmV0Y2hcIjtcbmV4cG9ydCBkZWZhdWx0ICgoX3JlZiwgY2IpID0+IHtcbiAgbGV0IHtcbiAgICB1cmwsXG4gICAgLi4ub3B0aW9uc1xuICB9ID0gX3JlZjtcbiAgZmV0Y2godXJsLCBvcHRpb25zKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5hcnJheUJ1ZmZlcigpLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZXNwb25zZSBpcyBub3QgYSBidWZmZXIgZm9yIHVybCAke3VybH0uIEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIFN0YXR1cyAke3Jlc3BvbnNlLnN0YXR1c30gZm9yIHVybCAke3VybH1gKTtcbiAgfSkudGhlbihkYXRhID0+IGNiKG51bGwsIGRhdGEpKS5jYXRjaChlcnJvciA9PiBjYihlcnJvcikpO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/core/es/request.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/core/es/utils/image-bitmap.js":
/*!**********************************************************!*\
  !*** ./node_modules/@jimp/core/es/utils/image-bitmap.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBuffer: () => (/* binding */ getBuffer),\n/* harmony export */   getBufferAsync: () => (/* binding */ getBufferAsync),\n/* harmony export */   parseBitmap: () => (/* binding */ parseBitmap)\n/* harmony export */ });\n/* harmony import */ var file_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! file-type */ \"(action-browser)/./node_modules/file-type/index.js\");\n/* harmony import */ var file_type__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(file_type__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var exif_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! exif-parser */ \"(action-browser)/./node_modules/exif-parser/index.js\");\n/* harmony import */ var exif_parser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(exif_parser__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ \"(action-browser)/./node_modules/@jimp/core/es/constants.js\");\n/* harmony import */ var _mime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mime */ \"(action-browser)/./node_modules/@jimp/core/es/utils/mime.js\");\n/* harmony import */ var _promisify__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./promisify */ \"(action-browser)/./node_modules/@jimp/core/es/utils/promisify.js\");\n\n\n\n\n\n\nasync function getMIMEFromBuffer(buffer, path) {\n  const fileTypeFromBuffer = await file_type__WEBPACK_IMPORTED_MODULE_0___default().fromBuffer(buffer);\n  if (fileTypeFromBuffer) {\n    // If fileType returns something for buffer, then return the mime given\n    return fileTypeFromBuffer.mime;\n  }\n  if (path) {\n    // If a path is supplied, and fileType yields no results, then retry with MIME\n    // Path can be either a file path or a url\n    return _mime__WEBPACK_IMPORTED_MODULE_3__.getType(path);\n  }\n  return null;\n}\n\n/*\n * Obtains image orientation from EXIF metadata.\n *\n * @param img {Jimp} a Jimp image object\n * @returns {number} a number 1-8 representing EXIF orientation,\n *          in particular 1 if orientation tag is missing\n */\nfunction getExifOrientation(img) {\n  return img._exif && img._exif.tags && img._exif.tags.Orientation || 1;\n}\n\n/**\n * Returns a function which translates EXIF-rotated coordinates into\n * non-rotated ones.\n *\n * Transformation reference: http://sylvana.net/jpegcrop/exif_orientation.html.\n *\n * @param img {Jimp} a Jimp image object\n * @returns {function} transformation function for transformBitmap().\n */\nfunction getExifOrientationTransformation(img) {\n  const w = img.getWidth();\n  const h = img.getHeight();\n  switch (getExifOrientation(img)) {\n    case 1:\n      // Horizontal (normal)\n      // does not need to be supported here\n      return null;\n    case 2:\n      // Mirror horizontal\n      return function (x, y) {\n        return [w - x - 1, y];\n      };\n    case 3:\n      // Rotate 180\n      return function (x, y) {\n        return [w - x - 1, h - y - 1];\n      };\n    case 4:\n      // Mirror vertical\n      return function (x, y) {\n        return [x, h - y - 1];\n      };\n    case 5:\n      // Mirror horizontal and rotate 270 CW\n      return function (x, y) {\n        return [y, x];\n      };\n    case 6:\n      // Rotate 90 CW\n      return function (x, y) {\n        return [y, h - x - 1];\n      };\n    case 7:\n      // Mirror horizontal and rotate 90 CW\n      return function (x, y) {\n        return [w - y - 1, h - x - 1];\n      };\n    case 8:\n      // Rotate 270 CW\n      return function (x, y) {\n        return [w - y - 1, x];\n      };\n    default:\n      return null;\n  }\n}\n\n/*\n * Transforms bitmap in place (moves pixels around) according to given\n * transformation function.\n *\n * @param img {Jimp} a Jimp image object, which bitmap is supposed to\n *        be transformed\n * @param width {number} bitmap width after the transformation\n * @param height {number} bitmap height after the transformation\n * @param transformation {function} transformation function which defines pixel\n *        mapping between new and source bitmap. It takes a pair of coordinates\n *        in the target, and returns a respective pair of coordinates in\n *        the source bitmap, i.e. has following form:\n *        `function(new_x, new_y) { return [src_x, src_y] }`.\n */\nfunction transformBitmap(img, width, height, transformation) {\n  // Underscore-prefixed values are related to the source bitmap\n  // Their counterparts with no prefix are related to the target bitmap\n  const _data = img.bitmap.data;\n  const _width = img.bitmap.width;\n  const data = Buffer.alloc(_data.length);\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const [_x, _y] = transformation(x, y);\n      const idx = width * y + x << 2;\n      const _idx = _width * _y + _x << 2;\n      const pixel = _data.readUInt32BE(_idx);\n      data.writeUInt32BE(pixel, idx);\n    }\n  }\n  img.bitmap.data = data;\n  img.bitmap.width = width;\n  img.bitmap.height = height;\n}\n\n/*\n * Automagically rotates an image based on its EXIF data (if present).\n * @param img {Jimp} a Jimp image object\n */\nfunction exifRotate(img) {\n  if (getExifOrientation(img) < 2) return;\n  const transformation = getExifOrientationTransformation(img);\n  const swapDimensions = getExifOrientation(img) > 4;\n  const newWidth = swapDimensions ? img.bitmap.height : img.bitmap.width;\n  const newHeight = swapDimensions ? img.bitmap.width : img.bitmap.height;\n  transformBitmap(img, newWidth, newHeight, transformation);\n}\n\n// parses a bitmap from the constructor to the JIMP bitmap property\nasync function parseBitmap(data, path, cb) {\n  const mime = await getMIMEFromBuffer(data, path);\n  if (typeof mime !== \"string\") {\n    return cb(new Error(\"Could not find MIME for Buffer <\" + path + \">\"));\n  }\n  this._originalMime = mime.toLowerCase();\n  try {\n    const mime = this.getMIME();\n    if (this.constructor.decoders[mime]) {\n      this.bitmap = this.constructor.decoders[mime](data);\n    } else {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_2__.throwError.call(this, \"Unsupported MIME type: \" + mime, cb);\n    }\n  } catch (error) {\n    return cb.call(this, error, this);\n  }\n  try {\n    this._exif = exif_parser__WEBPACK_IMPORTED_MODULE_1___default().create(data).parse();\n    exifRotate(this); // EXIF data\n  } catch (error) {\n    /* meh */\n  }\n  cb.call(this, null, this);\n  return this;\n}\nfunction compositeBitmapOverBackground(Jimp, image) {\n  return new Jimp(image.bitmap.width, image.bitmap.height, image._background).composite(image, 0, 0).bitmap;\n}\n\n/**\n * Converts the image to a buffer\n * @param {(string|number)} mime the mime type of the image buffer to be created\n * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n * @returns {Jimp} this for chaining of methods\n */\nfunction getBuffer(mime, cb) {\n  if (mime === _constants__WEBPACK_IMPORTED_MODULE_4__.AUTO) {\n    // allow auto MIME detection\n    mime = this.getMIME();\n  }\n  if (typeof mime !== \"string\") {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_2__.throwError.call(this, \"mime must be a string\", cb);\n  }\n  if (typeof cb !== \"function\") {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_2__.throwError.call(this, \"cb must be a function\", cb);\n  }\n  mime = mime.toLowerCase();\n  if (this._rgba && this.constructor.hasAlpha[mime]) {\n    this.bitmap.data = Buffer.from(this.bitmap.data);\n  } else {\n    // when format doesn't support alpha\n    // composite onto a new image so that the background shows through alpha channels\n    this.bitmap.data = compositeBitmapOverBackground(this.constructor, this).data;\n  }\n  if (this.constructor.encoders[mime]) {\n    const buffer = this.constructor.encoders[mime](this);\n    // Typically, buffers return a string or map.  However, the gif library \"gifwrap\" seemingly returns promises.\n    if (buffer instanceof Promise) {\n      // trigger the callback when the promise has been resolved\n      buffer.then(buff => {\n        cb.call(this, null, buff);\n      });\n    } else {\n      cb.call(this, null, buffer);\n    }\n  } else {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_2__.throwError.call(this, \"Unsupported MIME type: \" + mime, cb);\n  }\n  return this;\n}\nfunction getBufferAsync(mime) {\n  return (0,_promisify__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(getBuffer, this, mime);\n}\n//# sourceMappingURL=image-bitmap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/core/es/utils/image-bitmap.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/core/es/utils/mime.js":
/*!**************************************************!*\
  !*** ./node_modules/@jimp/core/es/utils/mime.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addType: () => (/* binding */ addType),\n/* harmony export */   getExtension: () => (/* binding */ getExtension),\n/* harmony export */   getType: () => (/* binding */ getType)\n/* harmony export */ });\nconst mimeTypes = {};\nconst findType = extension => Object.entries(mimeTypes).find(type => type[1].includes(extension)) || [];\nconst addType = (mime, extensions) => {\n  mimeTypes[mime] = extensions;\n};\n\n/**\n * Lookup a mime type based on extension\n * @param {string} path path to find extension for\n * @returns {string} mime found mime type\n */\nconst getType = path => {\n  const pathParts = path.split(\"/\").slice(-1);\n  const extension = pathParts[pathParts.length - 1].split(\".\").pop();\n  const type = findType(extension);\n  return type[0];\n};\n\n/**\n * Return file extension associated with a mime type\n * @param {string} type mime type to look up\n * @returns {string} extension file extension\n */\nconst getExtension = type => (mimeTypes[type.toLowerCase()] || [])[0];\n//# sourceMappingURL=mime.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9jb3JlL2VzL3V0aWxzL21pbWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsUUFBUTtBQUNyQjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsUUFBUTtBQUNyQjtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9jb3JlL2VzL3V0aWxzL21pbWUuanM/MzgzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtaW1lVHlwZXMgPSB7fTtcbmNvbnN0IGZpbmRUeXBlID0gZXh0ZW5zaW9uID0+IE9iamVjdC5lbnRyaWVzKG1pbWVUeXBlcykuZmluZCh0eXBlID0+IHR5cGVbMV0uaW5jbHVkZXMoZXh0ZW5zaW9uKSkgfHwgW107XG5leHBvcnQgY29uc3QgYWRkVHlwZSA9IChtaW1lLCBleHRlbnNpb25zKSA9PiB7XG4gIG1pbWVUeXBlc1ttaW1lXSA9IGV4dGVuc2lvbnM7XG59O1xuXG4vKipcbiAqIExvb2t1cCBhIG1pbWUgdHlwZSBiYXNlZCBvbiBleHRlbnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIHBhdGggdG8gZmluZCBleHRlbnNpb24gZm9yXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBtaW1lIGZvdW5kIG1pbWUgdHlwZVxuICovXG5leHBvcnQgY29uc3QgZ2V0VHlwZSA9IHBhdGggPT4ge1xuICBjb25zdCBwYXRoUGFydHMgPSBwYXRoLnNwbGl0KFwiL1wiKS5zbGljZSgtMSk7XG4gIGNvbnN0IGV4dGVuc2lvbiA9IHBhdGhQYXJ0c1twYXRoUGFydHMubGVuZ3RoIC0gMV0uc3BsaXQoXCIuXCIpLnBvcCgpO1xuICBjb25zdCB0eXBlID0gZmluZFR5cGUoZXh0ZW5zaW9uKTtcbiAgcmV0dXJuIHR5cGVbMF07XG59O1xuXG4vKipcbiAqIFJldHVybiBmaWxlIGV4dGVuc2lvbiBhc3NvY2lhdGVkIHdpdGggYSBtaW1lIHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIG1pbWUgdHlwZSB0byBsb29rIHVwXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBleHRlbnNpb24gZmlsZSBleHRlbnNpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEV4dGVuc2lvbiA9IHR5cGUgPT4gKG1pbWVUeXBlc1t0eXBlLnRvTG93ZXJDYXNlKCldIHx8IFtdKVswXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pbWUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/core/es/utils/mime.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/core/es/utils/promisify.js":
/*!*******************************************************!*\
  !*** ./node_modules/@jimp/core/es/utils/promisify.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst promisify = function (fun, ctx) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  return new Promise((resolve, reject) => {\n    args.push((err, data) => {\n      if (err) {\n        reject(err);\n      }\n      resolve(data);\n    });\n    fun.bind(ctx)(...args);\n  });\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (promisify);\n//# sourceMappingURL=promisify.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9jb3JlL2VzL3V0aWxzL3Byb21pc2lmeS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSx5RkFBeUYsYUFBYTtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0EsaUVBQWUsU0FBUyxFQUFDO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dG4vLi9ub2RlX21vZHVsZXMvQGppbXAvY29yZS9lcy91dGlscy9wcm9taXNpZnkuanM/ZDg3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwcm9taXNpZnkgPSBmdW5jdGlvbiAoZnVuLCBjdHgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgYXJncy5wdXNoKChlcnIsIGRhdGEpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKGRhdGEpO1xuICAgIH0pO1xuICAgIGZ1bi5iaW5kKGN0eCkoLi4uYXJncyk7XG4gIH0pO1xufTtcbmV4cG9ydCBkZWZhdWx0IHByb21pc2lmeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21pc2lmeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/core/es/utils/promisify.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/custom/es/index.js":
/*!***********************************************!*\
  !*** ./node_modules/@jimp/custom/es/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ configure)\n/* harmony export */ });\n/* harmony import */ var _jimp_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/core */ \"(action-browser)/./node_modules/@jimp/core/es/index.js\");\n\nfunction configure(configuration) {\n  let jimpInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _jimp_core__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n  const jimpConfig = {\n    hasAlpha: {},\n    encoders: {},\n    decoders: {},\n    class: {},\n    constants: {}\n  };\n  function addToConfig(newConfig) {\n    Object.entries(newConfig).forEach(_ref => {\n      let [key, value] = _ref;\n      jimpConfig[key] = {\n        ...jimpConfig[key],\n        ...value\n      };\n    });\n  }\n  function addImageType(typeModule) {\n    const type = typeModule();\n    if (Array.isArray(type.mime)) {\n      (0,_jimp_core__WEBPACK_IMPORTED_MODULE_0__.addType)(...type.mime);\n    } else {\n      Object.entries(type.mime).forEach(mimeType => (0,_jimp_core__WEBPACK_IMPORTED_MODULE_0__.addType)(...mimeType));\n    }\n    delete type.mime;\n    addToConfig(type);\n  }\n  function addPlugin(pluginModule) {\n    const plugin = pluginModule(_jimp_core__WEBPACK_IMPORTED_MODULE_0__.jimpEvChange) || {};\n    if (!plugin.class && !plugin.constants) {\n      // Default to class function\n      addToConfig({\n        class: plugin\n      });\n    } else {\n      addToConfig(plugin);\n    }\n  }\n  if (configuration.types) {\n    configuration.types.forEach(addImageType);\n    jimpInstance.decoders = {\n      ...jimpInstance.decoders,\n      ...jimpConfig.decoders\n    };\n    jimpInstance.encoders = {\n      ...jimpInstance.encoders,\n      ...jimpConfig.encoders\n    };\n    jimpInstance.hasAlpha = {\n      ...jimpInstance.hasAlpha,\n      ...jimpConfig.hasAlpha\n    };\n  }\n  if (configuration.plugins) {\n    configuration.plugins.forEach(addPlugin);\n  }\n  (0,_jimp_core__WEBPACK_IMPORTED_MODULE_0__.addJimpMethods)(jimpConfig.class, jimpInstance);\n  (0,_jimp_core__WEBPACK_IMPORTED_MODULE_0__.addConstants)(jimpConfig.constants, jimpInstance);\n  return _jimp_core__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9jdXN0b20vZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUY7QUFDeEU7QUFDZix5RkFBeUYsa0RBQUk7QUFDN0Y7QUFDQSxnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCLGdCQUFnQjtBQUNoQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxtREFBTztBQUNiLE1BQU07QUFDTixvREFBb0QsbURBQU87QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxvREFBWTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSwwREFBYztBQUNoQixFQUFFLHdEQUFZO0FBQ2QsU0FBUyxrREFBSTtBQUNiO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9jdXN0b20vZXMvaW5kZXguanM/NjI5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSmltcCwgeyBhZGRUeXBlLCBhZGRKaW1wTWV0aG9kcywgYWRkQ29uc3RhbnRzLCBqaW1wRXZDaGFuZ2UgfSBmcm9tIFwiQGppbXAvY29yZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29uZmlndXJlKGNvbmZpZ3VyYXRpb24pIHtcbiAgbGV0IGppbXBJbnN0YW5jZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogSmltcDtcbiAgY29uc3QgamltcENvbmZpZyA9IHtcbiAgICBoYXNBbHBoYToge30sXG4gICAgZW5jb2RlcnM6IHt9LFxuICAgIGRlY29kZXJzOiB7fSxcbiAgICBjbGFzczoge30sXG4gICAgY29uc3RhbnRzOiB7fVxuICB9O1xuICBmdW5jdGlvbiBhZGRUb0NvbmZpZyhuZXdDb25maWcpIHtcbiAgICBPYmplY3QuZW50cmllcyhuZXdDb25maWcpLmZvckVhY2goX3JlZiA9PiB7XG4gICAgICBsZXQgW2tleSwgdmFsdWVdID0gX3JlZjtcbiAgICAgIGppbXBDb25maWdba2V5XSA9IHtcbiAgICAgICAgLi4uamltcENvbmZpZ1trZXldLFxuICAgICAgICAuLi52YWx1ZVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhZGRJbWFnZVR5cGUodHlwZU1vZHVsZSkge1xuICAgIGNvbnN0IHR5cGUgPSB0eXBlTW9kdWxlKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodHlwZS5taW1lKSkge1xuICAgICAgYWRkVHlwZSguLi50eXBlLm1pbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuZW50cmllcyh0eXBlLm1pbWUpLmZvckVhY2gobWltZVR5cGUgPT4gYWRkVHlwZSguLi5taW1lVHlwZSkpO1xuICAgIH1cbiAgICBkZWxldGUgdHlwZS5taW1lO1xuICAgIGFkZFRvQ29uZmlnKHR5cGUpO1xuICB9XG4gIGZ1bmN0aW9uIGFkZFBsdWdpbihwbHVnaW5Nb2R1bGUpIHtcbiAgICBjb25zdCBwbHVnaW4gPSBwbHVnaW5Nb2R1bGUoamltcEV2Q2hhbmdlKSB8fCB7fTtcbiAgICBpZiAoIXBsdWdpbi5jbGFzcyAmJiAhcGx1Z2luLmNvbnN0YW50cykge1xuICAgICAgLy8gRGVmYXVsdCB0byBjbGFzcyBmdW5jdGlvblxuICAgICAgYWRkVG9Db25maWcoe1xuICAgICAgICBjbGFzczogcGx1Z2luXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkVG9Db25maWcocGx1Z2luKTtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbmZpZ3VyYXRpb24udHlwZXMpIHtcbiAgICBjb25maWd1cmF0aW9uLnR5cGVzLmZvckVhY2goYWRkSW1hZ2VUeXBlKTtcbiAgICBqaW1wSW5zdGFuY2UuZGVjb2RlcnMgPSB7XG4gICAgICAuLi5qaW1wSW5zdGFuY2UuZGVjb2RlcnMsXG4gICAgICAuLi5qaW1wQ29uZmlnLmRlY29kZXJzXG4gICAgfTtcbiAgICBqaW1wSW5zdGFuY2UuZW5jb2RlcnMgPSB7XG4gICAgICAuLi5qaW1wSW5zdGFuY2UuZW5jb2RlcnMsXG4gICAgICAuLi5qaW1wQ29uZmlnLmVuY29kZXJzXG4gICAgfTtcbiAgICBqaW1wSW5zdGFuY2UuaGFzQWxwaGEgPSB7XG4gICAgICAuLi5qaW1wSW5zdGFuY2UuaGFzQWxwaGEsXG4gICAgICAuLi5qaW1wQ29uZmlnLmhhc0FscGhhXG4gICAgfTtcbiAgfVxuICBpZiAoY29uZmlndXJhdGlvbi5wbHVnaW5zKSB7XG4gICAgY29uZmlndXJhdGlvbi5wbHVnaW5zLmZvckVhY2goYWRkUGx1Z2luKTtcbiAgfVxuICBhZGRKaW1wTWV0aG9kcyhqaW1wQ29uZmlnLmNsYXNzLCBqaW1wSW5zdGFuY2UpO1xuICBhZGRDb25zdGFudHMoamltcENvbmZpZy5jb25zdGFudHMsIGppbXBJbnN0YW5jZSk7XG4gIHJldHVybiBKaW1wO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/custom/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/gif/es/index.js":
/*!********************************************!*\
  !*** ./node_modules/@jimp/gif/es/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var omggif__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! omggif */ \"(action-browser)/./node_modules/omggif/omggif.js\");\n/* harmony import */ var gifwrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gifwrap */ \"(action-browser)/./node_modules/gifwrap/src/index.js\");\n/* harmony import */ var gifwrap__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(gifwrap__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst MIME_TYPE = \"image/gif\";\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  mime: {\n    [MIME_TYPE]: [\"gif\"]\n  },\n  constants: {\n    MIME_GIF: MIME_TYPE\n  },\n  decoders: {\n    [MIME_TYPE]: data => {\n      const gifObj = new omggif__WEBPACK_IMPORTED_MODULE_0__.GifReader(data);\n      const gifData = Buffer.alloc(gifObj.width * gifObj.height * 4);\n      gifObj.decodeAndBlitFrameRGBA(0, gifData);\n      return {\n        data: gifData,\n        width: gifObj.width,\n        height: gifObj.height\n      };\n    }\n  },\n  encoders: {\n    [MIME_TYPE]: data => {\n      const bitmap = new gifwrap__WEBPACK_IMPORTED_MODULE_1__.BitmapImage(data.bitmap);\n      gifwrap__WEBPACK_IMPORTED_MODULE_1__.GifUtil.quantizeDekker(bitmap, 256);\n      const newFrame = new gifwrap__WEBPACK_IMPORTED_MODULE_1__.GifFrame(bitmap);\n      const gifCodec = new gifwrap__WEBPACK_IMPORTED_MODULE_1__.GifCodec();\n      return gifCodec.encodeGif([newFrame], {}).then(newGif => {\n        return newGif.buffer;\n      });\n    }\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9naWYvZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF5QjtBQUMwQztBQUNuRTtBQUNBLGlFQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHlCQUF5Qiw2Q0FBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSx5QkFBeUIsZ0RBQVc7QUFDcEMsTUFBTSw0Q0FBTztBQUNiLDJCQUEyQiw2Q0FBUTtBQUNuQywyQkFBMkIsNkNBQVE7QUFDbkMsOENBQThDO0FBQzlDO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxDQUFDLENBQUMsRUFBRTtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dG4vLi9ub2RlX21vZHVsZXMvQGppbXAvZ2lmL2VzL2luZGV4LmpzPzk0YzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdJRiBmcm9tIFwib21nZ2lmXCI7XG5pbXBvcnQgeyBHaWZVdGlsLCBHaWZGcmFtZSwgQml0bWFwSW1hZ2UsIEdpZkNvZGVjIH0gZnJvbSBcImdpZndyYXBcIjtcbmNvbnN0IE1JTUVfVFlQRSA9IFwiaW1hZ2UvZ2lmXCI7XG5leHBvcnQgZGVmYXVsdCAoKCkgPT4gKHtcbiAgbWltZToge1xuICAgIFtNSU1FX1RZUEVdOiBbXCJnaWZcIl1cbiAgfSxcbiAgY29uc3RhbnRzOiB7XG4gICAgTUlNRV9HSUY6IE1JTUVfVFlQRVxuICB9LFxuICBkZWNvZGVyczoge1xuICAgIFtNSU1FX1RZUEVdOiBkYXRhID0+IHtcbiAgICAgIGNvbnN0IGdpZk9iaiA9IG5ldyBHSUYuR2lmUmVhZGVyKGRhdGEpO1xuICAgICAgY29uc3QgZ2lmRGF0YSA9IEJ1ZmZlci5hbGxvYyhnaWZPYmoud2lkdGggKiBnaWZPYmouaGVpZ2h0ICogNCk7XG4gICAgICBnaWZPYmouZGVjb2RlQW5kQmxpdEZyYW1lUkdCQSgwLCBnaWZEYXRhKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGdpZkRhdGEsXG4gICAgICAgIHdpZHRoOiBnaWZPYmoud2lkdGgsXG4gICAgICAgIGhlaWdodDogZ2lmT2JqLmhlaWdodFxuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIGVuY29kZXJzOiB7XG4gICAgW01JTUVfVFlQRV06IGRhdGEgPT4ge1xuICAgICAgY29uc3QgYml0bWFwID0gbmV3IEJpdG1hcEltYWdlKGRhdGEuYml0bWFwKTtcbiAgICAgIEdpZlV0aWwucXVhbnRpemVEZWtrZXIoYml0bWFwLCAyNTYpO1xuICAgICAgY29uc3QgbmV3RnJhbWUgPSBuZXcgR2lmRnJhbWUoYml0bWFwKTtcbiAgICAgIGNvbnN0IGdpZkNvZGVjID0gbmV3IEdpZkNvZGVjKCk7XG4gICAgICByZXR1cm4gZ2lmQ29kZWMuZW5jb2RlR2lmKFtuZXdGcmFtZV0sIHt9KS50aGVuKG5ld0dpZiA9PiB7XG4gICAgICAgIHJldHVybiBuZXdHaWYuYnVmZmVyO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/gif/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/jpeg/es/index.js":
/*!*********************************************!*\
  !*** ./node_modules/@jimp/jpeg/es/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var jpeg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jpeg-js */ \"(action-browser)/./node_modules/jpeg-js/index.js\");\n/* harmony import */ var jpeg_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jpeg_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\nconst MIME_TYPE = \"image/jpeg\";\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  mime: {\n    [MIME_TYPE]: [\"jpeg\", \"jpg\", \"jpe\"]\n  },\n  constants: {\n    MIME_JPEG: MIME_TYPE\n  },\n  decoders: {\n    [MIME_TYPE]: (jpeg_js__WEBPACK_IMPORTED_MODULE_0___default().decode)\n  },\n  encoders: {\n    [MIME_TYPE]: image => jpeg_js__WEBPACK_IMPORTED_MODULE_0___default().encode(image.bitmap, image._quality).data\n  },\n  class: {\n    // The quality to be used when saving JPEG images\n    _quality: 100,\n    /**\n     * Sets the quality of the image when saving as JPEG format (default is 100)\n     * @param {number} n The quality to use 0-100\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    quality(n, cb) {\n      if (typeof n !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"n must be a number\", cb);\n      }\n      if (n < 0 || n > 100) {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"n must be a number 0 - 100\", cb);\n      }\n      this._quality = Math.round(n);\n      if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    }\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9qcGVnL2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMkI7QUFDNkI7QUFDeEQ7QUFDQSxpRUFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsaUJBQWlCLHVEQUFXO0FBQzVCLEdBQUc7QUFDSDtBQUNBLDBCQUEwQixxREFBVztBQUNyQyxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLHVCQUF1QjtBQUN0QyxpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1EQUFVO0FBQ3pCO0FBQ0E7QUFDQSxlQUFlLG1EQUFVO0FBQ3pCO0FBQ0E7QUFDQSxVQUFVLDBEQUFhO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLENBQUMsRUFBRTtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dG4vLi9ub2RlX21vZHVsZXMvQGppbXAvanBlZy9lcy9pbmRleC5qcz85ZDgwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKUEVHIGZyb20gXCJqcGVnLWpzXCI7XG5pbXBvcnQgeyB0aHJvd0Vycm9yLCBpc05vZGVQYXR0ZXJuIH0gZnJvbSBcIkBqaW1wL3V0aWxzXCI7XG5jb25zdCBNSU1FX1RZUEUgPSBcImltYWdlL2pwZWdcIjtcbmV4cG9ydCBkZWZhdWx0ICgoKSA9PiAoe1xuICBtaW1lOiB7XG4gICAgW01JTUVfVFlQRV06IFtcImpwZWdcIiwgXCJqcGdcIiwgXCJqcGVcIl1cbiAgfSxcbiAgY29uc3RhbnRzOiB7XG4gICAgTUlNRV9KUEVHOiBNSU1FX1RZUEVcbiAgfSxcbiAgZGVjb2RlcnM6IHtcbiAgICBbTUlNRV9UWVBFXTogSlBFRy5kZWNvZGVcbiAgfSxcbiAgZW5jb2RlcnM6IHtcbiAgICBbTUlNRV9UWVBFXTogaW1hZ2UgPT4gSlBFRy5lbmNvZGUoaW1hZ2UuYml0bWFwLCBpbWFnZS5fcXVhbGl0eSkuZGF0YVxuICB9LFxuICBjbGFzczoge1xuICAgIC8vIFRoZSBxdWFsaXR5IHRvIGJlIHVzZWQgd2hlbiBzYXZpbmcgSlBFRyBpbWFnZXNcbiAgICBfcXVhbGl0eTogMTAwLFxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHF1YWxpdHkgb2YgdGhlIGltYWdlIHdoZW4gc2F2aW5nIGFzIEpQRUcgZm9ybWF0IChkZWZhdWx0IGlzIDEwMClcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgcXVhbGl0eSB0byB1c2UgMC0xMDBcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gY2IgKG9wdGlvbmFsKSBhIGNhbGxiYWNrIGZvciB3aGVuIGNvbXBsZXRlXG4gICAgICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAgICAgKi9cbiAgICBxdWFsaXR5KG4sIGNiKSB7XG4gICAgICBpZiAodHlwZW9mIG4gIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IuY2FsbCh0aGlzLCBcIm4gbXVzdCBiZSBhIG51bWJlclwiLCBjYik7XG4gICAgICB9XG4gICAgICBpZiAobiA8IDAgfHwgbiA+IDEwMCkge1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwibiBtdXN0IGJlIGEgbnVtYmVyIDAgLSAxMDBcIiwgY2IpO1xuICAgICAgfVxuICAgICAgdGhpcy5fcXVhbGl0eSA9IE1hdGgucm91bmQobik7XG4gICAgICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxufSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/jpeg/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-blit/es/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@jimp/plugin-blit/es/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  /**\n   * Blits a source image on to this image\n   * @param {Jimp} src the source Jimp instance\n   * @param {number} x the x position to blit the image\n   * @param {number} y the y position to blit the image\n   * @param {number} srcx (optional) the x position from which to crop the source image\n   * @param {number} srcy (optional) the y position from which to crop the source image\n   * @param {number} srcw (optional) the width to which to crop the source image\n   * @param {number} srch (optional) the height to which to crop the source image\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  blit(src, x, y, srcx, srcy, srcw, srch, cb) {\n    if (!(src instanceof this.constructor)) {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"The source must be a Jimp image\", cb);\n    }\n    if (typeof x !== \"number\" || typeof y !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"x and y must be numbers\", cb);\n    }\n    if (typeof srcx === \"function\") {\n      cb = srcx;\n      srcx = 0;\n      srcy = 0;\n      srcw = src.bitmap.width;\n      srch = src.bitmap.height;\n    } else if (typeof srcx === typeof srcy && typeof srcy === typeof srcw && typeof srcw === typeof srch) {\n      srcx = srcx || 0;\n      srcy = srcy || 0;\n      srcw = srcw || src.bitmap.width;\n      srch = srch || src.bitmap.height;\n    } else {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"srcx, srcy, srcw, srch must be numbers\", cb);\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    // round input\n    srcx = Math.round(srcx);\n    srcy = Math.round(srcy);\n    srcw = Math.round(srcw);\n    srch = Math.round(srch);\n    const maxWidth = this.bitmap.width;\n    const maxHeight = this.bitmap.height;\n    const baseImage = this;\n    src.scanQuiet(srcx, srcy, srcw, srch, function (sx, sy, idx) {\n      const xOffset = x + sx - srcx;\n      const yOffset = y + sy - srcy;\n      if (xOffset >= 0 && yOffset >= 0 && maxWidth - xOffset > 0 && maxHeight - yOffset > 0) {\n        const dstIdx = baseImage.getPixelIndex(xOffset, yOffset);\n        const src = {\n          r: this.bitmap.data[idx],\n          g: this.bitmap.data[idx + 1],\n          b: this.bitmap.data[idx + 2],\n          a: this.bitmap.data[idx + 3]\n        };\n        const dst = {\n          r: baseImage.bitmap.data[dstIdx],\n          g: baseImage.bitmap.data[dstIdx + 1],\n          b: baseImage.bitmap.data[dstIdx + 2],\n          a: baseImage.bitmap.data[dstIdx + 3]\n        };\n        baseImage.bitmap.data[dstIdx] = (src.a * (src.r - dst.r) - dst.r + 255 >> 8) + dst.r;\n        baseImage.bitmap.data[dstIdx + 1] = (src.a * (src.g - dst.g) - dst.g + 255 >> 8) + dst.g;\n        baseImage.bitmap.data[dstIdx + 2] = (src.a * (src.b - dst.b) - dst.b + 255 >> 8) + dst.b;\n        baseImage.bitmap.data[dstIdx + 3] = this.constructor.limit255(dst.a + src.a);\n      }\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tYmxpdC9lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RDtBQUN4RCxpRUFBZ0I7QUFDaEI7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLHVCQUF1QjtBQUNwQyxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtREFBVTtBQUN2QjtBQUNBO0FBQ0EsYUFBYSxtREFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixhQUFhLG1EQUFVO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsUUFBUSwwREFBYTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyxFQUFFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tYmxpdC9lcy9pbmRleC5qcz85OGUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRocm93RXJyb3IsIGlzTm9kZVBhdHRlcm4gfSBmcm9tIFwiQGppbXAvdXRpbHNcIjtcbmV4cG9ydCBkZWZhdWx0ICgoKSA9PiAoe1xuICAvKipcbiAgICogQmxpdHMgYSBzb3VyY2UgaW1hZ2Ugb24gdG8gdGhpcyBpbWFnZVxuICAgKiBAcGFyYW0ge0ppbXB9IHNyYyB0aGUgc291cmNlIEppbXAgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggdGhlIHggcG9zaXRpb24gdG8gYmxpdCB0aGUgaW1hZ2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgdGhlIHkgcG9zaXRpb24gdG8gYmxpdCB0aGUgaW1hZ2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNyY3ggKG9wdGlvbmFsKSB0aGUgeCBwb3NpdGlvbiBmcm9tIHdoaWNoIHRvIGNyb3AgdGhlIHNvdXJjZSBpbWFnZVxuICAgKiBAcGFyYW0ge251bWJlcn0gc3JjeSAob3B0aW9uYWwpIHRoZSB5IHBvc2l0aW9uIGZyb20gd2hpY2ggdG8gY3JvcCB0aGUgc291cmNlIGltYWdlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzcmN3IChvcHRpb25hbCkgdGhlIHdpZHRoIHRvIHdoaWNoIHRvIGNyb3AgdGhlIHNvdXJjZSBpbWFnZVxuICAgKiBAcGFyYW0ge251bWJlcn0gc3JjaCAob3B0aW9uYWwpIHRoZSBoZWlnaHQgdG8gd2hpY2ggdG8gY3JvcCB0aGUgc291cmNlIGltYWdlXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAgICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAgICovXG4gIGJsaXQoc3JjLCB4LCB5LCBzcmN4LCBzcmN5LCBzcmN3LCBzcmNoLCBjYikge1xuICAgIGlmICghKHNyYyBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwiVGhlIHNvdXJjZSBtdXN0IGJlIGEgSmltcCBpbWFnZVwiLCBjYik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgeCAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgeSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIHRocm93RXJyb3IuY2FsbCh0aGlzLCBcInggYW5kIHkgbXVzdCBiZSBudW1iZXJzXCIsIGNiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzcmN4ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNiID0gc3JjeDtcbiAgICAgIHNyY3ggPSAwO1xuICAgICAgc3JjeSA9IDA7XG4gICAgICBzcmN3ID0gc3JjLmJpdG1hcC53aWR0aDtcbiAgICAgIHNyY2ggPSBzcmMuYml0bWFwLmhlaWdodDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzcmN4ID09PSB0eXBlb2Ygc3JjeSAmJiB0eXBlb2Ygc3JjeSA9PT0gdHlwZW9mIHNyY3cgJiYgdHlwZW9mIHNyY3cgPT09IHR5cGVvZiBzcmNoKSB7XG4gICAgICBzcmN4ID0gc3JjeCB8fCAwO1xuICAgICAgc3JjeSA9IHNyY3kgfHwgMDtcbiAgICAgIHNyY3cgPSBzcmN3IHx8IHNyYy5iaXRtYXAud2lkdGg7XG4gICAgICBzcmNoID0gc3JjaCB8fCBzcmMuYml0bWFwLmhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRocm93RXJyb3IuY2FsbCh0aGlzLCBcInNyY3gsIHNyY3ksIHNyY3csIHNyY2ggbXVzdCBiZSBudW1iZXJzXCIsIGNiKTtcbiAgICB9XG5cbiAgICAvLyByb3VuZCBpbnB1dFxuICAgIHggPSBNYXRoLnJvdW5kKHgpO1xuICAgIHkgPSBNYXRoLnJvdW5kKHkpO1xuXG4gICAgLy8gcm91bmQgaW5wdXRcbiAgICBzcmN4ID0gTWF0aC5yb3VuZChzcmN4KTtcbiAgICBzcmN5ID0gTWF0aC5yb3VuZChzcmN5KTtcbiAgICBzcmN3ID0gTWF0aC5yb3VuZChzcmN3KTtcbiAgICBzcmNoID0gTWF0aC5yb3VuZChzcmNoKTtcbiAgICBjb25zdCBtYXhXaWR0aCA9IHRoaXMuYml0bWFwLndpZHRoO1xuICAgIGNvbnN0IG1heEhlaWdodCA9IHRoaXMuYml0bWFwLmhlaWdodDtcbiAgICBjb25zdCBiYXNlSW1hZ2UgPSB0aGlzO1xuICAgIHNyYy5zY2FuUXVpZXQoc3JjeCwgc3JjeSwgc3Jjdywgc3JjaCwgZnVuY3Rpb24gKHN4LCBzeSwgaWR4KSB7XG4gICAgICBjb25zdCB4T2Zmc2V0ID0geCArIHN4IC0gc3JjeDtcbiAgICAgIGNvbnN0IHlPZmZzZXQgPSB5ICsgc3kgLSBzcmN5O1xuICAgICAgaWYgKHhPZmZzZXQgPj0gMCAmJiB5T2Zmc2V0ID49IDAgJiYgbWF4V2lkdGggLSB4T2Zmc2V0ID4gMCAmJiBtYXhIZWlnaHQgLSB5T2Zmc2V0ID4gMCkge1xuICAgICAgICBjb25zdCBkc3RJZHggPSBiYXNlSW1hZ2UuZ2V0UGl4ZWxJbmRleCh4T2Zmc2V0LCB5T2Zmc2V0KTtcbiAgICAgICAgY29uc3Qgc3JjID0ge1xuICAgICAgICAgIHI6IHRoaXMuYml0bWFwLmRhdGFbaWR4XSxcbiAgICAgICAgICBnOiB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDFdLFxuICAgICAgICAgIGI6IHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMl0sXG4gICAgICAgICAgYTogdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAzXVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBkc3QgPSB7XG4gICAgICAgICAgcjogYmFzZUltYWdlLmJpdG1hcC5kYXRhW2RzdElkeF0sXG4gICAgICAgICAgZzogYmFzZUltYWdlLmJpdG1hcC5kYXRhW2RzdElkeCArIDFdLFxuICAgICAgICAgIGI6IGJhc2VJbWFnZS5iaXRtYXAuZGF0YVtkc3RJZHggKyAyXSxcbiAgICAgICAgICBhOiBiYXNlSW1hZ2UuYml0bWFwLmRhdGFbZHN0SWR4ICsgM11cbiAgICAgICAgfTtcbiAgICAgICAgYmFzZUltYWdlLmJpdG1hcC5kYXRhW2RzdElkeF0gPSAoc3JjLmEgKiAoc3JjLnIgLSBkc3QucikgLSBkc3QuciArIDI1NSA+PiA4KSArIGRzdC5yO1xuICAgICAgICBiYXNlSW1hZ2UuYml0bWFwLmRhdGFbZHN0SWR4ICsgMV0gPSAoc3JjLmEgKiAoc3JjLmcgLSBkc3QuZykgLSBkc3QuZyArIDI1NSA+PiA4KSArIGRzdC5nO1xuICAgICAgICBiYXNlSW1hZ2UuYml0bWFwLmRhdGFbZHN0SWR4ICsgMl0gPSAoc3JjLmEgKiAoc3JjLmIgLSBkc3QuYikgLSBkc3QuYiArIDI1NSA+PiA4KSArIGRzdC5iO1xuICAgICAgICBiYXNlSW1hZ2UuYml0bWFwLmRhdGFbZHN0SWR4ICsgM10gPSB0aGlzLmNvbnN0cnVjdG9yLmxpbWl0MjU1KGRzdC5hICsgc3JjLmEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpc05vZGVQYXR0ZXJuKGNiKSkge1xuICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-blit/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-blur/es/blur-tables.js":
/*!**********************************************************!*\
  !*** ./node_modules/@jimp/plugin-blur/es/blur-tables.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mulTable: () => (/* binding */ mulTable),\n/* harmony export */   shgTable: () => (/* binding */ shgTable)\n/* harmony export */ });\nconst mulTable = [1, 57, 41, 21, 203, 34, 97, 73, 227, 91, 149, 62, 105, 45, 39, 137, 241, 107, 3, 173, 39, 71, 65, 238, 219, 101, 187, 87, 81, 151, 141, 133, 249, 117, 221, 209, 197, 187, 177, 169, 5, 153, 73, 139, 133, 127, 243, 233, 223, 107, 103, 99, 191, 23, 177, 171, 165, 159, 77, 149, 9, 139, 135, 131, 253, 245, 119, 231, 224, 109, 211, 103, 25, 195, 189, 23, 45, 175, 171, 83, 81, 79, 155, 151, 147, 9, 141, 137, 67, 131, 129, 251, 123, 30, 235, 115, 113, 221, 217, 53, 13, 51, 50, 49, 193, 189, 185, 91, 179, 175, 43, 169, 83, 163, 5, 79, 155, 19, 75, 147, 145, 143, 35, 69, 17, 67, 33, 65, 255, 251, 247, 243, 239, 59, 29, 229, 113, 111, 219, 27, 213, 105, 207, 51, 201, 199, 49, 193, 191, 47, 93, 183, 181, 179, 11, 87, 43, 85, 167, 165, 163, 161, 159, 157, 155, 77, 19, 75, 37, 73, 145, 143, 141, 35, 138, 137, 135, 67, 33, 131, 129, 255, 63, 250, 247, 61, 121, 239, 237, 117, 29, 229, 227, 225, 111, 55, 109, 216, 213, 211, 209, 207, 205, 203, 201, 199, 197, 195, 193, 48, 190, 47, 93, 185, 183, 181, 179, 178, 176, 175, 173, 171, 85, 21, 167, 165, 41, 163, 161, 5, 79, 157, 78, 154, 153, 19, 75, 149, 74, 147, 73, 144, 143, 71, 141, 140, 139, 137, 17, 135, 134, 133, 66, 131, 65, 129, 1];\nconst shgTable = [0, 9, 10, 10, 14, 12, 14, 14, 16, 15, 16, 15, 16, 15, 15, 17, 18, 17, 12, 18, 16, 17, 17, 19, 19, 18, 19, 18, 18, 19, 19, 19, 20, 19, 20, 20, 20, 20, 20, 20, 15, 20, 19, 20, 20, 20, 21, 21, 21, 20, 20, 20, 21, 18, 21, 21, 21, 21, 20, 21, 17, 21, 21, 21, 22, 22, 21, 22, 22, 21, 22, 21, 19, 22, 22, 19, 20, 22, 22, 21, 21, 21, 22, 22, 22, 18, 22, 22, 21, 22, 22, 23, 22, 20, 23, 22, 22, 23, 23, 21, 19, 21, 21, 21, 23, 23, 23, 22, 23, 23, 21, 23, 22, 23, 18, 22, 23, 20, 22, 23, 23, 23, 21, 22, 20, 22, 21, 22, 24, 24, 24, 24, 24, 22, 21, 24, 23, 23, 24, 21, 24, 23, 24, 22, 24, 24, 22, 24, 24, 22, 23, 24, 24, 24, 20, 23, 22, 23, 24, 24, 24, 24, 24, 24, 24, 23, 21, 23, 22, 23, 24, 24, 24, 22, 24, 24, 24, 23, 22, 24, 24, 25, 23, 25, 25, 23, 24, 25, 25, 24, 22, 25, 25, 25, 24, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 25, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 22, 25, 25, 23, 25, 25, 20, 24, 25, 24, 25, 25, 22, 24, 25, 24, 25, 24, 25, 25, 24, 25, 25, 25, 25, 22, 25, 25, 25, 24, 25, 24, 25, 18];\n//# sourceMappingURL=blur-tables.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tYmx1ci9lcy9ibHVyLXRhYmxlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPO0FBQ0E7QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRuLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1ibHVyL2VzL2JsdXItdGFibGVzLmpzPzZiNDIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IG11bFRhYmxlID0gWzEsIDU3LCA0MSwgMjEsIDIwMywgMzQsIDk3LCA3MywgMjI3LCA5MSwgMTQ5LCA2MiwgMTA1LCA0NSwgMzksIDEzNywgMjQxLCAxMDcsIDMsIDE3MywgMzksIDcxLCA2NSwgMjM4LCAyMTksIDEwMSwgMTg3LCA4NywgODEsIDE1MSwgMTQxLCAxMzMsIDI0OSwgMTE3LCAyMjEsIDIwOSwgMTk3LCAxODcsIDE3NywgMTY5LCA1LCAxNTMsIDczLCAxMzksIDEzMywgMTI3LCAyNDMsIDIzMywgMjIzLCAxMDcsIDEwMywgOTksIDE5MSwgMjMsIDE3NywgMTcxLCAxNjUsIDE1OSwgNzcsIDE0OSwgOSwgMTM5LCAxMzUsIDEzMSwgMjUzLCAyNDUsIDExOSwgMjMxLCAyMjQsIDEwOSwgMjExLCAxMDMsIDI1LCAxOTUsIDE4OSwgMjMsIDQ1LCAxNzUsIDE3MSwgODMsIDgxLCA3OSwgMTU1LCAxNTEsIDE0NywgOSwgMTQxLCAxMzcsIDY3LCAxMzEsIDEyOSwgMjUxLCAxMjMsIDMwLCAyMzUsIDExNSwgMTEzLCAyMjEsIDIxNywgNTMsIDEzLCA1MSwgNTAsIDQ5LCAxOTMsIDE4OSwgMTg1LCA5MSwgMTc5LCAxNzUsIDQzLCAxNjksIDgzLCAxNjMsIDUsIDc5LCAxNTUsIDE5LCA3NSwgMTQ3LCAxNDUsIDE0MywgMzUsIDY5LCAxNywgNjcsIDMzLCA2NSwgMjU1LCAyNTEsIDI0NywgMjQzLCAyMzksIDU5LCAyOSwgMjI5LCAxMTMsIDExMSwgMjE5LCAyNywgMjEzLCAxMDUsIDIwNywgNTEsIDIwMSwgMTk5LCA0OSwgMTkzLCAxOTEsIDQ3LCA5MywgMTgzLCAxODEsIDE3OSwgMTEsIDg3LCA0MywgODUsIDE2NywgMTY1LCAxNjMsIDE2MSwgMTU5LCAxNTcsIDE1NSwgNzcsIDE5LCA3NSwgMzcsIDczLCAxNDUsIDE0MywgMTQxLCAzNSwgMTM4LCAxMzcsIDEzNSwgNjcsIDMzLCAxMzEsIDEyOSwgMjU1LCA2MywgMjUwLCAyNDcsIDYxLCAxMjEsIDIzOSwgMjM3LCAxMTcsIDI5LCAyMjksIDIyNywgMjI1LCAxMTEsIDU1LCAxMDksIDIxNiwgMjEzLCAyMTEsIDIwOSwgMjA3LCAyMDUsIDIwMywgMjAxLCAxOTksIDE5NywgMTk1LCAxOTMsIDQ4LCAxOTAsIDQ3LCA5MywgMTg1LCAxODMsIDE4MSwgMTc5LCAxNzgsIDE3NiwgMTc1LCAxNzMsIDE3MSwgODUsIDIxLCAxNjcsIDE2NSwgNDEsIDE2MywgMTYxLCA1LCA3OSwgMTU3LCA3OCwgMTU0LCAxNTMsIDE5LCA3NSwgMTQ5LCA3NCwgMTQ3LCA3MywgMTQ0LCAxNDMsIDcxLCAxNDEsIDE0MCwgMTM5LCAxMzcsIDE3LCAxMzUsIDEzNCwgMTMzLCA2NiwgMTMxLCA2NSwgMTI5LCAxXTtcbmV4cG9ydCBjb25zdCBzaGdUYWJsZSA9IFswLCA5LCAxMCwgMTAsIDE0LCAxMiwgMTQsIDE0LCAxNiwgMTUsIDE2LCAxNSwgMTYsIDE1LCAxNSwgMTcsIDE4LCAxNywgMTIsIDE4LCAxNiwgMTcsIDE3LCAxOSwgMTksIDE4LCAxOSwgMTgsIDE4LCAxOSwgMTksIDE5LCAyMCwgMTksIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDE1LCAyMCwgMTksIDIwLCAyMCwgMjAsIDIxLCAyMSwgMjEsIDIwLCAyMCwgMjAsIDIxLCAxOCwgMjEsIDIxLCAyMSwgMjEsIDIwLCAyMSwgMTcsIDIxLCAyMSwgMjEsIDIyLCAyMiwgMjEsIDIyLCAyMiwgMjEsIDIyLCAyMSwgMTksIDIyLCAyMiwgMTksIDIwLCAyMiwgMjIsIDIxLCAyMSwgMjEsIDIyLCAyMiwgMjIsIDE4LCAyMiwgMjIsIDIxLCAyMiwgMjIsIDIzLCAyMiwgMjAsIDIzLCAyMiwgMjIsIDIzLCAyMywgMjEsIDE5LCAyMSwgMjEsIDIxLCAyMywgMjMsIDIzLCAyMiwgMjMsIDIzLCAyMSwgMjMsIDIyLCAyMywgMTgsIDIyLCAyMywgMjAsIDIyLCAyMywgMjMsIDIzLCAyMSwgMjIsIDIwLCAyMiwgMjEsIDIyLCAyNCwgMjQsIDI0LCAyNCwgMjQsIDIyLCAyMSwgMjQsIDIzLCAyMywgMjQsIDIxLCAyNCwgMjMsIDI0LCAyMiwgMjQsIDI0LCAyMiwgMjQsIDI0LCAyMiwgMjMsIDI0LCAyNCwgMjQsIDIwLCAyMywgMjIsIDIzLCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjMsIDIxLCAyMywgMjIsIDIzLCAyNCwgMjQsIDI0LCAyMiwgMjQsIDI0LCAyNCwgMjMsIDIyLCAyNCwgMjQsIDI1LCAyMywgMjUsIDI1LCAyMywgMjQsIDI1LCAyNSwgMjQsIDIyLCAyNSwgMjUsIDI1LCAyNCwgMjMsIDI0LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyMywgMjUsIDIzLCAyNCwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjQsIDIyLCAyNSwgMjUsIDIzLCAyNSwgMjUsIDIwLCAyNCwgMjUsIDI0LCAyNSwgMjUsIDIyLCAyNCwgMjUsIDI0LCAyNSwgMjQsIDI1LCAyNSwgMjQsIDI1LCAyNSwgMjUsIDI1LCAyMiwgMjUsIDI1LCAyNSwgMjQsIDI1LCAyNCwgMjUsIDE4XTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJsdXItdGFibGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-blur/es/blur-tables.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-blur/es/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@jimp/plugin-blur/es/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n/* harmony import */ var _blur_tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blur-tables */ \"(action-browser)/./node_modules/@jimp/plugin-blur/es/blur-tables.js\");\n\n\n\n/*\n    Superfast Blur (0.5)\n    http://www.quasimondo.com/BoxBlurForCanvas/FastBlur.js\n\n    Copyright (c) 2011 Mario Klingemann\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  /**\n   * A fast blur algorithm that produces similar effect to a Gaussian blur - but MUCH quicker\n   * @param {number} r the pixel radius of the blur\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  blur(r, cb) {\n    if (typeof r !== \"number\") return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"r must be a number\", cb);\n    if (r < 1) return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"r must be greater than 0\", cb);\n    let rsum;\n    let gsum;\n    let bsum;\n    let asum;\n    let x;\n    let y;\n    let i;\n    let p;\n    let p1;\n    let p2;\n    let yp;\n    let yi;\n    let yw;\n    let pa;\n    const wm = this.bitmap.width - 1;\n    const hm = this.bitmap.height - 1;\n    // const wh = this.bitmap.width * this.bitmap.height;\n    const rad1 = r + 1;\n    const mulSum = _blur_tables__WEBPACK_IMPORTED_MODULE_1__.mulTable[r];\n    const shgSum = _blur_tables__WEBPACK_IMPORTED_MODULE_1__.shgTable[r];\n    const red = [];\n    const green = [];\n    const blue = [];\n    const alpha = [];\n    const vmin = [];\n    const vmax = [];\n    let iterations = 2;\n    while (iterations-- > 0) {\n      yi = 0;\n      yw = 0;\n      for (y = 0; y < this.bitmap.height; y++) {\n        rsum = this.bitmap.data[yw] * rad1;\n        gsum = this.bitmap.data[yw + 1] * rad1;\n        bsum = this.bitmap.data[yw + 2] * rad1;\n        asum = this.bitmap.data[yw + 3] * rad1;\n        for (i = 1; i <= r; i++) {\n          p = yw + ((i > wm ? wm : i) << 2);\n          rsum += this.bitmap.data[p++];\n          gsum += this.bitmap.data[p++];\n          bsum += this.bitmap.data[p++];\n          asum += this.bitmap.data[p];\n        }\n        for (x = 0; x < this.bitmap.width; x++) {\n          red[yi] = rsum;\n          green[yi] = gsum;\n          blue[yi] = bsum;\n          alpha[yi] = asum;\n          if (y === 0) {\n            vmin[x] = ((p = x + rad1) < wm ? p : wm) << 2;\n            vmax[x] = (p = x - r) > 0 ? p << 2 : 0;\n          }\n          p1 = yw + vmin[x];\n          p2 = yw + vmax[x];\n          rsum += this.bitmap.data[p1++] - this.bitmap.data[p2++];\n          gsum += this.bitmap.data[p1++] - this.bitmap.data[p2++];\n          bsum += this.bitmap.data[p1++] - this.bitmap.data[p2++];\n          asum += this.bitmap.data[p1] - this.bitmap.data[p2];\n          yi++;\n        }\n        yw += this.bitmap.width << 2;\n      }\n      for (x = 0; x < this.bitmap.width; x++) {\n        yp = x;\n        rsum = red[yp] * rad1;\n        gsum = green[yp] * rad1;\n        bsum = blue[yp] * rad1;\n        asum = alpha[yp] * rad1;\n        for (i = 1; i <= r; i++) {\n          yp += i > hm ? 0 : this.bitmap.width;\n          rsum += red[yp];\n          gsum += green[yp];\n          bsum += blue[yp];\n          asum += alpha[yp];\n        }\n        yi = x << 2;\n        for (y = 0; y < this.bitmap.height; y++) {\n          pa = asum * mulSum >>> shgSum;\n          this.bitmap.data[yi + 3] = pa;\n\n          // normalize alpha\n          if (pa > 255) {\n            this.bitmap.data[yi + 3] = 255;\n          }\n          if (pa > 0) {\n            pa = 255 / pa;\n            this.bitmap.data[yi] = (rsum * mulSum >>> shgSum) * pa;\n            this.bitmap.data[yi + 1] = (gsum * mulSum >>> shgSum) * pa;\n            this.bitmap.data[yi + 2] = (bsum * mulSum >>> shgSum) * pa;\n          } else {\n            this.bitmap.data[yi + 2] = 0;\n            this.bitmap.data[yi + 1] = 0;\n            this.bitmap.data[yi] = 0;\n          }\n          if (x === 0) {\n            vmin[y] = ((p = y + rad1) < hm ? p : hm) * this.bitmap.width;\n            vmax[y] = (p = y - r) > 0 ? p * this.bitmap.width : 0;\n          }\n          p1 = x + vmin[y];\n          p2 = x + vmax[y];\n          rsum += red[p1] - red[p2];\n          gsum += green[p1] - green[p2];\n          bsum += blue[p1] - blue[p2];\n          asum += alpha[p1] - alpha[p2];\n          yi += this.bitmap.width << 2;\n        }\n      }\n    }\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-blur/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-circle/es/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@jimp/plugin-circle/es/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Creates a circle out of an image.\n * @param {function(Error, Jimp)} options (optional) radius, x, y\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  circle() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let cb = arguments.length > 1 ? arguments[1] : undefined;\n    if (typeof options === \"function\") {\n      cb = options;\n      options = {};\n    }\n    const radius = options.radius || (this.bitmap.width > this.bitmap.height ? this.bitmap.height : this.bitmap.width) / 2;\n    const center = {\n      x: typeof options.x === \"number\" ? options.x : this.bitmap.width / 2,\n      y: typeof options.y === \"number\" ? options.y : this.bitmap.height / 2\n    };\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      const curR = Math.sqrt(Math.pow(x - center.x, 2) + Math.pow(y - center.y, 2));\n      if (radius - curR <= 0.0) {\n        this.bitmap.data[idx + 3] = 0;\n      } else if (radius - curR < 1.0) {\n        this.bitmap.data[idx + 3] = 255 * (radius - curR);\n      }\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tY2lyY2xlL2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDOztBQUU1QztBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsV0FBVyx1QkFBdUI7QUFDbEMsYUFBYSxNQUFNO0FBQ25CO0FBQ0EsaUVBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsUUFBUSwwREFBYTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyxFQUFFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tY2lyY2xlL2VzL2luZGV4LmpzPzlhNzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb2RlUGF0dGVybiB9IGZyb20gXCJAamltcC91dGlsc1wiO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjaXJjbGUgb3V0IG9mIGFuIGltYWdlLlxuICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgSmltcCl9IG9wdGlvbnMgKG9wdGlvbmFsKSByYWRpdXMsIHgsIHlcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gKi9cbmV4cG9ydCBkZWZhdWx0ICgoKSA9PiAoe1xuICBjaXJjbGUoKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIGxldCBjYiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjYiA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGNvbnN0IHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzIHx8ICh0aGlzLmJpdG1hcC53aWR0aCA+IHRoaXMuYml0bWFwLmhlaWdodCA/IHRoaXMuYml0bWFwLmhlaWdodCA6IHRoaXMuYml0bWFwLndpZHRoKSAvIDI7XG4gICAgY29uc3QgY2VudGVyID0ge1xuICAgICAgeDogdHlwZW9mIG9wdGlvbnMueCA9PT0gXCJudW1iZXJcIiA/IG9wdGlvbnMueCA6IHRoaXMuYml0bWFwLndpZHRoIC8gMixcbiAgICAgIHk6IHR5cGVvZiBvcHRpb25zLnkgPT09IFwibnVtYmVyXCIgPyBvcHRpb25zLnkgOiB0aGlzLmJpdG1hcC5oZWlnaHQgLyAyXG4gICAgfTtcbiAgICB0aGlzLnNjYW5RdWlldCgwLCAwLCB0aGlzLmJpdG1hcC53aWR0aCwgdGhpcy5iaXRtYXAuaGVpZ2h0LCBmdW5jdGlvbiAoeCwgeSwgaWR4KSB7XG4gICAgICBjb25zdCBjdXJSID0gTWF0aC5zcXJ0KE1hdGgucG93KHggLSBjZW50ZXIueCwgMikgKyBNYXRoLnBvdyh5IC0gY2VudGVyLnksIDIpKTtcbiAgICAgIGlmIChyYWRpdXMgLSBjdXJSIDw9IDAuMCkge1xuICAgICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDNdID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXVzIC0gY3VyUiA8IDEuMCkge1xuICAgICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDNdID0gMjU1ICogKHJhZGl1cyAtIGN1clIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpc05vZGVQYXR0ZXJuKGNiKSkge1xuICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-circle/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-color/es/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@jimp/plugin-color/es/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColorActionName: () => (/* binding */ ColorActionName),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var tinycolor2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tinycolor2 */ \"(action-browser)/./node_modules/tinycolor2/esm/tinycolor.js\");\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\nfunction applyKernel(im, kernel, x, y) {\n  const value = [0, 0, 0];\n  const size = (kernel.length - 1) / 2;\n  for (let kx = 0; kx < kernel.length; kx += 1) {\n    for (let ky = 0; ky < kernel[kx].length; ky += 1) {\n      const idx = im.getPixelIndex(x + kx - size, y + ky - size);\n      value[0] += im.bitmap.data[idx] * kernel[kx][ky];\n      value[1] += im.bitmap.data[idx + 1] * kernel[kx][ky];\n      value[2] += im.bitmap.data[idx + 2] * kernel[kx][ky];\n    }\n  }\n  return value;\n}\nconst isDef = v => typeof v !== \"undefined\" && v !== null;\nfunction greyscale(cb) {\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n    const grey = parseInt(0.2126 * this.bitmap.data[idx] + 0.7152 * this.bitmap.data[idx + 1] + 0.0722 * this.bitmap.data[idx + 2], 10);\n    this.bitmap.data[idx] = grey;\n    this.bitmap.data[idx + 1] = grey;\n    this.bitmap.data[idx + 2] = grey;\n  });\n  if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n  return this;\n}\nfunction mix(clr, clr2) {\n  let p = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n  return {\n    r: (clr2.r - clr.r) * (p / 100) + clr.r,\n    g: (clr2.g - clr.g) * (p / 100) + clr.g,\n    b: (clr2.b - clr.b) * (p / 100) + clr.b\n  };\n}\nfunction colorFn(actions, cb) {\n  if (!actions || !Array.isArray(actions)) {\n    return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"actions must be an array\", cb);\n  }\n  actions = actions.map(action => {\n    if (action.apply === \"xor\" || action.apply === \"mix\") {\n      action.params[0] = (0,tinycolor2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(action.params[0]).toRgb();\n    }\n    return action;\n  });\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, (x, y, idx) => {\n    let clr = {\n      r: this.bitmap.data[idx],\n      g: this.bitmap.data[idx + 1],\n      b: this.bitmap.data[idx + 2]\n    };\n    const colorModifier = (i, amount) => this.constructor.limit255(clr[i] + amount);\n    actions.forEach(action => {\n      if (action.apply === \"mix\") {\n        clr = mix(clr, action.params[0], action.params[1]);\n      } else if (action.apply === \"tint\") {\n        clr = mix(clr, {\n          r: 255,\n          g: 255,\n          b: 255\n        }, action.params[0]);\n      } else if (action.apply === \"shade\") {\n        clr = mix(clr, {\n          r: 0,\n          g: 0,\n          b: 0\n        }, action.params[0]);\n      } else if (action.apply === \"xor\") {\n        clr = {\n          r: clr.r ^ action.params[0].r,\n          g: clr.g ^ action.params[0].g,\n          b: clr.b ^ action.params[0].b\n        };\n      } else if (action.apply === \"red\") {\n        clr.r = colorModifier(\"r\", action.params[0]);\n      } else if (action.apply === \"green\") {\n        clr.g = colorModifier(\"g\", action.params[0]);\n      } else if (action.apply === \"blue\") {\n        clr.b = colorModifier(\"b\", action.params[0]);\n      } else {\n        if (action.apply === \"hue\") {\n          action.apply = \"spin\";\n        }\n        clr = (0,tinycolor2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(clr);\n        if (!clr[action.apply]) {\n          return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"action \" + action.apply + \" not supported\", cb);\n        }\n        clr = clr[action.apply](...action.params).toRgb();\n      }\n    });\n    this.bitmap.data[idx] = clr.r;\n    this.bitmap.data[idx + 1] = clr.g;\n    this.bitmap.data[idx + 2] = clr.b;\n  });\n  if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n  return this;\n}\nconst ColorActionName = Object.freeze({\n  LIGHTEN: \"lighten\",\n  BRIGHTEN: \"brighten\",\n  DARKEN: \"darken\",\n  DESATURATE: \"desaturate\",\n  SATURATE: \"saturate\",\n  GREYSCALE: \"greyscale\",\n  SPIN: \"spin\",\n  HUE: \"hue\",\n  MIX: \"mix\",\n  TINT: \"tint\",\n  SHADE: \"shade\",\n  XOR: \"xor\",\n  RED: \"red\",\n  GREEN: \"green\",\n  BLUE: \"blue\"\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  /**\n   * Adjusts the brightness of the image\n   * @param {number} val the amount to adjust the brightness, a number between -1 and +1\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  brightness(val, cb) {\n    if (typeof val !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"val must be numbers\", cb);\n    }\n    if (val < -1 || val > +1) {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"val must be a number between -1 and +1\", cb);\n    }\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      if (val < 0.0) {\n        this.bitmap.data[idx] *= 1 + val;\n        this.bitmap.data[idx + 1] *= 1 + val;\n        this.bitmap.data[idx + 2] *= 1 + val;\n      } else {\n        this.bitmap.data[idx] += (255 - this.bitmap.data[idx]) * val;\n        this.bitmap.data[idx + 1] += (255 - this.bitmap.data[idx + 1]) * val;\n        this.bitmap.data[idx + 2] += (255 - this.bitmap.data[idx + 2]) * val;\n      }\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  },\n  /**\n   * Adjusts the contrast of the image\n   * @param {number} val the amount to adjust the contrast, a number between -1 and +1\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  contrast(val, cb) {\n    if (typeof val !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"val must be numbers\", cb);\n    }\n    if (val < -1 || val > +1) {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"val must be a number between -1 and +1\", cb);\n    }\n    const factor = (val + 1) / (1 - val);\n    function adjust(value) {\n      value = Math.floor(factor * (value - 127) + 127);\n      return value < 0 ? 0 : value > 255 ? 255 : value;\n    }\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      this.bitmap.data[idx] = adjust(this.bitmap.data[idx]);\n      this.bitmap.data[idx + 1] = adjust(this.bitmap.data[idx + 1]);\n      this.bitmap.data[idx + 2] = adjust(this.bitmap.data[idx + 2]);\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  },\n  /**\n   * Apply a posterize effect\n   * @param {number} n the amount to adjust the contrast, minimum threshold is two\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  posterize(n, cb) {\n    if (typeof n !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"n must be numbers\", cb);\n    }\n    if (n < 2) {\n      n = 2;\n    } // minimum of 2 levels\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      this.bitmap.data[idx] = Math.floor(this.bitmap.data[idx] / 255 * (n - 1)) / (n - 1) * 255;\n      this.bitmap.data[idx + 1] = Math.floor(this.bitmap.data[idx + 1] / 255 * (n - 1)) / (n - 1) * 255;\n      this.bitmap.data[idx + 2] = Math.floor(this.bitmap.data[idx + 2] / 255 * (n - 1)) / (n - 1) * 255;\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  },\n  /**\n   * Removes colour from the image using ITU Rec 709 luminance values\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  greyscale,\n  // Alias of greyscale for our American friends\n  grayscale: greyscale,\n  /**\n   * Multiplies the opacity of each pixel by a factor between 0 and 1\n   * @param {number} f A number, the factor by which to multiply the opacity of each pixel\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  opacity(f, cb) {\n    if (typeof f !== \"number\") return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"f must be a number\", cb);\n    if (f < 0 || f > 1) return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"f must be a number from 0 to 1\", cb);\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      const v = this.bitmap.data[idx + 3] * f;\n      this.bitmap.data[idx + 3] = v;\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  },\n  /**\n   * Applies a sepia tone to the image\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  sepia(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      let red = this.bitmap.data[idx];\n      let green = this.bitmap.data[idx + 1];\n      let blue = this.bitmap.data[idx + 2];\n      red = red * 0.393 + green * 0.769 + blue * 0.189;\n      green = red * 0.349 + green * 0.686 + blue * 0.168;\n      blue = red * 0.272 + green * 0.534 + blue * 0.131;\n      this.bitmap.data[idx] = red < 255 ? red : 255;\n      this.bitmap.data[idx + 1] = green < 255 ? green : 255;\n      this.bitmap.data[idx + 2] = blue < 255 ? blue : 255;\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  },\n  /**\n   * Fades each pixel by a factor between 0 and 1\n   * @param {number} f A number from 0 to 1. 0 will haven no effect. 1 will turn the image completely transparent.\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  fade(f, cb) {\n    if (typeof f !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"f must be a number\", cb);\n    }\n    if (f < 0 || f > 1) {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"f must be a number from 0 to 1\", cb);\n    }\n\n    // this method is an alternative to opacity (which may be deprecated)\n    this.opacity(1 - f);\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  },\n  /**\n   * Adds each element of the image to its local neighbors, weighted by the kernel\n   * @param {array} kernel a matrix to weight the neighbors sum\n   * @param {number} edgeHandling (optional) define how to sum pixels from outside the border\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  convolution(kernel, edgeHandling, cb) {\n    if (typeof edgeHandling === \"function\" && typeof cb === \"undefined\") {\n      cb = edgeHandling;\n      edgeHandling = null;\n    }\n    if (!edgeHandling) {\n      edgeHandling = this.constructor.EDGE_EXTEND;\n    }\n    const newData = Buffer.from(this.bitmap.data);\n    const kRows = kernel.length;\n    const kCols = kernel[0].length;\n    const rowEnd = Math.floor(kRows / 2);\n    const colEnd = Math.floor(kCols / 2);\n    const rowIni = -rowEnd;\n    const colIni = -colEnd;\n    let weight;\n    let rSum;\n    let gSum;\n    let bSum;\n    let ri;\n    let gi;\n    let bi;\n    let xi;\n    let yi;\n    let idxi;\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      bSum = 0;\n      gSum = 0;\n      rSum = 0;\n      for (let row = rowIni; row <= rowEnd; row++) {\n        for (let col = colIni; col <= colEnd; col++) {\n          xi = x + col;\n          yi = y + row;\n          weight = kernel[row + rowEnd][col + colEnd];\n          idxi = this.getPixelIndex(xi, yi, edgeHandling);\n          if (idxi === -1) {\n            bi = 0;\n            gi = 0;\n            ri = 0;\n          } else {\n            ri = this.bitmap.data[idxi + 0];\n            gi = this.bitmap.data[idxi + 1];\n            bi = this.bitmap.data[idxi + 2];\n          }\n          rSum += weight * ri;\n          gSum += weight * gi;\n          bSum += weight * bi;\n        }\n      }\n      if (rSum < 0) {\n        rSum = 0;\n      }\n      if (gSum < 0) {\n        gSum = 0;\n      }\n      if (bSum < 0) {\n        bSum = 0;\n      }\n      if (rSum > 255) {\n        rSum = 255;\n      }\n      if (gSum > 255) {\n        gSum = 255;\n      }\n      if (bSum > 255) {\n        bSum = 255;\n      }\n      newData[idx + 0] = rSum;\n      newData[idx + 1] = gSum;\n      newData[idx + 2] = bSum;\n    });\n    this.bitmap.data = newData;\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  },\n  /**\n   * Set the alpha channel on every pixel to fully opaque\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  opaque(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      this.bitmap.data[idx + 3] = 255;\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  },\n  /**\n   * Pixelates the image or a region\n   * @param {number} size the size of the pixels\n   * @param {number} x (optional) the x position of the region to pixelate\n   * @param {number} y (optional) the y position of the region to pixelate\n   * @param {number} w (optional) the width of the region to pixelate\n   * @param {number} h (optional) the height of the region to pixelate\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  pixelate(size, x, y, w, h, cb) {\n    if (typeof x === \"function\") {\n      cb = x;\n      h = null;\n      w = null;\n      y = null;\n      x = null;\n    } else {\n      if (typeof size !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"size must be a number\", cb);\n      }\n      if (isDef(x) && typeof x !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"x must be a number\", cb);\n      }\n      if (isDef(y) && typeof y !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"y must be a number\", cb);\n      }\n      if (isDef(w) && typeof w !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"w must be a number\", cb);\n      }\n      if (isDef(h) && typeof h !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"h must be a number\", cb);\n      }\n    }\n    const kernel = [[1 / 16, 2 / 16, 1 / 16], [2 / 16, 4 / 16, 2 / 16], [1 / 16, 2 / 16, 1 / 16]];\n    x = x || 0;\n    y = y || 0;\n    w = isDef(w) ? w : this.bitmap.width - x;\n    h = isDef(h) ? h : this.bitmap.height - y;\n    const source = this.cloneQuiet();\n    this.scanQuiet(x, y, w, h, function (xx, yx, idx) {\n      xx = size * Math.floor(xx / size);\n      yx = size * Math.floor(yx / size);\n      const value = applyKernel(source, kernel, xx, yx);\n      this.bitmap.data[idx] = value[0];\n      this.bitmap.data[idx + 1] = value[1];\n      this.bitmap.data[idx + 2] = value[2];\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  },\n  /**\n   * Applies a convolution kernel to the image or a region\n   * @param {array} kernel the convolution kernel\n   * @param {number} x (optional) the x position of the region to apply convolution to\n   * @param {number} y (optional) the y position of the region to apply convolution to\n   * @param {number} w (optional) the width of the region to apply convolution to\n   * @param {number} h (optional) the height of the region to apply convolution to\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  convolute(kernel, x, y, w, h, cb) {\n    if (!Array.isArray(kernel)) return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"the kernel must be an array\", cb);\n    if (typeof x === \"function\") {\n      cb = x;\n      x = null;\n      y = null;\n      w = null;\n      h = null;\n    } else {\n      if (isDef(x) && typeof x !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"x must be a number\", cb);\n      }\n      if (isDef(y) && typeof y !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"y must be a number\", cb);\n      }\n      if (isDef(w) && typeof w !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"w must be a number\", cb);\n      }\n      if (isDef(h) && typeof h !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"h must be a number\", cb);\n      }\n    }\n    x = isDef(x) ? x : 0;\n    y = isDef(y) ? y : 0;\n    w = isDef(w) ? w : this.bitmap.width - x;\n    h = isDef(h) ? h : this.bitmap.height - y;\n    const source = this.cloneQuiet();\n    this.scanQuiet(x, y, w, h, function (xx, yx, idx) {\n      const value = applyKernel(source, kernel, xx, yx);\n      this.bitmap.data[idx] = this.constructor.limit255(value[0]);\n      this.bitmap.data[idx + 1] = this.constructor.limit255(value[1]);\n      this.bitmap.data[idx + 2] = this.constructor.limit255(value[2]);\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  },\n  /**\n   * Apply multiple color modification rules\n   * @param {array} actions list of color modification rules, in following format: { apply: '<rule-name>', params: [ <rule-parameters> ]  }\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  color: colorFn,\n  colour: colorFn\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-color/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-contain/es/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@jimp/plugin-contain/es/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Scale the image to the given width and height keeping the aspect ratio. Some parts of the image may be letter boxed.\n * @param {number} w the width to resize the image to\n * @param {number} h the height to resize the image to\n * @param {number} alignBits (optional) A bitmask for horizontal and vertical alignment\n * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  contain(w, h, alignBits, mode, cb) {\n    if (typeof w !== \"number\" || typeof h !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"w and h must be numbers\", cb);\n    }\n\n    // permit any sort of optional parameters combination\n    if (typeof alignBits === \"string\") {\n      if (typeof mode === \"function\" && typeof cb === \"undefined\") cb = mode;\n      mode = alignBits;\n      alignBits = null;\n    }\n    if (typeof alignBits === \"function\") {\n      if (typeof cb === \"undefined\") cb = alignBits;\n      mode = null;\n      alignBits = null;\n    }\n    if (typeof mode === \"function\" && typeof cb === \"undefined\") {\n      cb = mode;\n      mode = null;\n    }\n    alignBits = alignBits || this.constructor.HORIZONTAL_ALIGN_CENTER | this.constructor.VERTICAL_ALIGN_MIDDLE;\n    const hbits = alignBits & (1 << 3) - 1;\n    const vbits = alignBits >> 3;\n\n    // check if more flags than one is in the bit sets\n    if (!(hbits !== 0 && !(hbits & hbits - 1) || vbits !== 0 && !(vbits & vbits - 1))) {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"only use one flag per alignment direction\", cb);\n    }\n    const alignH = hbits >> 1; // 0, 1, 2\n    const alignV = vbits >> 1; // 0, 1, 2\n\n    const f = w / h > this.bitmap.width / this.bitmap.height ? h / this.bitmap.height : w / this.bitmap.width;\n    const c = this.cloneQuiet().scale(f, mode);\n    this.resize(w, h, mode);\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      this.bitmap.data.writeUInt32BE(this._background, idx);\n    });\n    this.blit(c, (this.bitmap.width - c.bitmap.width) / 2 * alignH, (this.bitmap.height - c.bitmap.height) / 2 * alignV);\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tY29udGFpbi9lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RDs7QUFFeEQ7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLHVCQUF1QjtBQUNsQyxhQUFhLE1BQU07QUFDbkI7QUFDQSxpRUFBZ0I7QUFDaEI7QUFDQTtBQUNBLGFBQWEsbURBQVU7QUFDdkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLG1EQUFVO0FBQ3ZCO0FBQ0EsK0JBQStCO0FBQy9CLCtCQUErQjs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFFBQVEsMERBQWE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLENBQUMsRUFBRTtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dG4vLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWNvbnRhaW4vZXMvaW5kZXguanM/YjhiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vZGVQYXR0ZXJuLCB0aHJvd0Vycm9yIH0gZnJvbSBcIkBqaW1wL3V0aWxzXCI7XG5cbi8qKlxuICogU2NhbGUgdGhlIGltYWdlIHRvIHRoZSBnaXZlbiB3aWR0aCBhbmQgaGVpZ2h0IGtlZXBpbmcgdGhlIGFzcGVjdCByYXRpby4gU29tZSBwYXJ0cyBvZiB0aGUgaW1hZ2UgbWF5IGJlIGxldHRlciBib3hlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3IHRoZSB3aWR0aCB0byByZXNpemUgdGhlIGltYWdlIHRvXG4gKiBAcGFyYW0ge251bWJlcn0gaCB0aGUgaGVpZ2h0IHRvIHJlc2l6ZSB0aGUgaW1hZ2UgdG9cbiAqIEBwYXJhbSB7bnVtYmVyfSBhbGlnbkJpdHMgKG9wdGlvbmFsKSBBIGJpdG1hc2sgZm9yIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIGFsaWdubWVudFxuICogQHBhcmFtIHtzdHJpbmd9IG1vZGUgKG9wdGlvbmFsKSBhIHNjYWxpbmcgbWV0aG9kIChlLmcuIEppbXAuUkVTSVpFX0JFWklFUilcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gKi9cbmV4cG9ydCBkZWZhdWx0ICgoKSA9PiAoe1xuICBjb250YWluKHcsIGgsIGFsaWduQml0cywgbW9kZSwgY2IpIHtcbiAgICBpZiAodHlwZW9mIHcgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiB0aHJvd0Vycm9yLmNhbGwodGhpcywgXCJ3IGFuZCBoIG11c3QgYmUgbnVtYmVyc1wiLCBjYik7XG4gICAgfVxuXG4gICAgLy8gcGVybWl0IGFueSBzb3J0IG9mIG9wdGlvbmFsIHBhcmFtZXRlcnMgY29tYmluYXRpb25cbiAgICBpZiAodHlwZW9mIGFsaWduQml0cyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgaWYgKHR5cGVvZiBtb2RlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGNiID09PSBcInVuZGVmaW5lZFwiKSBjYiA9IG1vZGU7XG4gICAgICBtb2RlID0gYWxpZ25CaXRzO1xuICAgICAgYWxpZ25CaXRzID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhbGlnbkJpdHMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gXCJ1bmRlZmluZWRcIikgY2IgPSBhbGlnbkJpdHM7XG4gICAgICBtb2RlID0gbnVsbDtcbiAgICAgIGFsaWduQml0cyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbW9kZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBjYiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2IgPSBtb2RlO1xuICAgICAgbW9kZSA9IG51bGw7XG4gICAgfVxuICAgIGFsaWduQml0cyA9IGFsaWduQml0cyB8fCB0aGlzLmNvbnN0cnVjdG9yLkhPUklaT05UQUxfQUxJR05fQ0VOVEVSIHwgdGhpcy5jb25zdHJ1Y3Rvci5WRVJUSUNBTF9BTElHTl9NSURETEU7XG4gICAgY29uc3QgaGJpdHMgPSBhbGlnbkJpdHMgJiAoMSA8PCAzKSAtIDE7XG4gICAgY29uc3QgdmJpdHMgPSBhbGlnbkJpdHMgPj4gMztcblxuICAgIC8vIGNoZWNrIGlmIG1vcmUgZmxhZ3MgdGhhbiBvbmUgaXMgaW4gdGhlIGJpdCBzZXRzXG4gICAgaWYgKCEoaGJpdHMgIT09IDAgJiYgIShoYml0cyAmIGhiaXRzIC0gMSkgfHwgdmJpdHMgIT09IDAgJiYgISh2Yml0cyAmIHZiaXRzIC0gMSkpKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwib25seSB1c2Ugb25lIGZsYWcgcGVyIGFsaWdubWVudCBkaXJlY3Rpb25cIiwgY2IpO1xuICAgIH1cbiAgICBjb25zdCBhbGlnbkggPSBoYml0cyA+PiAxOyAvLyAwLCAxLCAyXG4gICAgY29uc3QgYWxpZ25WID0gdmJpdHMgPj4gMTsgLy8gMCwgMSwgMlxuXG4gICAgY29uc3QgZiA9IHcgLyBoID4gdGhpcy5iaXRtYXAud2lkdGggLyB0aGlzLmJpdG1hcC5oZWlnaHQgPyBoIC8gdGhpcy5iaXRtYXAuaGVpZ2h0IDogdyAvIHRoaXMuYml0bWFwLndpZHRoO1xuICAgIGNvbnN0IGMgPSB0aGlzLmNsb25lUXVpZXQoKS5zY2FsZShmLCBtb2RlKTtcbiAgICB0aGlzLnJlc2l6ZSh3LCBoLCBtb2RlKTtcbiAgICB0aGlzLnNjYW5RdWlldCgwLCAwLCB0aGlzLmJpdG1hcC53aWR0aCwgdGhpcy5iaXRtYXAuaGVpZ2h0LCBmdW5jdGlvbiAoeCwgeSwgaWR4KSB7XG4gICAgICB0aGlzLmJpdG1hcC5kYXRhLndyaXRlVUludDMyQkUodGhpcy5fYmFja2dyb3VuZCwgaWR4KTtcbiAgICB9KTtcbiAgICB0aGlzLmJsaXQoYywgKHRoaXMuYml0bWFwLndpZHRoIC0gYy5iaXRtYXAud2lkdGgpIC8gMiAqIGFsaWduSCwgKHRoaXMuYml0bWFwLmhlaWdodCAtIGMuYml0bWFwLmhlaWdodCkgLyAyICogYWxpZ25WKTtcbiAgICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-contain/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-cover/es/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@jimp/plugin-cover/es/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Scale the image so the given width and height keeping the aspect ratio. Some parts of the image may be clipped.\n * @param {number} w the width to resize the image to\n * @param {number} h the height to resize the image to\n * @param {number} alignBits (optional) A bitmask for horizontal and vertical alignment\n * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  cover(w, h, alignBits, mode, cb) {\n    if (typeof w !== \"number\" || typeof h !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"w and h must be numbers\", cb);\n    }\n    if (alignBits && typeof alignBits === \"function\" && typeof cb === \"undefined\") {\n      cb = alignBits;\n      alignBits = null;\n      mode = null;\n    } else if (typeof mode === \"function\" && typeof cb === \"undefined\") {\n      cb = mode;\n      mode = null;\n    }\n    alignBits = alignBits || this.constructor.HORIZONTAL_ALIGN_CENTER | this.constructor.VERTICAL_ALIGN_MIDDLE;\n    const hbits = alignBits & (1 << 3) - 1;\n    const vbits = alignBits >> 3;\n\n    // check if more flags than one is in the bit sets\n    if (!(hbits !== 0 && !(hbits & hbits - 1) || vbits !== 0 && !(vbits & vbits - 1))) return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"only use one flag per alignment direction\", cb);\n    const alignH = hbits >> 1; // 0, 1, 2\n    const alignV = vbits >> 1; // 0, 1, 2\n\n    const f = w / h > this.bitmap.width / this.bitmap.height ? w / this.bitmap.width : h / this.bitmap.height;\n    this.scale(f, mode);\n    this.crop((this.bitmap.width - w) / 2 * alignH, (this.bitmap.height - h) / 2 * alignV, w, h);\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tY292ZXIvZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0Q7O0FBRXhEO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyx1QkFBdUI7QUFDbEMsYUFBYSxNQUFNO0FBQ25CO0FBQ0EsaUVBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxhQUFhLG1EQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOEZBQThGLG1EQUFVO0FBQ3hHLCtCQUErQjtBQUMvQiwrQkFBK0I7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBLFFBQVEsMERBQWE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLENBQUMsRUFBRTtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dG4vLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWNvdmVyL2VzL2luZGV4LmpzPzkzOGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb2RlUGF0dGVybiwgdGhyb3dFcnJvciB9IGZyb20gXCJAamltcC91dGlsc1wiO1xuXG4vKipcbiAqIFNjYWxlIHRoZSBpbWFnZSBzbyB0aGUgZ2l2ZW4gd2lkdGggYW5kIGhlaWdodCBrZWVwaW5nIHRoZSBhc3BlY3QgcmF0aW8uIFNvbWUgcGFydHMgb2YgdGhlIGltYWdlIG1heSBiZSBjbGlwcGVkLlxuICogQHBhcmFtIHtudW1iZXJ9IHcgdGhlIHdpZHRoIHRvIHJlc2l6ZSB0aGUgaW1hZ2UgdG9cbiAqIEBwYXJhbSB7bnVtYmVyfSBoIHRoZSBoZWlnaHQgdG8gcmVzaXplIHRoZSBpbWFnZSB0b1xuICogQHBhcmFtIHtudW1iZXJ9IGFsaWduQml0cyAob3B0aW9uYWwpIEEgYml0bWFzayBmb3IgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgYWxpZ25tZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kZSAob3B0aW9uYWwpIGEgc2NhbGluZyBtZXRob2QgKGUuZy4gSmltcC5SRVNJWkVfQkVaSUVSKVxuICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgSmltcCl9IGNiIChvcHRpb25hbCkgYSBjYWxsYmFjayBmb3Igd2hlbiBjb21wbGV0ZVxuICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgKCgpID0+ICh7XG4gIGNvdmVyKHcsIGgsIGFsaWduQml0cywgbW9kZSwgY2IpIHtcbiAgICBpZiAodHlwZW9mIHcgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiB0aHJvd0Vycm9yLmNhbGwodGhpcywgXCJ3IGFuZCBoIG11c3QgYmUgbnVtYmVyc1wiLCBjYik7XG4gICAgfVxuICAgIGlmIChhbGlnbkJpdHMgJiYgdHlwZW9mIGFsaWduQml0cyA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBjYiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2IgPSBhbGlnbkJpdHM7XG4gICAgICBhbGlnbkJpdHMgPSBudWxsO1xuICAgICAgbW9kZSA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBjYiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2IgPSBtb2RlO1xuICAgICAgbW9kZSA9IG51bGw7XG4gICAgfVxuICAgIGFsaWduQml0cyA9IGFsaWduQml0cyB8fCB0aGlzLmNvbnN0cnVjdG9yLkhPUklaT05UQUxfQUxJR05fQ0VOVEVSIHwgdGhpcy5jb25zdHJ1Y3Rvci5WRVJUSUNBTF9BTElHTl9NSURETEU7XG4gICAgY29uc3QgaGJpdHMgPSBhbGlnbkJpdHMgJiAoMSA8PCAzKSAtIDE7XG4gICAgY29uc3QgdmJpdHMgPSBhbGlnbkJpdHMgPj4gMztcblxuICAgIC8vIGNoZWNrIGlmIG1vcmUgZmxhZ3MgdGhhbiBvbmUgaXMgaW4gdGhlIGJpdCBzZXRzXG4gICAgaWYgKCEoaGJpdHMgIT09IDAgJiYgIShoYml0cyAmIGhiaXRzIC0gMSkgfHwgdmJpdHMgIT09IDAgJiYgISh2Yml0cyAmIHZiaXRzIC0gMSkpKSByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwib25seSB1c2Ugb25lIGZsYWcgcGVyIGFsaWdubWVudCBkaXJlY3Rpb25cIiwgY2IpO1xuICAgIGNvbnN0IGFsaWduSCA9IGhiaXRzID4+IDE7IC8vIDAsIDEsIDJcbiAgICBjb25zdCBhbGlnblYgPSB2Yml0cyA+PiAxOyAvLyAwLCAxLCAyXG5cbiAgICBjb25zdCBmID0gdyAvIGggPiB0aGlzLmJpdG1hcC53aWR0aCAvIHRoaXMuYml0bWFwLmhlaWdodCA/IHcgLyB0aGlzLmJpdG1hcC53aWR0aCA6IGggLyB0aGlzLmJpdG1hcC5oZWlnaHQ7XG4gICAgdGhpcy5zY2FsZShmLCBtb2RlKTtcbiAgICB0aGlzLmNyb3AoKHRoaXMuYml0bWFwLndpZHRoIC0gdykgLyAyICogYWxpZ25ILCAodGhpcy5iaXRtYXAuaGVpZ2h0IC0gaCkgLyAyICogYWxpZ25WLCB3LCBoKTtcbiAgICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-cover/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-crop/es/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@jimp/plugin-crop/es/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ pluginCrop)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n/* eslint-disable no-labels */\n\n\nfunction pluginCrop(event) {\n  /**\n   * Crops the image at a given point to a give size\n   * @param {number} x the x coordinate to crop form\n   * @param {number} y the y coordinate to crop form\n   * @param w the width of the crop region\n   * @param h the height of the crop region\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  event(\"crop\", function (x, y, w, h, cb) {\n    if (typeof x !== \"number\" || typeof y !== \"number\") return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"x and y must be numbers\", cb);\n    if (typeof w !== \"number\" || typeof h !== \"number\") return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"w and h must be numbers\", cb);\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    w = Math.round(w);\n    h = Math.round(h);\n    if (x === 0 && w === this.bitmap.width) {\n      // shortcut\n      const start = w * y + x << 2;\n      const end = start + (h * w << 2);\n      this.bitmap.data = this.bitmap.data.slice(start, end);\n    } else {\n      const bitmap = Buffer.allocUnsafe(w * h * 4);\n      let offset = 0;\n      this.scanQuiet(x, y, w, h, function (x, y, idx) {\n        const data = this.bitmap.data.readUInt32BE(idx, true);\n        bitmap.writeUInt32BE(data, offset, true);\n        offset += 4;\n      });\n      this.bitmap.data = bitmap;\n    }\n    this.bitmap.width = w;\n    this.bitmap.height = h;\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  });\n  return {\n    class: {\n      /**\n       * Autocrop same color borders from this image\n       * @param {number} tolerance (optional): a percent value of tolerance for pixels color difference (default: 0.0002%)\n       * @param {boolean} cropOnlyFrames (optional): flag to crop only real frames: all 4 sides of the image must have some border (default: true)\n       * @param {function(Error, Jimp)} cb (optional): a callback for when complete (default: no callback)\n       * @returns {Jimp} this for chaining of methods\n       */\n      autocrop() {\n        const w = this.bitmap.width;\n        const h = this.bitmap.height;\n        const minPixelsPerSide = 1; // to avoid cropping completely the image, resulting in an invalid 0 sized image\n\n        let cb; // callback\n        let leaveBorder = 0; // Amount of pixels in border to leave\n        let tolerance = 0.0002; // percent of color difference tolerance (default value)\n        let cropOnlyFrames = true; // flag to force cropping only if the image has a real \"frame\"\n        // i.e. all 4 sides have some border (default value)\n        let cropSymmetric = false; // flag to force cropping top be symmetric.\n        // i.e. north and south / east and west are cropped by the same value\n        let ignoreSides = {\n          north: false,\n          south: false,\n          east: false,\n          west: false\n        };\n\n        // parse arguments\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        for (let a = 0, len = args.length; a < len; a++) {\n          if (typeof args[a] === \"number\") {\n            // tolerance value passed\n            tolerance = args[a];\n          }\n          if (typeof args[a] === \"boolean\") {\n            // cropOnlyFrames value passed\n            cropOnlyFrames = args[a];\n          }\n          if (typeof args[a] === \"function\") {\n            // callback value passed\n            cb = args[a];\n          }\n          if (typeof args[a] === \"object\") {\n            // config object passed\n            const config = args[a];\n            if (typeof config.tolerance !== \"undefined\") {\n              ({\n                tolerance\n              } = config);\n            }\n            if (typeof config.cropOnlyFrames !== \"undefined\") {\n              ({\n                cropOnlyFrames\n              } = config);\n            }\n            if (typeof config.cropSymmetric !== \"undefined\") {\n              ({\n                cropSymmetric\n              } = config);\n            }\n            if (typeof config.leaveBorder !== \"undefined\") {\n              ({\n                leaveBorder\n              } = config);\n            }\n            if (typeof config.ignoreSides !== \"undefined\") {\n              ({\n                ignoreSides\n              } = config);\n            }\n          }\n        }\n\n        /**\n         * All borders must be of the same color as the top left pixel, to be cropped.\n         * It should be possible to crop borders each with a different color,\n         * but since there are many ways for corners to intersect, it would\n         * introduce unnecessary complexity to the algorithm.\n         */\n\n        // scan each side for same color borders\n        let colorTarget = this.getPixelColor(0, 0); // top left pixel color is the target color\n        const rgba1 = this.constructor.intToRGBA(colorTarget);\n\n        // for north and east sides\n        let northPixelsToCrop = 0;\n        let eastPixelsToCrop = 0;\n        let southPixelsToCrop = 0;\n        let westPixelsToCrop = 0;\n\n        // north side (scan rows from north to south)\n        colorTarget = this.getPixelColor(0, 0);\n        if (!ignoreSides.north) {\n          north: for (let y = 0; y < h - minPixelsPerSide; y++) {\n            for (let x = 0; x < w; x++) {\n              const colorXY = this.getPixelColor(x, y);\n              const rgba2 = this.constructor.intToRGBA(colorXY);\n              if (this.constructor.colorDiff(rgba1, rgba2) > tolerance) {\n                // this pixel is too distant from the first one: abort this side scan\n                break north;\n              }\n            }\n\n            // this row contains all pixels with the same color: increment this side pixels to crop\n            northPixelsToCrop++;\n          }\n        }\n\n        // west side (scan columns from west to east)\n        colorTarget = this.getPixelColor(w, 0);\n        if (!ignoreSides.west) {\n          west: for (let x = 0; x < w - minPixelsPerSide; x++) {\n            for (let y = 0 + northPixelsToCrop; y < h; y++) {\n              const colorXY = this.getPixelColor(x, y);\n              const rgba2 = this.constructor.intToRGBA(colorXY);\n              if (this.constructor.colorDiff(rgba1, rgba2) > tolerance) {\n                // this pixel is too distant from the first one: abort this side scan\n                break west;\n              }\n            }\n\n            // this column contains all pixels with the same color: increment this side pixels to crop\n            westPixelsToCrop++;\n          }\n        }\n\n        // south side (scan rows from south to north)\n        colorTarget = this.getPixelColor(0, h);\n        if (!ignoreSides.south) {\n          south: for (let y = h - 1; y >= northPixelsToCrop + minPixelsPerSide; y--) {\n            for (let x = w - eastPixelsToCrop - 1; x >= 0; x--) {\n              const colorXY = this.getPixelColor(x, y);\n              const rgba2 = this.constructor.intToRGBA(colorXY);\n              if (this.constructor.colorDiff(rgba1, rgba2) > tolerance) {\n                // this pixel is too distant from the first one: abort this side scan\n                break south;\n              }\n            }\n\n            // this row contains all pixels with the same color: increment this side pixels to crop\n            southPixelsToCrop++;\n          }\n        }\n\n        // east side (scan columns from east to west)\n        colorTarget = this.getPixelColor(w, h);\n        if (!ignoreSides.east) {\n          east: for (let x = w - 1; x >= 0 + westPixelsToCrop + minPixelsPerSide; x--) {\n            for (let y = h - 1; y >= 0 + northPixelsToCrop; y--) {\n              const colorXY = this.getPixelColor(x, y);\n              const rgba2 = this.constructor.intToRGBA(colorXY);\n              if (this.constructor.colorDiff(rgba1, rgba2) > tolerance) {\n                // this pixel is too distant from the first one: abort this side scan\n                break east;\n              }\n            }\n\n            // this column contains all pixels with the same color: increment this side pixels to crop\n            eastPixelsToCrop++;\n          }\n        }\n\n        // decide if a crop is needed\n        let doCrop = false;\n\n        // apply leaveBorder\n        westPixelsToCrop -= leaveBorder;\n        eastPixelsToCrop -= leaveBorder;\n        northPixelsToCrop -= leaveBorder;\n        southPixelsToCrop -= leaveBorder;\n        if (cropSymmetric) {\n          const horizontal = Math.min(eastPixelsToCrop, westPixelsToCrop);\n          const vertical = Math.min(northPixelsToCrop, southPixelsToCrop);\n          westPixelsToCrop = horizontal;\n          eastPixelsToCrop = horizontal;\n          northPixelsToCrop = vertical;\n          southPixelsToCrop = vertical;\n        }\n\n        // make sure that crops are >= 0\n        westPixelsToCrop = westPixelsToCrop >= 0 ? westPixelsToCrop : 0;\n        eastPixelsToCrop = eastPixelsToCrop >= 0 ? eastPixelsToCrop : 0;\n        northPixelsToCrop = northPixelsToCrop >= 0 ? northPixelsToCrop : 0;\n        southPixelsToCrop = southPixelsToCrop >= 0 ? southPixelsToCrop : 0;\n\n        // safety checks\n        const widthOfRemainingPixels = w - (westPixelsToCrop + eastPixelsToCrop);\n        const heightOfRemainingPixels = h - (southPixelsToCrop + northPixelsToCrop);\n        if (cropOnlyFrames) {\n          // crop image if all sides should be cropped\n          doCrop = eastPixelsToCrop !== 0 && northPixelsToCrop !== 0 && westPixelsToCrop !== 0 && southPixelsToCrop !== 0;\n        } else {\n          // crop image if at least one side should be cropped\n          doCrop = eastPixelsToCrop !== 0 || northPixelsToCrop !== 0 || westPixelsToCrop !== 0 || southPixelsToCrop !== 0;\n        }\n        if (doCrop) {\n          // do the real crop\n          this.crop(westPixelsToCrop, northPixelsToCrop, widthOfRemainingPixels, heightOfRemainingPixels);\n        }\n        if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n        return this;\n      }\n    }\n  };\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tY3JvcC9lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOztBQUV3RDtBQUN6QztBQUNmO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxhQUFhLHVCQUF1QjtBQUNwQyxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBLCtEQUErRCxtREFBVTtBQUN6RSwrREFBK0QsbURBQVU7O0FBRXpFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsMERBQWE7QUFDckI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekIsaUJBQWlCLFNBQVM7QUFDMUIsaUJBQWlCLHVCQUF1QjtBQUN4QyxtQkFBbUIsTUFBTTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQzs7QUFFcEMsZ0JBQWdCO0FBQ2hCLDZCQUE2QjtBQUM3QixnQ0FBZ0M7QUFDaEMsbUNBQW1DO0FBQ25DO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEVBQTRFLGFBQWE7QUFDekY7QUFDQTtBQUNBLDJDQUEyQyxTQUFTO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0RBQW9EO0FBQ3BEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDBCQUEwQjtBQUMzRCw0QkFBNEIsT0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsMEJBQTBCO0FBQzFELGdEQUFnRCxPQUFPO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQywyQ0FBMkM7QUFDaEYsbURBQW1ELFFBQVE7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDhDQUE4QztBQUNsRixnQ0FBZ0MsNEJBQTRCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDBEQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tY3JvcC9lcy9pbmRleC5qcz8yZjE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWxhYmVscyAqL1xuXG5pbXBvcnQgeyB0aHJvd0Vycm9yLCBpc05vZGVQYXR0ZXJuIH0gZnJvbSBcIkBqaW1wL3V0aWxzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwbHVnaW5Dcm9wKGV2ZW50KSB7XG4gIC8qKlxuICAgKiBDcm9wcyB0aGUgaW1hZ2UgYXQgYSBnaXZlbiBwb2ludCB0byBhIGdpdmUgc2l6ZVxuICAgKiBAcGFyYW0ge251bWJlcn0geCB0aGUgeCBjb29yZGluYXRlIHRvIGNyb3AgZm9ybVxuICAgKiBAcGFyYW0ge251bWJlcn0geSB0aGUgeSBjb29yZGluYXRlIHRvIGNyb3AgZm9ybVxuICAgKiBAcGFyYW0gdyB0aGUgd2lkdGggb2YgdGhlIGNyb3AgcmVnaW9uXG4gICAqIEBwYXJhbSBoIHRoZSBoZWlnaHQgb2YgdGhlIGNyb3AgcmVnaW9uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAgICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAgICovXG4gIGV2ZW50KFwiY3JvcFwiLCBmdW5jdGlvbiAoeCwgeSwgdywgaCwgY2IpIHtcbiAgICBpZiAodHlwZW9mIHggIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHkgIT09IFwibnVtYmVyXCIpIHJldHVybiB0aHJvd0Vycm9yLmNhbGwodGhpcywgXCJ4IGFuZCB5IG11c3QgYmUgbnVtYmVyc1wiLCBjYik7XG4gICAgaWYgKHR5cGVvZiB3ICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiBoICE9PSBcIm51bWJlclwiKSByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwidyBhbmQgaCBtdXN0IGJlIG51bWJlcnNcIiwgY2IpO1xuXG4gICAgLy8gcm91bmQgaW5wdXRcbiAgICB4ID0gTWF0aC5yb3VuZCh4KTtcbiAgICB5ID0gTWF0aC5yb3VuZCh5KTtcbiAgICB3ID0gTWF0aC5yb3VuZCh3KTtcbiAgICBoID0gTWF0aC5yb3VuZChoKTtcbiAgICBpZiAoeCA9PT0gMCAmJiB3ID09PSB0aGlzLmJpdG1hcC53aWR0aCkge1xuICAgICAgLy8gc2hvcnRjdXRcbiAgICAgIGNvbnN0IHN0YXJ0ID0gdyAqIHkgKyB4IDw8IDI7XG4gICAgICBjb25zdCBlbmQgPSBzdGFydCArIChoICogdyA8PCAyKTtcbiAgICAgIHRoaXMuYml0bWFwLmRhdGEgPSB0aGlzLmJpdG1hcC5kYXRhLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBiaXRtYXAgPSBCdWZmZXIuYWxsb2NVbnNhZmUodyAqIGggKiA0KTtcbiAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgdGhpcy5zY2FuUXVpZXQoeCwgeSwgdywgaCwgZnVuY3Rpb24gKHgsIHksIGlkeCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5iaXRtYXAuZGF0YS5yZWFkVUludDMyQkUoaWR4LCB0cnVlKTtcbiAgICAgICAgYml0bWFwLndyaXRlVUludDMyQkUoZGF0YSwgb2Zmc2V0LCB0cnVlKTtcbiAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuYml0bWFwLmRhdGEgPSBiaXRtYXA7XG4gICAgfVxuICAgIHRoaXMuYml0bWFwLndpZHRoID0gdztcbiAgICB0aGlzLmJpdG1hcC5oZWlnaHQgPSBoO1xuICAgIGlmIChpc05vZGVQYXR0ZXJuKGNiKSkge1xuICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGNsYXNzOiB7XG4gICAgICAvKipcbiAgICAgICAqIEF1dG9jcm9wIHNhbWUgY29sb3IgYm9yZGVycyBmcm9tIHRoaXMgaW1hZ2VcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b2xlcmFuY2UgKG9wdGlvbmFsKTogYSBwZXJjZW50IHZhbHVlIG9mIHRvbGVyYW5jZSBmb3IgcGl4ZWxzIGNvbG9yIGRpZmZlcmVuY2UgKGRlZmF1bHQ6IDAuMDAwMiUpXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNyb3BPbmx5RnJhbWVzIChvcHRpb25hbCk6IGZsYWcgdG8gY3JvcCBvbmx5IHJlYWwgZnJhbWVzOiBhbGwgNCBzaWRlcyBvZiB0aGUgaW1hZ2UgbXVzdCBoYXZlIHNvbWUgYm9yZGVyIChkZWZhdWx0OiB0cnVlKVxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgSmltcCl9IGNiIChvcHRpb25hbCk6IGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGUgKGRlZmF1bHQ6IG5vIGNhbGxiYWNrKVxuICAgICAgICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAgICAgICAqL1xuICAgICAgYXV0b2Nyb3AoKSB7XG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLmJpdG1hcC53aWR0aDtcbiAgICAgICAgY29uc3QgaCA9IHRoaXMuYml0bWFwLmhlaWdodDtcbiAgICAgICAgY29uc3QgbWluUGl4ZWxzUGVyU2lkZSA9IDE7IC8vIHRvIGF2b2lkIGNyb3BwaW5nIGNvbXBsZXRlbHkgdGhlIGltYWdlLCByZXN1bHRpbmcgaW4gYW4gaW52YWxpZCAwIHNpemVkIGltYWdlXG5cbiAgICAgICAgbGV0IGNiOyAvLyBjYWxsYmFja1xuICAgICAgICBsZXQgbGVhdmVCb3JkZXIgPSAwOyAvLyBBbW91bnQgb2YgcGl4ZWxzIGluIGJvcmRlciB0byBsZWF2ZVxuICAgICAgICBsZXQgdG9sZXJhbmNlID0gMC4wMDAyOyAvLyBwZXJjZW50IG9mIGNvbG9yIGRpZmZlcmVuY2UgdG9sZXJhbmNlIChkZWZhdWx0IHZhbHVlKVxuICAgICAgICBsZXQgY3JvcE9ubHlGcmFtZXMgPSB0cnVlOyAvLyBmbGFnIHRvIGZvcmNlIGNyb3BwaW5nIG9ubHkgaWYgdGhlIGltYWdlIGhhcyBhIHJlYWwgXCJmcmFtZVwiXG4gICAgICAgIC8vIGkuZS4gYWxsIDQgc2lkZXMgaGF2ZSBzb21lIGJvcmRlciAoZGVmYXVsdCB2YWx1ZSlcbiAgICAgICAgbGV0IGNyb3BTeW1tZXRyaWMgPSBmYWxzZTsgLy8gZmxhZyB0byBmb3JjZSBjcm9wcGluZyB0b3AgYmUgc3ltbWV0cmljLlxuICAgICAgICAvLyBpLmUuIG5vcnRoIGFuZCBzb3V0aCAvIGVhc3QgYW5kIHdlc3QgYXJlIGNyb3BwZWQgYnkgdGhlIHNhbWUgdmFsdWVcbiAgICAgICAgbGV0IGlnbm9yZVNpZGVzID0ge1xuICAgICAgICAgIG5vcnRoOiBmYWxzZSxcbiAgICAgICAgICBzb3V0aDogZmFsc2UsXG4gICAgICAgICAgZWFzdDogZmFsc2UsXG4gICAgICAgICAgd2VzdDogZmFsc2VcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBwYXJzZSBhcmd1bWVudHNcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBhID0gMCwgbGVuID0gYXJncy5sZW5ndGg7IGEgPCBsZW47IGErKykge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1thXSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgLy8gdG9sZXJhbmNlIHZhbHVlIHBhc3NlZFxuICAgICAgICAgICAgdG9sZXJhbmNlID0gYXJnc1thXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2FdID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgLy8gY3JvcE9ubHlGcmFtZXMgdmFsdWUgcGFzc2VkXG4gICAgICAgICAgICBjcm9wT25seUZyYW1lcyA9IGFyZ3NbYV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1thXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAvLyBjYWxsYmFjayB2YWx1ZSBwYXNzZWRcbiAgICAgICAgICAgIGNiID0gYXJnc1thXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2FdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAvLyBjb25maWcgb2JqZWN0IHBhc3NlZFxuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gYXJnc1thXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnLnRvbGVyYW5jZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAoe1xuICAgICAgICAgICAgICAgIHRvbGVyYW5jZVxuICAgICAgICAgICAgICB9ID0gY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnLmNyb3BPbmx5RnJhbWVzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgY3JvcE9ubHlGcmFtZXNcbiAgICAgICAgICAgICAgfSA9IGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5jcm9wU3ltbWV0cmljICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgY3JvcFN5bW1ldHJpY1xuICAgICAgICAgICAgICB9ID0gY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnLmxlYXZlQm9yZGVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgbGVhdmVCb3JkZXJcbiAgICAgICAgICAgICAgfSA9IGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5pZ25vcmVTaWRlcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAoe1xuICAgICAgICAgICAgICAgIGlnbm9yZVNpZGVzXG4gICAgICAgICAgICAgIH0gPSBjb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGwgYm9yZGVycyBtdXN0IGJlIG9mIHRoZSBzYW1lIGNvbG9yIGFzIHRoZSB0b3AgbGVmdCBwaXhlbCwgdG8gYmUgY3JvcHBlZC5cbiAgICAgICAgICogSXQgc2hvdWxkIGJlIHBvc3NpYmxlIHRvIGNyb3AgYm9yZGVycyBlYWNoIHdpdGggYSBkaWZmZXJlbnQgY29sb3IsXG4gICAgICAgICAqIGJ1dCBzaW5jZSB0aGVyZSBhcmUgbWFueSB3YXlzIGZvciBjb3JuZXJzIHRvIGludGVyc2VjdCwgaXQgd291bGRcbiAgICAgICAgICogaW50cm9kdWNlIHVubmVjZXNzYXJ5IGNvbXBsZXhpdHkgdG8gdGhlIGFsZ29yaXRobS5cbiAgICAgICAgICovXG5cbiAgICAgICAgLy8gc2NhbiBlYWNoIHNpZGUgZm9yIHNhbWUgY29sb3IgYm9yZGVyc1xuICAgICAgICBsZXQgY29sb3JUYXJnZXQgPSB0aGlzLmdldFBpeGVsQ29sb3IoMCwgMCk7IC8vIHRvcCBsZWZ0IHBpeGVsIGNvbG9yIGlzIHRoZSB0YXJnZXQgY29sb3JcbiAgICAgICAgY29uc3QgcmdiYTEgPSB0aGlzLmNvbnN0cnVjdG9yLmludFRvUkdCQShjb2xvclRhcmdldCk7XG5cbiAgICAgICAgLy8gZm9yIG5vcnRoIGFuZCBlYXN0IHNpZGVzXG4gICAgICAgIGxldCBub3J0aFBpeGVsc1RvQ3JvcCA9IDA7XG4gICAgICAgIGxldCBlYXN0UGl4ZWxzVG9Dcm9wID0gMDtcbiAgICAgICAgbGV0IHNvdXRoUGl4ZWxzVG9Dcm9wID0gMDtcbiAgICAgICAgbGV0IHdlc3RQaXhlbHNUb0Nyb3AgPSAwO1xuXG4gICAgICAgIC8vIG5vcnRoIHNpZGUgKHNjYW4gcm93cyBmcm9tIG5vcnRoIHRvIHNvdXRoKVxuICAgICAgICBjb2xvclRhcmdldCA9IHRoaXMuZ2V0UGl4ZWxDb2xvcigwLCAwKTtcbiAgICAgICAgaWYgKCFpZ25vcmVTaWRlcy5ub3J0aCkge1xuICAgICAgICAgIG5vcnRoOiBmb3IgKGxldCB5ID0gMDsgeSA8IGggLSBtaW5QaXhlbHNQZXJTaWRlOyB5KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdzsgeCsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbG9yWFkgPSB0aGlzLmdldFBpeGVsQ29sb3IoeCwgeSk7XG4gICAgICAgICAgICAgIGNvbnN0IHJnYmEyID0gdGhpcy5jb25zdHJ1Y3Rvci5pbnRUb1JHQkEoY29sb3JYWSk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLmNvbG9yRGlmZihyZ2JhMSwgcmdiYTIpID4gdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBwaXhlbCBpcyB0b28gZGlzdGFudCBmcm9tIHRoZSBmaXJzdCBvbmU6IGFib3J0IHRoaXMgc2lkZSBzY2FuXG4gICAgICAgICAgICAgICAgYnJlYWsgbm9ydGg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdGhpcyByb3cgY29udGFpbnMgYWxsIHBpeGVscyB3aXRoIHRoZSBzYW1lIGNvbG9yOiBpbmNyZW1lbnQgdGhpcyBzaWRlIHBpeGVscyB0byBjcm9wXG4gICAgICAgICAgICBub3J0aFBpeGVsc1RvQ3JvcCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdlc3Qgc2lkZSAoc2NhbiBjb2x1bW5zIGZyb20gd2VzdCB0byBlYXN0KVxuICAgICAgICBjb2xvclRhcmdldCA9IHRoaXMuZ2V0UGl4ZWxDb2xvcih3LCAwKTtcbiAgICAgICAgaWYgKCFpZ25vcmVTaWRlcy53ZXN0KSB7XG4gICAgICAgICAgd2VzdDogZm9yIChsZXQgeCA9IDA7IHggPCB3IC0gbWluUGl4ZWxzUGVyU2lkZTsgeCsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gMCArIG5vcnRoUGl4ZWxzVG9Dcm9wOyB5IDwgaDsgeSsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbG9yWFkgPSB0aGlzLmdldFBpeGVsQ29sb3IoeCwgeSk7XG4gICAgICAgICAgICAgIGNvbnN0IHJnYmEyID0gdGhpcy5jb25zdHJ1Y3Rvci5pbnRUb1JHQkEoY29sb3JYWSk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLmNvbG9yRGlmZihyZ2JhMSwgcmdiYTIpID4gdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBwaXhlbCBpcyB0b28gZGlzdGFudCBmcm9tIHRoZSBmaXJzdCBvbmU6IGFib3J0IHRoaXMgc2lkZSBzY2FuXG4gICAgICAgICAgICAgICAgYnJlYWsgd2VzdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB0aGlzIGNvbHVtbiBjb250YWlucyBhbGwgcGl4ZWxzIHdpdGggdGhlIHNhbWUgY29sb3I6IGluY3JlbWVudCB0aGlzIHNpZGUgcGl4ZWxzIHRvIGNyb3BcbiAgICAgICAgICAgIHdlc3RQaXhlbHNUb0Nyb3ArKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzb3V0aCBzaWRlIChzY2FuIHJvd3MgZnJvbSBzb3V0aCB0byBub3J0aClcbiAgICAgICAgY29sb3JUYXJnZXQgPSB0aGlzLmdldFBpeGVsQ29sb3IoMCwgaCk7XG4gICAgICAgIGlmICghaWdub3JlU2lkZXMuc291dGgpIHtcbiAgICAgICAgICBzb3V0aDogZm9yIChsZXQgeSA9IGggLSAxOyB5ID49IG5vcnRoUGl4ZWxzVG9Dcm9wICsgbWluUGl4ZWxzUGVyU2lkZTsgeS0tKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gdyAtIGVhc3RQaXhlbHNUb0Nyb3AgLSAxOyB4ID49IDA7IHgtLSkge1xuICAgICAgICAgICAgICBjb25zdCBjb2xvclhZID0gdGhpcy5nZXRQaXhlbENvbG9yKHgsIHkpO1xuICAgICAgICAgICAgICBjb25zdCByZ2JhMiA9IHRoaXMuY29uc3RydWN0b3IuaW50VG9SR0JBKGNvbG9yWFkpO1xuICAgICAgICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5jb2xvckRpZmYocmdiYTEsIHJnYmEyKSA+IHRvbGVyYW5jZSkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgcGl4ZWwgaXMgdG9vIGRpc3RhbnQgZnJvbSB0aGUgZmlyc3Qgb25lOiBhYm9ydCB0aGlzIHNpZGUgc2NhblxuICAgICAgICAgICAgICAgIGJyZWFrIHNvdXRoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRoaXMgcm93IGNvbnRhaW5zIGFsbCBwaXhlbHMgd2l0aCB0aGUgc2FtZSBjb2xvcjogaW5jcmVtZW50IHRoaXMgc2lkZSBwaXhlbHMgdG8gY3JvcFxuICAgICAgICAgICAgc291dGhQaXhlbHNUb0Nyb3ArKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlYXN0IHNpZGUgKHNjYW4gY29sdW1ucyBmcm9tIGVhc3QgdG8gd2VzdClcbiAgICAgICAgY29sb3JUYXJnZXQgPSB0aGlzLmdldFBpeGVsQ29sb3IodywgaCk7XG4gICAgICAgIGlmICghaWdub3JlU2lkZXMuZWFzdCkge1xuICAgICAgICAgIGVhc3Q6IGZvciAobGV0IHggPSB3IC0gMTsgeCA+PSAwICsgd2VzdFBpeGVsc1RvQ3JvcCArIG1pblBpeGVsc1BlclNpZGU7IHgtLSkge1xuICAgICAgICAgICAgZm9yIChsZXQgeSA9IGggLSAxOyB5ID49IDAgKyBub3J0aFBpeGVsc1RvQ3JvcDsgeS0tKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbG9yWFkgPSB0aGlzLmdldFBpeGVsQ29sb3IoeCwgeSk7XG4gICAgICAgICAgICAgIGNvbnN0IHJnYmEyID0gdGhpcy5jb25zdHJ1Y3Rvci5pbnRUb1JHQkEoY29sb3JYWSk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLmNvbG9yRGlmZihyZ2JhMSwgcmdiYTIpID4gdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBwaXhlbCBpcyB0b28gZGlzdGFudCBmcm9tIHRoZSBmaXJzdCBvbmU6IGFib3J0IHRoaXMgc2lkZSBzY2FuXG4gICAgICAgICAgICAgICAgYnJlYWsgZWFzdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB0aGlzIGNvbHVtbiBjb250YWlucyBhbGwgcGl4ZWxzIHdpdGggdGhlIHNhbWUgY29sb3I6IGluY3JlbWVudCB0aGlzIHNpZGUgcGl4ZWxzIHRvIGNyb3BcbiAgICAgICAgICAgIGVhc3RQaXhlbHNUb0Nyb3ArKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZWNpZGUgaWYgYSBjcm9wIGlzIG5lZWRlZFxuICAgICAgICBsZXQgZG9Dcm9wID0gZmFsc2U7XG5cbiAgICAgICAgLy8gYXBwbHkgbGVhdmVCb3JkZXJcbiAgICAgICAgd2VzdFBpeGVsc1RvQ3JvcCAtPSBsZWF2ZUJvcmRlcjtcbiAgICAgICAgZWFzdFBpeGVsc1RvQ3JvcCAtPSBsZWF2ZUJvcmRlcjtcbiAgICAgICAgbm9ydGhQaXhlbHNUb0Nyb3AgLT0gbGVhdmVCb3JkZXI7XG4gICAgICAgIHNvdXRoUGl4ZWxzVG9Dcm9wIC09IGxlYXZlQm9yZGVyO1xuICAgICAgICBpZiAoY3JvcFN5bW1ldHJpYykge1xuICAgICAgICAgIGNvbnN0IGhvcml6b250YWwgPSBNYXRoLm1pbihlYXN0UGl4ZWxzVG9Dcm9wLCB3ZXN0UGl4ZWxzVG9Dcm9wKTtcbiAgICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IE1hdGgubWluKG5vcnRoUGl4ZWxzVG9Dcm9wLCBzb3V0aFBpeGVsc1RvQ3JvcCk7XG4gICAgICAgICAgd2VzdFBpeGVsc1RvQ3JvcCA9IGhvcml6b250YWw7XG4gICAgICAgICAgZWFzdFBpeGVsc1RvQ3JvcCA9IGhvcml6b250YWw7XG4gICAgICAgICAgbm9ydGhQaXhlbHNUb0Nyb3AgPSB2ZXJ0aWNhbDtcbiAgICAgICAgICBzb3V0aFBpeGVsc1RvQ3JvcCA9IHZlcnRpY2FsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgY3JvcHMgYXJlID49IDBcbiAgICAgICAgd2VzdFBpeGVsc1RvQ3JvcCA9IHdlc3RQaXhlbHNUb0Nyb3AgPj0gMCA/IHdlc3RQaXhlbHNUb0Nyb3AgOiAwO1xuICAgICAgICBlYXN0UGl4ZWxzVG9Dcm9wID0gZWFzdFBpeGVsc1RvQ3JvcCA+PSAwID8gZWFzdFBpeGVsc1RvQ3JvcCA6IDA7XG4gICAgICAgIG5vcnRoUGl4ZWxzVG9Dcm9wID0gbm9ydGhQaXhlbHNUb0Nyb3AgPj0gMCA/IG5vcnRoUGl4ZWxzVG9Dcm9wIDogMDtcbiAgICAgICAgc291dGhQaXhlbHNUb0Nyb3AgPSBzb3V0aFBpeGVsc1RvQ3JvcCA+PSAwID8gc291dGhQaXhlbHNUb0Nyb3AgOiAwO1xuXG4gICAgICAgIC8vIHNhZmV0eSBjaGVja3NcbiAgICAgICAgY29uc3Qgd2lkdGhPZlJlbWFpbmluZ1BpeGVscyA9IHcgLSAod2VzdFBpeGVsc1RvQ3JvcCArIGVhc3RQaXhlbHNUb0Nyb3ApO1xuICAgICAgICBjb25zdCBoZWlnaHRPZlJlbWFpbmluZ1BpeGVscyA9IGggLSAoc291dGhQaXhlbHNUb0Nyb3AgKyBub3J0aFBpeGVsc1RvQ3JvcCk7XG4gICAgICAgIGlmIChjcm9wT25seUZyYW1lcykge1xuICAgICAgICAgIC8vIGNyb3AgaW1hZ2UgaWYgYWxsIHNpZGVzIHNob3VsZCBiZSBjcm9wcGVkXG4gICAgICAgICAgZG9Dcm9wID0gZWFzdFBpeGVsc1RvQ3JvcCAhPT0gMCAmJiBub3J0aFBpeGVsc1RvQ3JvcCAhPT0gMCAmJiB3ZXN0UGl4ZWxzVG9Dcm9wICE9PSAwICYmIHNvdXRoUGl4ZWxzVG9Dcm9wICE9PSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNyb3AgaW1hZ2UgaWYgYXQgbGVhc3Qgb25lIHNpZGUgc2hvdWxkIGJlIGNyb3BwZWRcbiAgICAgICAgICBkb0Nyb3AgPSBlYXN0UGl4ZWxzVG9Dcm9wICE9PSAwIHx8IG5vcnRoUGl4ZWxzVG9Dcm9wICE9PSAwIHx8IHdlc3RQaXhlbHNUb0Nyb3AgIT09IDAgfHwgc291dGhQaXhlbHNUb0Nyb3AgIT09IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRvQ3JvcCkge1xuICAgICAgICAgIC8vIGRvIHRoZSByZWFsIGNyb3BcbiAgICAgICAgICB0aGlzLmNyb3Aod2VzdFBpeGVsc1RvQ3JvcCwgbm9ydGhQaXhlbHNUb0Nyb3AsIHdpZHRoT2ZSZW1haW5pbmdQaXhlbHMsIGhlaWdodE9mUmVtYWluaW5nUGl4ZWxzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICAgICAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-crop/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-displace/es/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@jimp/plugin-displace/es/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Displaces the image based on the provided displacement map\n * @param {object} map the source Jimp instance\n * @param {number} offset the maximum displacement value\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  displace(map, offset, cb) {\n    if (typeof map !== \"object\" || map.constructor !== this.constructor) {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"The source must be a Jimp image\", cb);\n    }\n    if (typeof offset !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"factor must be a number\", cb);\n    }\n    const source = this.cloneQuiet();\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      let displacement = map.bitmap.data[idx] / 256 * offset;\n      displacement = Math.round(displacement);\n      const ids = this.getPixelIndex(x + displacement, y);\n      this.bitmap.data[ids] = source.bitmap.data[idx];\n      this.bitmap.data[ids + 1] = source.bitmap.data[idx + 1];\n      this.bitmap.data[ids + 2] = source.bitmap.data[idx + 2];\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tZGlzcGxhY2UvZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0Q7O0FBRXhEO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsdUJBQXVCO0FBQ2xDLGFBQWEsTUFBTTtBQUNuQjtBQUNBLGlFQUFnQjtBQUNoQjtBQUNBO0FBQ0EsYUFBYSxtREFBVTtBQUN2QjtBQUNBO0FBQ0EsYUFBYSxtREFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsUUFBUSwwREFBYTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyxFQUFFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tZGlzcGxhY2UvZXMvaW5kZXguanM/Y2U5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vZGVQYXR0ZXJuLCB0aHJvd0Vycm9yIH0gZnJvbSBcIkBqaW1wL3V0aWxzXCI7XG5cbi8qKlxuICogRGlzcGxhY2VzIHRoZSBpbWFnZSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgZGlzcGxhY2VtZW50IG1hcFxuICogQHBhcmFtIHtvYmplY3R9IG1hcCB0aGUgc291cmNlIEppbXAgaW5zdGFuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgdGhlIG1heGltdW0gZGlzcGxhY2VtZW50IHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gY2IgKG9wdGlvbmFsKSBhIGNhbGxiYWNrIGZvciB3aGVuIGNvbXBsZXRlXG4gKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICovXG5leHBvcnQgZGVmYXVsdCAoKCkgPT4gKHtcbiAgZGlzcGxhY2UobWFwLCBvZmZzZXQsIGNiKSB7XG4gICAgaWYgKHR5cGVvZiBtYXAgIT09IFwib2JqZWN0XCIgfHwgbWFwLmNvbnN0cnVjdG9yICE9PSB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwiVGhlIHNvdXJjZSBtdXN0IGJlIGEgSmltcCBpbWFnZVwiLCBjYik7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwiZmFjdG9yIG11c3QgYmUgYSBudW1iZXJcIiwgY2IpO1xuICAgIH1cbiAgICBjb25zdCBzb3VyY2UgPSB0aGlzLmNsb25lUXVpZXQoKTtcbiAgICB0aGlzLnNjYW5RdWlldCgwLCAwLCB0aGlzLmJpdG1hcC53aWR0aCwgdGhpcy5iaXRtYXAuaGVpZ2h0LCBmdW5jdGlvbiAoeCwgeSwgaWR4KSB7XG4gICAgICBsZXQgZGlzcGxhY2VtZW50ID0gbWFwLmJpdG1hcC5kYXRhW2lkeF0gLyAyNTYgKiBvZmZzZXQ7XG4gICAgICBkaXNwbGFjZW1lbnQgPSBNYXRoLnJvdW5kKGRpc3BsYWNlbWVudCk7XG4gICAgICBjb25zdCBpZHMgPSB0aGlzLmdldFBpeGVsSW5kZXgoeCArIGRpc3BsYWNlbWVudCwgeSk7XG4gICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkc10gPSBzb3VyY2UuYml0bWFwLmRhdGFbaWR4XTtcbiAgICAgIHRoaXMuYml0bWFwLmRhdGFbaWRzICsgMV0gPSBzb3VyY2UuYml0bWFwLmRhdGFbaWR4ICsgMV07XG4gICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkcyArIDJdID0gc291cmNlLmJpdG1hcC5kYXRhW2lkeCArIDJdO1xuICAgIH0pO1xuICAgIGlmIChpc05vZGVQYXR0ZXJuKGNiKSkge1xuICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-displace/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-dither/es/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@jimp/plugin-dither/es/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Apply a ordered dithering effect\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nfunction dither(cb) {\n  const rgb565Matrix = [1, 9, 3, 11, 13, 5, 15, 7, 4, 12, 2, 10, 16, 8, 14, 6];\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n    const thresholdId = ((y & 3) << 2) + x % 4;\n    const dither = rgb565Matrix[thresholdId];\n    this.bitmap.data[idx] = Math.min(this.bitmap.data[idx] + dither, 0xff);\n    this.bitmap.data[idx + 1] = Math.min(this.bitmap.data[idx + 1] + dither, 0xff);\n    this.bitmap.data[idx + 2] = Math.min(this.bitmap.data[idx + 2] + dither, 0xff);\n  });\n  if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n  return this;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  dither565: dither,\n  dither16: dither\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tZGl0aGVyL2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDOztBQUU1QztBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxNQUFNLDBEQUFhO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxDQUFDLENBQUMsRUFBRTtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dG4vLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWRpdGhlci9lcy9pbmRleC5qcz9kMDYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9kZVBhdHRlcm4gfSBmcm9tIFwiQGppbXAvdXRpbHNcIjtcblxuLyoqXG4gKiBBcHBseSBhIG9yZGVyZWQgZGl0aGVyaW5nIGVmZmVjdFxuICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgSmltcCl9IGNiIChvcHRpb25hbCkgYSBjYWxsYmFjayBmb3Igd2hlbiBjb21wbGV0ZVxuICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAqL1xuZnVuY3Rpb24gZGl0aGVyKGNiKSB7XG4gIGNvbnN0IHJnYjU2NU1hdHJpeCA9IFsxLCA5LCAzLCAxMSwgMTMsIDUsIDE1LCA3LCA0LCAxMiwgMiwgMTAsIDE2LCA4LCAxNCwgNl07XG4gIHRoaXMuc2NhblF1aWV0KDAsIDAsIHRoaXMuYml0bWFwLndpZHRoLCB0aGlzLmJpdG1hcC5oZWlnaHQsIGZ1bmN0aW9uICh4LCB5LCBpZHgpIHtcbiAgICBjb25zdCB0aHJlc2hvbGRJZCA9ICgoeSAmIDMpIDw8IDIpICsgeCAlIDQ7XG4gICAgY29uc3QgZGl0aGVyID0gcmdiNTY1TWF0cml4W3RocmVzaG9sZElkXTtcbiAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeF0gPSBNYXRoLm1pbih0aGlzLmJpdG1hcC5kYXRhW2lkeF0gKyBkaXRoZXIsIDB4ZmYpO1xuICAgIHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMV0gPSBNYXRoLm1pbih0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDFdICsgZGl0aGVyLCAweGZmKTtcbiAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDJdID0gTWF0aC5taW4odGhpcy5iaXRtYXAuZGF0YVtpZHggKyAyXSArIGRpdGhlciwgMHhmZik7XG4gIH0pO1xuICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZXhwb3J0IGRlZmF1bHQgKCgpID0+ICh7XG4gIGRpdGhlcjU2NTogZGl0aGVyLFxuICBkaXRoZXIxNjogZGl0aGVyXG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-dither/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-fisheye/es/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@jimp/plugin-fisheye/es/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Creates a circle out of an image.\n * @param {object} options (optional) r: radius of effect\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  fisheye() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      r: 2.5\n    };\n    let cb = arguments.length > 1 ? arguments[1] : undefined;\n    if (typeof options === \"function\") {\n      cb = options;\n      options = {\n        r: 2.5\n      };\n    }\n    const source = this.cloneQuiet();\n    const {\n      width,\n      height\n    } = source.bitmap;\n    source.scanQuiet(0, 0, width, height, (x, y) => {\n      const hx = x / width;\n      const hy = y / height;\n      const r = Math.sqrt(Math.pow(hx - 0.5, 2) + Math.pow(hy - 0.5, 2));\n      const rn = 2 * Math.pow(r, options.r);\n      const cosA = (hx - 0.5) / r;\n      const sinA = (hy - 0.5) / r;\n      const newX = Math.round((rn * cosA + 0.5) * width);\n      const newY = Math.round((rn * sinA + 0.5) * height);\n      const color = source.getPixelColor(newX, newY);\n      this.setPixelColor(color, x, y);\n    });\n\n    /* Set center pixel color, otherwise it will be transparent */\n    this.setPixelColor(source.getPixelColor(width / 2, height / 2), width / 2, height / 2);\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tZmlzaGV5ZS9lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE0Qzs7QUFFNUM7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLHVCQUF1QjtBQUNsQyxhQUFhLE1BQU07QUFDbkI7QUFDQSxpRUFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxRQUFRLDBEQUFhO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLEVBQUU7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRuLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1maXNoZXllL2VzL2luZGV4LmpzPzhkY2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb2RlUGF0dGVybiB9IGZyb20gXCJAamltcC91dGlsc1wiO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjaXJjbGUgb3V0IG9mIGFuIGltYWdlLlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgKG9wdGlvbmFsKSByOiByYWRpdXMgb2YgZWZmZWN0XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gY2IgKG9wdGlvbmFsKSBhIGNhbGxiYWNrIGZvciB3aGVuIGNvbXBsZXRlXG4gKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICovXG5leHBvcnQgZGVmYXVsdCAoKCkgPT4gKHtcbiAgZmlzaGV5ZSgpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge1xuICAgICAgcjogMi41XG4gICAgfTtcbiAgICBsZXQgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2IgPSBvcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgcjogMi41XG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBzb3VyY2UgPSB0aGlzLmNsb25lUXVpZXQoKTtcbiAgICBjb25zdCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gPSBzb3VyY2UuYml0bWFwO1xuICAgIHNvdXJjZS5zY2FuUXVpZXQoMCwgMCwgd2lkdGgsIGhlaWdodCwgKHgsIHkpID0+IHtcbiAgICAgIGNvbnN0IGh4ID0geCAvIHdpZHRoO1xuICAgICAgY29uc3QgaHkgPSB5IC8gaGVpZ2h0O1xuICAgICAgY29uc3QgciA9IE1hdGguc3FydChNYXRoLnBvdyhoeCAtIDAuNSwgMikgKyBNYXRoLnBvdyhoeSAtIDAuNSwgMikpO1xuICAgICAgY29uc3Qgcm4gPSAyICogTWF0aC5wb3cociwgb3B0aW9ucy5yKTtcbiAgICAgIGNvbnN0IGNvc0EgPSAoaHggLSAwLjUpIC8gcjtcbiAgICAgIGNvbnN0IHNpbkEgPSAoaHkgLSAwLjUpIC8gcjtcbiAgICAgIGNvbnN0IG5ld1ggPSBNYXRoLnJvdW5kKChybiAqIGNvc0EgKyAwLjUpICogd2lkdGgpO1xuICAgICAgY29uc3QgbmV3WSA9IE1hdGgucm91bmQoKHJuICogc2luQSArIDAuNSkgKiBoZWlnaHQpO1xuICAgICAgY29uc3QgY29sb3IgPSBzb3VyY2UuZ2V0UGl4ZWxDb2xvcihuZXdYLCBuZXdZKTtcbiAgICAgIHRoaXMuc2V0UGl4ZWxDb2xvcihjb2xvciwgeCwgeSk7XG4gICAgfSk7XG5cbiAgICAvKiBTZXQgY2VudGVyIHBpeGVsIGNvbG9yLCBvdGhlcndpc2UgaXQgd2lsbCBiZSB0cmFuc3BhcmVudCAqL1xuICAgIHRoaXMuc2V0UGl4ZWxDb2xvcihzb3VyY2UuZ2V0UGl4ZWxDb2xvcih3aWR0aCAvIDIsIGhlaWdodCAvIDIpLCB3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICAgIGlmIChpc05vZGVQYXR0ZXJuKGNiKSkge1xuICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-fisheye/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-flip/es/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@jimp/plugin-flip/es/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Flip the image horizontally\n * @param {boolean} horizontal a Boolean, if true the image will be flipped horizontally\n * @param {boolean} vertical a Boolean, if true the image will be flipped vertically\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nfunction flipFn(horizontal, vertical, cb) {\n  if (typeof horizontal !== \"boolean\" || typeof vertical !== \"boolean\") return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"horizontal and vertical must be Booleans\", cb);\n  const bitmap = Buffer.alloc(this.bitmap.data.length);\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n    const _x = horizontal ? this.bitmap.width - 1 - x : x;\n    const _y = vertical ? this.bitmap.height - 1 - y : y;\n    const _idx = this.bitmap.width * _y + _x << 2;\n    const data = this.bitmap.data.readUInt32BE(idx);\n    bitmap.writeUInt32BE(data, _idx);\n  });\n  this.bitmap.data = Buffer.from(bitmap);\n  if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n  return this;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  flip: flipFn,\n  mirror: flipFn\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tZmxpcC9lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RDs7QUFFeEQ7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyx1QkFBdUI7QUFDbEMsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQSwrRUFBK0UsbURBQVU7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxNQUFNLDBEQUFhO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxDQUFDLENBQUMsRUFBRTtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dG4vLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWZsaXAvZXMvaW5kZXguanM/M2QyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vZGVQYXR0ZXJuLCB0aHJvd0Vycm9yIH0gZnJvbSBcIkBqaW1wL3V0aWxzXCI7XG5cbi8qKlxuICogRmxpcCB0aGUgaW1hZ2UgaG9yaXpvbnRhbGx5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhvcml6b250YWwgYSBCb29sZWFuLCBpZiB0cnVlIHRoZSBpbWFnZSB3aWxsIGJlIGZsaXBwZWQgaG9yaXpvbnRhbGx5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZlcnRpY2FsIGEgQm9vbGVhbiwgaWYgdHJ1ZSB0aGUgaW1hZ2Ugd2lsbCBiZSBmbGlwcGVkIHZlcnRpY2FsbHlcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gKi9cbmZ1bmN0aW9uIGZsaXBGbihob3Jpem9udGFsLCB2ZXJ0aWNhbCwgY2IpIHtcbiAgaWYgKHR5cGVvZiBob3Jpem9udGFsICE9PSBcImJvb2xlYW5cIiB8fCB0eXBlb2YgdmVydGljYWwgIT09IFwiYm9vbGVhblwiKSByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwiaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgbXVzdCBiZSBCb29sZWFuc1wiLCBjYik7XG4gIGNvbnN0IGJpdG1hcCA9IEJ1ZmZlci5hbGxvYyh0aGlzLmJpdG1hcC5kYXRhLmxlbmd0aCk7XG4gIHRoaXMuc2NhblF1aWV0KDAsIDAsIHRoaXMuYml0bWFwLndpZHRoLCB0aGlzLmJpdG1hcC5oZWlnaHQsIGZ1bmN0aW9uICh4LCB5LCBpZHgpIHtcbiAgICBjb25zdCBfeCA9IGhvcml6b250YWwgPyB0aGlzLmJpdG1hcC53aWR0aCAtIDEgLSB4IDogeDtcbiAgICBjb25zdCBfeSA9IHZlcnRpY2FsID8gdGhpcy5iaXRtYXAuaGVpZ2h0IC0gMSAtIHkgOiB5O1xuICAgIGNvbnN0IF9pZHggPSB0aGlzLmJpdG1hcC53aWR0aCAqIF95ICsgX3ggPDwgMjtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5iaXRtYXAuZGF0YS5yZWFkVUludDMyQkUoaWR4KTtcbiAgICBiaXRtYXAud3JpdGVVSW50MzJCRShkYXRhLCBfaWR4KTtcbiAgfSk7XG4gIHRoaXMuYml0bWFwLmRhdGEgPSBCdWZmZXIuZnJvbShiaXRtYXApO1xuICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZXhwb3J0IGRlZmF1bHQgKCgpID0+ICh7XG4gIGZsaXA6IGZsaXBGbixcbiAgbWlycm9yOiBmbGlwRm5cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-flip/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-gaussian/es/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@jimp/plugin-gaussian/es/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Applies a true Gaussian blur to the image (warning: this is VERY slow)\n * @param {number} r the pixel radius of the blur\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  gaussian(r, cb) {\n    // http://blog.ivank.net/fastest-gaussian-blur.html\n    if (typeof r !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"r must be a number\", cb);\n    }\n    if (r < 1) {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"r must be greater than 0\", cb);\n    }\n    const rs = Math.ceil(r * 2.57); // significant radius\n    const range = rs * 2 + 1;\n    const rr2 = r * r * 2;\n    const rr2pi = rr2 * Math.PI;\n    const weights = [];\n    for (let y = 0; y < range; y++) {\n      weights[y] = [];\n      for (let x = 0; x < range; x++) {\n        const dsq = (x - rs) ** 2 + (y - rs) ** 2;\n        weights[y][x] = Math.exp(-dsq / rr2) / rr2pi;\n      }\n    }\n    for (let y = 0; y < this.bitmap.height; y++) {\n      for (let x = 0; x < this.bitmap.width; x++) {\n        let red = 0;\n        let green = 0;\n        let blue = 0;\n        let alpha = 0;\n        let wsum = 0;\n        for (let iy = 0; iy < range; iy++) {\n          for (let ix = 0; ix < range; ix++) {\n            const x1 = Math.min(this.bitmap.width - 1, Math.max(0, ix + x - rs));\n            const y1 = Math.min(this.bitmap.height - 1, Math.max(0, iy + y - rs));\n            const weight = weights[iy][ix];\n            const idx = y1 * this.bitmap.width + x1 << 2;\n            red += this.bitmap.data[idx] * weight;\n            green += this.bitmap.data[idx + 1] * weight;\n            blue += this.bitmap.data[idx + 2] * weight;\n            alpha += this.bitmap.data[idx + 3] * weight;\n            wsum += weight;\n          }\n          const idx = y * this.bitmap.width + x << 2;\n          this.bitmap.data[idx] = Math.round(red / wsum);\n          this.bitmap.data[idx + 1] = Math.round(green / wsum);\n          this.bitmap.data[idx + 2] = Math.round(blue / wsum);\n          this.bitmap.data[idx + 3] = Math.round(alpha / wsum);\n        }\n      }\n    }\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tZ2F1c3NpYW4vZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0Q7O0FBRXhEO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyx1QkFBdUI7QUFDbEMsYUFBYSxNQUFNO0FBQ25CO0FBQ0EsaUVBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbURBQVU7QUFDdkI7QUFDQTtBQUNBLGFBQWEsbURBQVU7QUFDdkI7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsV0FBVztBQUMvQjtBQUNBLHNCQUFzQixXQUFXO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHdCQUF3QjtBQUM1QyxzQkFBc0IsdUJBQXVCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsWUFBWTtBQUNyQywyQkFBMkIsWUFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDBEQUFhO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLEVBQUU7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRuLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1nYXVzc2lhbi9lcy9pbmRleC5qcz8zMTMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9kZVBhdHRlcm4sIHRocm93RXJyb3IgfSBmcm9tIFwiQGppbXAvdXRpbHNcIjtcblxuLyoqXG4gKiBBcHBsaWVzIGEgdHJ1ZSBHYXVzc2lhbiBibHVyIHRvIHRoZSBpbWFnZSAod2FybmluZzogdGhpcyBpcyBWRVJZIHNsb3cpXG4gKiBAcGFyYW0ge251bWJlcn0gciB0aGUgcGl4ZWwgcmFkaXVzIG9mIHRoZSBibHVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gY2IgKG9wdGlvbmFsKSBhIGNhbGxiYWNrIGZvciB3aGVuIGNvbXBsZXRlXG4gKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICovXG5leHBvcnQgZGVmYXVsdCAoKCkgPT4gKHtcbiAgZ2F1c3NpYW4ociwgY2IpIHtcbiAgICAvLyBodHRwOi8vYmxvZy5pdmFuay5uZXQvZmFzdGVzdC1nYXVzc2lhbi1ibHVyLmh0bWxcbiAgICBpZiAodHlwZW9mIHIgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiB0aHJvd0Vycm9yLmNhbGwodGhpcywgXCJyIG11c3QgYmUgYSBudW1iZXJcIiwgY2IpO1xuICAgIH1cbiAgICBpZiAociA8IDEpIHtcbiAgICAgIHJldHVybiB0aHJvd0Vycm9yLmNhbGwodGhpcywgXCJyIG11c3QgYmUgZ3JlYXRlciB0aGFuIDBcIiwgY2IpO1xuICAgIH1cbiAgICBjb25zdCBycyA9IE1hdGguY2VpbChyICogMi41Nyk7IC8vIHNpZ25pZmljYW50IHJhZGl1c1xuICAgIGNvbnN0IHJhbmdlID0gcnMgKiAyICsgMTtcbiAgICBjb25zdCBycjIgPSByICogciAqIDI7XG4gICAgY29uc3QgcnIycGkgPSBycjIgKiBNYXRoLlBJO1xuICAgIGNvbnN0IHdlaWdodHMgPSBbXTtcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHJhbmdlOyB5KyspIHtcbiAgICAgIHdlaWdodHNbeV0gPSBbXTtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgcmFuZ2U7IHgrKykge1xuICAgICAgICBjb25zdCBkc3EgPSAoeCAtIHJzKSAqKiAyICsgKHkgLSBycykgKiogMjtcbiAgICAgICAgd2VpZ2h0c1t5XVt4XSA9IE1hdGguZXhwKC1kc3EgLyBycjIpIC8gcnIycGk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5iaXRtYXAuaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5iaXRtYXAud2lkdGg7IHgrKykge1xuICAgICAgICBsZXQgcmVkID0gMDtcbiAgICAgICAgbGV0IGdyZWVuID0gMDtcbiAgICAgICAgbGV0IGJsdWUgPSAwO1xuICAgICAgICBsZXQgYWxwaGEgPSAwO1xuICAgICAgICBsZXQgd3N1bSA9IDA7XG4gICAgICAgIGZvciAobGV0IGl5ID0gMDsgaXkgPCByYW5nZTsgaXkrKykge1xuICAgICAgICAgIGZvciAobGV0IGl4ID0gMDsgaXggPCByYW5nZTsgaXgrKykge1xuICAgICAgICAgICAgY29uc3QgeDEgPSBNYXRoLm1pbih0aGlzLmJpdG1hcC53aWR0aCAtIDEsIE1hdGgubWF4KDAsIGl4ICsgeCAtIHJzKSk7XG4gICAgICAgICAgICBjb25zdCB5MSA9IE1hdGgubWluKHRoaXMuYml0bWFwLmhlaWdodCAtIDEsIE1hdGgubWF4KDAsIGl5ICsgeSAtIHJzKSk7XG4gICAgICAgICAgICBjb25zdCB3ZWlnaHQgPSB3ZWlnaHRzW2l5XVtpeF07XG4gICAgICAgICAgICBjb25zdCBpZHggPSB5MSAqIHRoaXMuYml0bWFwLndpZHRoICsgeDEgPDwgMjtcbiAgICAgICAgICAgIHJlZCArPSB0aGlzLmJpdG1hcC5kYXRhW2lkeF0gKiB3ZWlnaHQ7XG4gICAgICAgICAgICBncmVlbiArPSB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDFdICogd2VpZ2h0O1xuICAgICAgICAgICAgYmx1ZSArPSB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDJdICogd2VpZ2h0O1xuICAgICAgICAgICAgYWxwaGEgKz0gdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAzXSAqIHdlaWdodDtcbiAgICAgICAgICAgIHdzdW0gKz0gd2VpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBpZHggPSB5ICogdGhpcy5iaXRtYXAud2lkdGggKyB4IDw8IDI7XG4gICAgICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHhdID0gTWF0aC5yb3VuZChyZWQgLyB3c3VtKTtcbiAgICAgICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDFdID0gTWF0aC5yb3VuZChncmVlbiAvIHdzdW0pO1xuICAgICAgICAgIHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMl0gPSBNYXRoLnJvdW5kKGJsdWUgLyB3c3VtKTtcbiAgICAgICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDNdID0gTWF0aC5yb3VuZChhbHBoYSAvIHdzdW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc05vZGVQYXR0ZXJuKGNiKSkge1xuICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-gaussian/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-invert/es/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@jimp/plugin-invert/es/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4taW52ZXJ0L2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDOztBQUU1QztBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsYUFBYSxNQUFNO0FBQ25CO0FBQ0EsaUVBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsUUFBUSwwREFBYTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyxFQUFFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4taW52ZXJ0L2VzL2luZGV4LmpzP2Y2YmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb2RlUGF0dGVybiB9IGZyb20gXCJAamltcC91dGlsc1wiO1xuXG4vKipcbiAqIEludmVydHMgdGhlIGltYWdlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gY2IgKG9wdGlvbmFsKSBhIGNhbGxiYWNrIGZvciB3aGVuIGNvbXBsZXRlXG4gKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICovXG5leHBvcnQgZGVmYXVsdCAoKCkgPT4gKHtcbiAgaW52ZXJ0KGNiKSB7XG4gICAgdGhpcy5zY2FuUXVpZXQoMCwgMCwgdGhpcy5iaXRtYXAud2lkdGgsIHRoaXMuYml0bWFwLmhlaWdodCwgZnVuY3Rpb24gKHgsIHksIGlkeCkge1xuICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHhdID0gMjU1IC0gdGhpcy5iaXRtYXAuZGF0YVtpZHhdO1xuICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAxXSA9IDI1NSAtIHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMV07XG4gICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDJdID0gMjU1IC0gdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAyXTtcbiAgICB9KTtcbiAgICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-invert/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-mask/es/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@jimp/plugin-mask/es/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Masks a source image on to this image using average pixel colour. A completely black pixel on the mask will turn a pixel in the image completely transparent.\n * @param {Jimp} src the source Jimp instance\n * @param {number} x the horizontal position to blit the image\n * @param {number} y the vertical position to blit the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  mask(src) {\n    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let cb = arguments.length > 3 ? arguments[3] : undefined;\n    if (!(src instanceof this.constructor)) {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"The source must be a Jimp image\", cb);\n    }\n    if (typeof x !== \"number\" || typeof y !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"x and y must be numbers\", cb);\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    const w = this.bitmap.width;\n    const h = this.bitmap.height;\n    const baseImage = this;\n    src.scanQuiet(0, 0, src.bitmap.width, src.bitmap.height, function (sx, sy, idx) {\n      const destX = x + sx;\n      const destY = y + sy;\n      if (destX >= 0 && destY >= 0 && destX < w && destY < h) {\n        const dstIdx = baseImage.getPixelIndex(destX, destY);\n        const {\n          data\n        } = this.bitmap;\n        const avg = (data[idx + 0] + data[idx + 1] + data[idx + 2]) / 3;\n        baseImage.bitmap.data[dstIdx + 3] *= avg / 255;\n      }\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tbWFzay9lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RDs7QUFFeEQ7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsdUJBQXVCO0FBQ2xDLGFBQWEsTUFBTTtBQUNuQjtBQUNBLGlFQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtREFBVTtBQUN2QjtBQUNBO0FBQ0EsYUFBYSxtREFBVTtBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsUUFBUSwwREFBYTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyxFQUFFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tbWFzay9lcy9pbmRleC5qcz9jOTNhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9kZVBhdHRlcm4sIHRocm93RXJyb3IgfSBmcm9tIFwiQGppbXAvdXRpbHNcIjtcblxuLyoqXG4gKiBNYXNrcyBhIHNvdXJjZSBpbWFnZSBvbiB0byB0aGlzIGltYWdlIHVzaW5nIGF2ZXJhZ2UgcGl4ZWwgY29sb3VyLiBBIGNvbXBsZXRlbHkgYmxhY2sgcGl4ZWwgb24gdGhlIG1hc2sgd2lsbCB0dXJuIGEgcGl4ZWwgaW4gdGhlIGltYWdlIGNvbXBsZXRlbHkgdHJhbnNwYXJlbnQuXG4gKiBAcGFyYW0ge0ppbXB9IHNyYyB0aGUgc291cmNlIEppbXAgaW5zdGFuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IHRoZSBob3Jpem9udGFsIHBvc2l0aW9uIHRvIGJsaXQgdGhlIGltYWdlXG4gKiBAcGFyYW0ge251bWJlcn0geSB0aGUgdmVydGljYWwgcG9zaXRpb24gdG8gYmxpdCB0aGUgaW1hZ2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gKi9cbmV4cG9ydCBkZWZhdWx0ICgoKSA9PiAoe1xuICBtYXNrKHNyYykge1xuICAgIGxldCB4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAgIGxldCB5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuICAgIGxldCBjYiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkO1xuICAgIGlmICghKHNyYyBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwiVGhlIHNvdXJjZSBtdXN0IGJlIGEgSmltcCBpbWFnZVwiLCBjYik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgeCAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgeSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIHRocm93RXJyb3IuY2FsbCh0aGlzLCBcInggYW5kIHkgbXVzdCBiZSBudW1iZXJzXCIsIGNiKTtcbiAgICB9XG5cbiAgICAvLyByb3VuZCBpbnB1dFxuICAgIHggPSBNYXRoLnJvdW5kKHgpO1xuICAgIHkgPSBNYXRoLnJvdW5kKHkpO1xuICAgIGNvbnN0IHcgPSB0aGlzLmJpdG1hcC53aWR0aDtcbiAgICBjb25zdCBoID0gdGhpcy5iaXRtYXAuaGVpZ2h0O1xuICAgIGNvbnN0IGJhc2VJbWFnZSA9IHRoaXM7XG4gICAgc3JjLnNjYW5RdWlldCgwLCAwLCBzcmMuYml0bWFwLndpZHRoLCBzcmMuYml0bWFwLmhlaWdodCwgZnVuY3Rpb24gKHN4LCBzeSwgaWR4KSB7XG4gICAgICBjb25zdCBkZXN0WCA9IHggKyBzeDtcbiAgICAgIGNvbnN0IGRlc3RZID0geSArIHN5O1xuICAgICAgaWYgKGRlc3RYID49IDAgJiYgZGVzdFkgPj0gMCAmJiBkZXN0WCA8IHcgJiYgZGVzdFkgPCBoKSB7XG4gICAgICAgIGNvbnN0IGRzdElkeCA9IGJhc2VJbWFnZS5nZXRQaXhlbEluZGV4KGRlc3RYLCBkZXN0WSk7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBkYXRhXG4gICAgICAgIH0gPSB0aGlzLmJpdG1hcDtcbiAgICAgICAgY29uc3QgYXZnID0gKGRhdGFbaWR4ICsgMF0gKyBkYXRhW2lkeCArIDFdICsgZGF0YVtpZHggKyAyXSkgLyAzO1xuICAgICAgICBiYXNlSW1hZ2UuYml0bWFwLmRhdGFbZHN0SWR4ICsgM10gKj0gYXZnIC8gMjU1O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpc05vZGVQYXR0ZXJuKGNiKSkge1xuICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-mask/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-normalize/es/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@jimp/plugin-normalize/es/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Get an image's histogram\n * @return {object} An object with an array of color occurrence counts for each channel (r,g,b)\n */\nfunction histogram() {\n  const histogram = {\n    r: new Array(256).fill(0),\n    g: new Array(256).fill(0),\n    b: new Array(256).fill(0)\n  };\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, index) {\n    histogram.r[this.bitmap.data[index + 0]]++;\n    histogram.g[this.bitmap.data[index + 1]]++;\n    histogram.b[this.bitmap.data[index + 2]]++;\n  });\n  return histogram;\n}\n\n/**\n * Normalize values\n * @param  {integer} value Pixel channel value.\n * @param  {integer} min   Minimum value for channel\n * @param  {integer} max   Maximum value for channel\n * @return {integer} normalized values\n */\nconst normalize = function (value, min, max) {\n  return (value - min) * 255 / (max - min);\n};\nconst getBounds = function (histogramChannel) {\n  return [histogramChannel.findIndex(value => value > 0), 255 - histogramChannel.slice().reverse().findIndex(value => value > 0)];\n};\n\n/**\n * Normalizes the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  normalize(cb) {\n    const h = histogram.call(this);\n\n    // store bounds (minimum and maximum values)\n    const bounds = {\n      r: getBounds(h.r),\n      g: getBounds(h.g),\n      b: getBounds(h.b)\n    };\n\n    // apply value transformations\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      const r = this.bitmap.data[idx + 0];\n      const g = this.bitmap.data[idx + 1];\n      const b = this.bitmap.data[idx + 2];\n      this.bitmap.data[idx + 0] = normalize(r, bounds.r[0], bounds.r[1]);\n      this.bitmap.data[idx + 1] = normalize(g, bounds.g[0], bounds.g[1]);\n      this.bitmap.data[idx + 2] = normalize(b, bounds.b[0], bounds.b[1]);\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tbm9ybWFsaXplL2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDOztBQUU1QztBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCLFlBQVksU0FBUztBQUNyQixZQUFZLFNBQVM7QUFDckIsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxhQUFhLE1BQU07QUFDbkI7QUFDQSxpRUFBZ0I7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxRQUFRLDBEQUFhO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLEVBQUU7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRuLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1ub3JtYWxpemUvZXMvaW5kZXguanM/MGU3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vZGVQYXR0ZXJuIH0gZnJvbSBcIkBqaW1wL3V0aWxzXCI7XG5cbi8qKlxuICogR2V0IGFuIGltYWdlJ3MgaGlzdG9ncmFtXG4gKiBAcmV0dXJuIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIGFuIGFycmF5IG9mIGNvbG9yIG9jY3VycmVuY2UgY291bnRzIGZvciBlYWNoIGNoYW5uZWwgKHIsZyxiKVxuICovXG5mdW5jdGlvbiBoaXN0b2dyYW0oKSB7XG4gIGNvbnN0IGhpc3RvZ3JhbSA9IHtcbiAgICByOiBuZXcgQXJyYXkoMjU2KS5maWxsKDApLFxuICAgIGc6IG5ldyBBcnJheSgyNTYpLmZpbGwoMCksXG4gICAgYjogbmV3IEFycmF5KDI1NikuZmlsbCgwKVxuICB9O1xuICB0aGlzLnNjYW5RdWlldCgwLCAwLCB0aGlzLmJpdG1hcC53aWR0aCwgdGhpcy5iaXRtYXAuaGVpZ2h0LCBmdW5jdGlvbiAoeCwgeSwgaW5kZXgpIHtcbiAgICBoaXN0b2dyYW0uclt0aGlzLmJpdG1hcC5kYXRhW2luZGV4ICsgMF1dKys7XG4gICAgaGlzdG9ncmFtLmdbdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDFdXSsrO1xuICAgIGhpc3RvZ3JhbS5iW3RoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAyXV0rKztcbiAgfSk7XG4gIHJldHVybiBoaXN0b2dyYW07XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHZhbHVlc1xuICogQHBhcmFtICB7aW50ZWdlcn0gdmFsdWUgUGl4ZWwgY2hhbm5lbCB2YWx1ZS5cbiAqIEBwYXJhbSAge2ludGVnZXJ9IG1pbiAgIE1pbmltdW0gdmFsdWUgZm9yIGNoYW5uZWxcbiAqIEBwYXJhbSAge2ludGVnZXJ9IG1heCAgIE1heGltdW0gdmFsdWUgZm9yIGNoYW5uZWxcbiAqIEByZXR1cm4ge2ludGVnZXJ9IG5vcm1hbGl6ZWQgdmFsdWVzXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgcmV0dXJuICh2YWx1ZSAtIG1pbikgKiAyNTUgLyAobWF4IC0gbWluKTtcbn07XG5jb25zdCBnZXRCb3VuZHMgPSBmdW5jdGlvbiAoaGlzdG9ncmFtQ2hhbm5lbCkge1xuICByZXR1cm4gW2hpc3RvZ3JhbUNoYW5uZWwuZmluZEluZGV4KHZhbHVlID0+IHZhbHVlID4gMCksIDI1NSAtIGhpc3RvZ3JhbUNoYW5uZWwuc2xpY2UoKS5yZXZlcnNlKCkuZmluZEluZGV4KHZhbHVlID0+IHZhbHVlID4gMCldO1xufTtcblxuLyoqXG4gKiBOb3JtYWxpemVzIHRoZSBpbWFnZVxuICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgSmltcCl9IGNiIChvcHRpb25hbCkgYSBjYWxsYmFjayBmb3Igd2hlbiBjb21wbGV0ZVxuICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgKCgpID0+ICh7XG4gIG5vcm1hbGl6ZShjYikge1xuICAgIGNvbnN0IGggPSBoaXN0b2dyYW0uY2FsbCh0aGlzKTtcblxuICAgIC8vIHN0b3JlIGJvdW5kcyAobWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZXMpXG4gICAgY29uc3QgYm91bmRzID0ge1xuICAgICAgcjogZ2V0Qm91bmRzKGguciksXG4gICAgICBnOiBnZXRCb3VuZHMoaC5nKSxcbiAgICAgIGI6IGdldEJvdW5kcyhoLmIpXG4gICAgfTtcblxuICAgIC8vIGFwcGx5IHZhbHVlIHRyYW5zZm9ybWF0aW9uc1xuICAgIHRoaXMuc2NhblF1aWV0KDAsIDAsIHRoaXMuYml0bWFwLndpZHRoLCB0aGlzLmJpdG1hcC5oZWlnaHQsIGZ1bmN0aW9uICh4LCB5LCBpZHgpIHtcbiAgICAgIGNvbnN0IHIgPSB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDBdO1xuICAgICAgY29uc3QgZyA9IHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMV07XG4gICAgICBjb25zdCBiID0gdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAyXTtcbiAgICAgIHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMF0gPSBub3JtYWxpemUociwgYm91bmRzLnJbMF0sIGJvdW5kcy5yWzFdKTtcbiAgICAgIHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMV0gPSBub3JtYWxpemUoZywgYm91bmRzLmdbMF0sIGJvdW5kcy5nWzFdKTtcbiAgICAgIHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMl0gPSBub3JtYWxpemUoYiwgYm91bmRzLmJbMF0sIGJvdW5kcy5iWzFdKTtcbiAgICB9KTtcbiAgICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-normalize/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-print/es/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@jimp/plugin-print/es/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var load_bmfont__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! load-bmfont */ \"(action-browser)/./node_modules/load-bmfont/index.js\");\n/* harmony import */ var load_bmfont__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(load_bmfont__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n/* harmony import */ var _measure_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./measure-text */ \"(action-browser)/./node_modules/@jimp/plugin-print/es/measure-text.js\");\n\n\n\n\nfunction xOffsetBasedOnAlignment(constants, font, line, maxWidth, alignment) {\n  if (alignment === constants.HORIZONTAL_ALIGN_LEFT) {\n    return 0;\n  }\n  if (alignment === constants.HORIZONTAL_ALIGN_CENTER) {\n    return (maxWidth - (0,_measure_text__WEBPACK_IMPORTED_MODULE_3__.measureText)(font, line)) / 2;\n  }\n  return maxWidth - (0,_measure_text__WEBPACK_IMPORTED_MODULE_3__.measureText)(font, line);\n}\nfunction drawCharacter(image, font, x, y, char) {\n  if (char.width > 0 && char.height > 0) {\n    const characterPage = font.pages[char.page];\n    image.blit(characterPage, x + char.xoffset, y + char.yoffset, char.x, char.y, char.width, char.height);\n  }\n  return image;\n}\nfunction printText(font, x, y, text, defaultCharWidth) {\n  for (let i = 0; i < text.length; i++) {\n    let char;\n    if (font.chars[text[i]]) {\n      char = text[i];\n    } else if (/\\s/.test(text[i])) {\n      char = \"\";\n    } else {\n      char = \"?\";\n    }\n    const fontChar = font.chars[char] || {};\n    const fontKerning = font.kernings[char];\n    drawCharacter(this, font, x, y, fontChar || {});\n    const kerning = fontKerning && fontKerning[text[i + 1]] ? fontKerning[text[i + 1]] : 0;\n    x += kerning + (fontChar.xadvance || defaultCharWidth);\n  }\n}\nfunction loadPages(Jimp, dir, pages) {\n  const newPages = pages.map(page => {\n    return Jimp.read(dir + \"/\" + page);\n  });\n  return Promise.all(newPages);\n}\nconst dir = process.env.DIRNAME || `${__dirname}/../`;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  constants: {\n    measureText: _measure_text__WEBPACK_IMPORTED_MODULE_3__.measureText,\n    measureTextHeight: _measure_text__WEBPACK_IMPORTED_MODULE_3__.measureTextHeight,\n    FONT_SANS_8_BLACK: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-8-black/open-sans-8-black.fnt\"),\n    FONT_SANS_10_BLACK: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-10-black/open-sans-10-black.fnt\"),\n    FONT_SANS_12_BLACK: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-12-black/open-sans-12-black.fnt\"),\n    FONT_SANS_14_BLACK: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-14-black/open-sans-14-black.fnt\"),\n    FONT_SANS_16_BLACK: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-16-black/open-sans-16-black.fnt\"),\n    FONT_SANS_32_BLACK: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-32-black/open-sans-32-black.fnt\"),\n    FONT_SANS_64_BLACK: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-64-black/open-sans-64-black.fnt\"),\n    FONT_SANS_128_BLACK: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-128-black/open-sans-128-black.fnt\"),\n    FONT_SANS_8_WHITE: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-8-white/open-sans-8-white.fnt\"),\n    FONT_SANS_16_WHITE: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-16-white/open-sans-16-white.fnt\"),\n    FONT_SANS_32_WHITE: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-32-white/open-sans-32-white.fnt\"),\n    FONT_SANS_64_WHITE: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-64-white/open-sans-64-white.fnt\"),\n    FONT_SANS_128_WHITE: path__WEBPACK_IMPORTED_MODULE_0___default().join(dir, \"fonts/open-sans/open-sans-128-white/open-sans-128-white.fnt\"),\n    /**\n     * Loads a bitmap font from a file\n     * @param {string} file the file path of a .fnt file\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the font is loaded\n     * @returns {Promise} a promise\n     */\n    loadFont(file, cb) {\n      if (typeof file !== \"string\") return _jimp_utils__WEBPACK_IMPORTED_MODULE_2__.throwError.call(this, \"file must be a string\", cb);\n      return new Promise((resolve, reject) => {\n        cb = cb || function (err, font) {\n          if (err) reject(err);else resolve(font);\n        };\n        load_bmfont__WEBPACK_IMPORTED_MODULE_1___default()(file, (err, font) => {\n          const chars = {};\n          const kernings = {};\n          if (err) {\n            return _jimp_utils__WEBPACK_IMPORTED_MODULE_2__.throwError.call(this, err, cb);\n          }\n          for (let i = 0; i < font.chars.length; i++) {\n            chars[String.fromCharCode(font.chars[i].id)] = font.chars[i];\n          }\n          for (let i = 0; i < font.kernings.length; i++) {\n            const firstString = String.fromCharCode(font.kernings[i].first);\n            kernings[firstString] = kernings[firstString] || {};\n            kernings[firstString][String.fromCharCode(font.kernings[i].second)] = font.kernings[i].amount;\n          }\n          loadPages(this, path__WEBPACK_IMPORTED_MODULE_0___default().dirname(file), font.pages).then(pages => {\n            cb(null, {\n              chars,\n              kernings,\n              pages,\n              common: font.common,\n              info: font.info\n            });\n          });\n        });\n      });\n    }\n  },\n  class: {\n    /**\n     * Draws a text on a image on a given boundary\n     * @param {Jimp} font a bitmap font loaded from `Jimp.loadFont` command\n     * @param {number} x the x position to start drawing the text\n     * @param {number} y the y position to start drawing the text\n     * @param {any} text the text to draw (string or object with `text`, `alignmentX`, and/or `alignmentY`)\n     * @param {number} maxWidth (optional) the boundary width to draw in\n     * @param {number} maxHeight (optional) the boundary height to draw in\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the text is written\n     * @returns {Jimp} this for chaining of methods\n     */\n    print(font, x, y, text, maxWidth, maxHeight, cb) {\n      if (typeof maxWidth === \"function\" && typeof cb === \"undefined\") {\n        cb = maxWidth;\n        maxWidth = Infinity;\n      }\n      if (typeof maxWidth === \"undefined\") {\n        maxWidth = Infinity;\n      }\n      if (typeof maxHeight === \"function\" && typeof cb === \"undefined\") {\n        cb = maxHeight;\n        maxHeight = Infinity;\n      }\n      if (typeof maxHeight === \"undefined\") {\n        maxHeight = Infinity;\n      }\n      if (typeof font !== \"object\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_2__.throwError.call(this, \"font must be a Jimp loadFont\", cb);\n      }\n      if (typeof x !== \"number\" || typeof y !== \"number\" || typeof maxWidth !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_2__.throwError.call(this, \"x, y and maxWidth must be numbers\", cb);\n      }\n      if (typeof maxWidth !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_2__.throwError.call(this, \"maxWidth must be a number\", cb);\n      }\n      if (typeof maxHeight !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_2__.throwError.call(this, \"maxHeight must be a number\", cb);\n      }\n      let alignmentX;\n      let alignmentY;\n      if (typeof text === \"object\" && text.text !== null && text.text !== undefined) {\n        alignmentX = text.alignmentX || this.constructor.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = text.alignmentY || this.constructor.VERTICAL_ALIGN_TOP;\n        ({\n          text\n        } = text);\n      } else {\n        alignmentX = this.constructor.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = this.constructor.VERTICAL_ALIGN_TOP;\n        text = text.toString();\n      }\n      if (maxHeight !== Infinity && alignmentY === this.constructor.VERTICAL_ALIGN_BOTTOM) {\n        y += maxHeight - (0,_measure_text__WEBPACK_IMPORTED_MODULE_3__.measureTextHeight)(font, text, maxWidth);\n      } else if (maxHeight !== Infinity && alignmentY === this.constructor.VERTICAL_ALIGN_MIDDLE) {\n        y += maxHeight / 2 - (0,_measure_text__WEBPACK_IMPORTED_MODULE_3__.measureTextHeight)(font, text, maxWidth) / 2;\n      }\n      const defaultCharWidth = Object.entries(font.chars)[0][1].xadvance;\n      const {\n        lines,\n        longestLine\n      } = (0,_measure_text__WEBPACK_IMPORTED_MODULE_3__.splitLines)(font, text, maxWidth);\n      lines.forEach(line => {\n        const lineString = line.join(\" \");\n        const alignmentWidth = xOffsetBasedOnAlignment(this.constructor, font, lineString, maxWidth, alignmentX);\n        printText.call(this, font, x + alignmentWidth, y, lineString, defaultCharWidth);\n        y += font.common.lineHeight;\n      });\n      if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_2__.isNodePattern)(cb)) {\n        cb.call(this, null, this, {\n          x: x + longestLine,\n          y\n        });\n      }\n      return this;\n    }\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-print/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-print/es/measure-text.js":
/*!************************************************************!*\
  !*** ./node_modules/@jimp/plugin-print/es/measure-text.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   measureText: () => (/* binding */ measureText),\n/* harmony export */   measureTextHeight: () => (/* binding */ measureTextHeight),\n/* harmony export */   splitLines: () => (/* binding */ splitLines)\n/* harmony export */ });\nfunction measureText(font, text) {\n  let x = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (font.chars[text[i]]) {\n      const kerning = font.kernings[text[i]] && font.kernings[text[i]][text[i + 1]] ? font.kernings[text[i]][text[i + 1]] : 0;\n      x += (font.chars[text[i]].xadvance || 0) + kerning;\n    }\n  }\n  return x;\n}\nfunction splitLines(font, text, maxWidth) {\n  const words = text.replace(/[\\r\\n]+/g, \" \\n\").split(\" \");\n  const lines = [];\n  let currentLine = [];\n  let longestLine = 0;\n  words.forEach(word => {\n    const line = [...currentLine, word].join(\" \");\n    const length = measureText(font, line);\n    if (length <= maxWidth && !word.includes(\"\\n\")) {\n      if (length > longestLine) {\n        longestLine = length;\n      }\n      currentLine.push(word);\n    } else {\n      lines.push(currentLine);\n      currentLine = [word.replace(\"\\n\", \"\")];\n    }\n  });\n  lines.push(currentLine);\n  return {\n    lines,\n    longestLine\n  };\n}\nfunction measureTextHeight(font, text, maxWidth) {\n  const {\n    lines\n  } = splitLines(font, text, maxWidth);\n  return lines.length * font.common.lineHeight;\n}\n//# sourceMappingURL=measure-text.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tcHJpbnQvZXMvbWVhc3VyZS10ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFPO0FBQ1A7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tcHJpbnQvZXMvbWVhc3VyZS10ZXh0LmpzP2JlMTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIG1lYXN1cmVUZXh0KGZvbnQsIHRleHQpIHtcbiAgbGV0IHggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZm9udC5jaGFyc1t0ZXh0W2ldXSkge1xuICAgICAgY29uc3Qga2VybmluZyA9IGZvbnQua2VybmluZ3NbdGV4dFtpXV0gJiYgZm9udC5rZXJuaW5nc1t0ZXh0W2ldXVt0ZXh0W2kgKyAxXV0gPyBmb250Lmtlcm5pbmdzW3RleHRbaV1dW3RleHRbaSArIDFdXSA6IDA7XG4gICAgICB4ICs9IChmb250LmNoYXJzW3RleHRbaV1dLnhhZHZhbmNlIHx8IDApICsga2VybmluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHg7XG59XG5leHBvcnQgZnVuY3Rpb24gc3BsaXRMaW5lcyhmb250LCB0ZXh0LCBtYXhXaWR0aCkge1xuICBjb25zdCB3b3JkcyA9IHRleHQucmVwbGFjZSgvW1xcclxcbl0rL2csIFwiIFxcblwiKS5zcGxpdChcIiBcIik7XG4gIGNvbnN0IGxpbmVzID0gW107XG4gIGxldCBjdXJyZW50TGluZSA9IFtdO1xuICBsZXQgbG9uZ2VzdExpbmUgPSAwO1xuICB3b3Jkcy5mb3JFYWNoKHdvcmQgPT4ge1xuICAgIGNvbnN0IGxpbmUgPSBbLi4uY3VycmVudExpbmUsIHdvcmRdLmpvaW4oXCIgXCIpO1xuICAgIGNvbnN0IGxlbmd0aCA9IG1lYXN1cmVUZXh0KGZvbnQsIGxpbmUpO1xuICAgIGlmIChsZW5ndGggPD0gbWF4V2lkdGggJiYgIXdvcmQuaW5jbHVkZXMoXCJcXG5cIikpIHtcbiAgICAgIGlmIChsZW5ndGggPiBsb25nZXN0TGluZSkge1xuICAgICAgICBsb25nZXN0TGluZSA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRMaW5lLnB1c2god29yZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmVzLnB1c2goY3VycmVudExpbmUpO1xuICAgICAgY3VycmVudExpbmUgPSBbd29yZC5yZXBsYWNlKFwiXFxuXCIsIFwiXCIpXTtcbiAgICB9XG4gIH0pO1xuICBsaW5lcy5wdXNoKGN1cnJlbnRMaW5lKTtcbiAgcmV0dXJuIHtcbiAgICBsaW5lcyxcbiAgICBsb25nZXN0TGluZVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1lYXN1cmVUZXh0SGVpZ2h0KGZvbnQsIHRleHQsIG1heFdpZHRoKSB7XG4gIGNvbnN0IHtcbiAgICBsaW5lc1xuICB9ID0gc3BsaXRMaW5lcyhmb250LCB0ZXh0LCBtYXhXaWR0aCk7XG4gIHJldHVybiBsaW5lcy5sZW5ndGggKiBmb250LmNvbW1vbi5saW5lSGVpZ2h0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVhc3VyZS10ZXh0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-print/es/measure-text.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-resize/es/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@jimp/plugin-resize/es/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n/* harmony import */ var _modules_resize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/resize */ \"(action-browser)/./node_modules/@jimp/plugin-resize/es/modules/resize.js\");\n/* harmony import */ var _modules_resize2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/resize2 */ \"(action-browser)/./node_modules/@jimp/plugin-resize/es/modules/resize2.js\");\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  constants: {\n    RESIZE_NEAREST_NEIGHBOR: \"nearestNeighbor\",\n    RESIZE_BILINEAR: \"bilinearInterpolation\",\n    RESIZE_BICUBIC: \"bicubicInterpolation\",\n    RESIZE_HERMITE: \"hermiteInterpolation\",\n    RESIZE_BEZIER: \"bezierInterpolation\"\n  },\n  class: {\n    /**\n     * Resizes the image to a set width and height using a 2-pass bilinear algorithm\n     * @param {number} w the width to resize the image to (or Jimp.AUTO)\n     * @param {number} h the height to resize the image to (or Jimp.AUTO)\n     * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    resize(w, h, mode, cb) {\n      if (typeof w !== \"number\" || typeof h !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"w and h must be numbers\", cb);\n      }\n      if (typeof mode === \"function\" && typeof cb === \"undefined\") {\n        cb = mode;\n        mode = null;\n      }\n      if (w === this.constructor.AUTO && h === this.constructor.AUTO) {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"w and h cannot both be set to auto\", cb);\n      }\n      if (w === this.constructor.AUTO) {\n        w = this.bitmap.width * (h / this.bitmap.height);\n      }\n      if (h === this.constructor.AUTO) {\n        h = this.bitmap.height * (w / this.bitmap.width);\n      }\n      if (w < 0 || h < 0) {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"w and h must be positive numbers\", cb);\n      }\n\n      // round inputs\n      w = Math.round(w) || 1;\n      h = Math.round(h) || 1;\n      if (typeof _modules_resize2__WEBPACK_IMPORTED_MODULE_2__[\"default\"][mode] === \"function\") {\n        const dst = {\n          data: Buffer.alloc(w * h * 4),\n          width: w,\n          height: h\n        };\n        _modules_resize2__WEBPACK_IMPORTED_MODULE_2__[\"default\"][mode](this.bitmap, dst);\n        this.bitmap = dst;\n      } else {\n        const image = this;\n        const resize = new _modules_resize__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.bitmap.width, this.bitmap.height, w, h, true, true, buffer => {\n          image.bitmap.data = Buffer.from(buffer);\n          image.bitmap.width = w;\n          image.bitmap.height = h;\n        });\n        resize.resize(this.bitmap.data);\n      }\n      if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    }\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tcmVzaXplL2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0Q7QUFDbEI7QUFDRTtBQUN4QyxpRUFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsdUJBQXVCO0FBQ3RDLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbURBQVU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtREFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtREFBVTtBQUN6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsd0RBQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0RBQU87QUFDZjtBQUNBLFFBQVE7QUFDUjtBQUNBLDJCQUEyQix1REFBTTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFVBQVUsMERBQWE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyxFQUFFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tcmVzaXplL2VzL2luZGV4LmpzPzU5OGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGhyb3dFcnJvciwgaXNOb2RlUGF0dGVybiB9IGZyb20gXCJAamltcC91dGlsc1wiO1xuaW1wb3J0IFJlc2l6ZSBmcm9tIFwiLi9tb2R1bGVzL3Jlc2l6ZVwiO1xuaW1wb3J0IFJlc2l6ZTIgZnJvbSBcIi4vbW9kdWxlcy9yZXNpemUyXCI7XG5leHBvcnQgZGVmYXVsdCAoKCkgPT4gKHtcbiAgY29uc3RhbnRzOiB7XG4gICAgUkVTSVpFX05FQVJFU1RfTkVJR0hCT1I6IFwibmVhcmVzdE5laWdoYm9yXCIsXG4gICAgUkVTSVpFX0JJTElORUFSOiBcImJpbGluZWFySW50ZXJwb2xhdGlvblwiLFxuICAgIFJFU0laRV9CSUNVQklDOiBcImJpY3ViaWNJbnRlcnBvbGF0aW9uXCIsXG4gICAgUkVTSVpFX0hFUk1JVEU6IFwiaGVybWl0ZUludGVycG9sYXRpb25cIixcbiAgICBSRVNJWkVfQkVaSUVSOiBcImJlemllckludGVycG9sYXRpb25cIlxuICB9LFxuICBjbGFzczoge1xuICAgIC8qKlxuICAgICAqIFJlc2l6ZXMgdGhlIGltYWdlIHRvIGEgc2V0IHdpZHRoIGFuZCBoZWlnaHQgdXNpbmcgYSAyLXBhc3MgYmlsaW5lYXIgYWxnb3JpdGhtXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHcgdGhlIHdpZHRoIHRvIHJlc2l6ZSB0aGUgaW1hZ2UgdG8gKG9yIEppbXAuQVVUTylcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaCB0aGUgaGVpZ2h0IHRvIHJlc2l6ZSB0aGUgaW1hZ2UgdG8gKG9yIEppbXAuQVVUTylcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZSAob3B0aW9uYWwpIGEgc2NhbGluZyBtZXRob2QgKGUuZy4gSmltcC5SRVNJWkVfQkVaSUVSKVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAgICAgKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICAgICAqL1xuICAgIHJlc2l6ZSh3LCBoLCBtb2RlLCBjYikge1xuICAgICAgaWYgKHR5cGVvZiB3ICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiBoICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yLmNhbGwodGhpcywgXCJ3IGFuZCBoIG11c3QgYmUgbnVtYmVyc1wiLCBjYik7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG1vZGUgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgY2IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY2IgPSBtb2RlO1xuICAgICAgICBtb2RlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICh3ID09PSB0aGlzLmNvbnN0cnVjdG9yLkFVVE8gJiYgaCA9PT0gdGhpcy5jb25zdHJ1Y3Rvci5BVVRPKSB7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yLmNhbGwodGhpcywgXCJ3IGFuZCBoIGNhbm5vdCBib3RoIGJlIHNldCB0byBhdXRvXCIsIGNiKTtcbiAgICAgIH1cbiAgICAgIGlmICh3ID09PSB0aGlzLmNvbnN0cnVjdG9yLkFVVE8pIHtcbiAgICAgICAgdyA9IHRoaXMuYml0bWFwLndpZHRoICogKGggLyB0aGlzLmJpdG1hcC5oZWlnaHQpO1xuICAgICAgfVxuICAgICAgaWYgKGggPT09IHRoaXMuY29uc3RydWN0b3IuQVVUTykge1xuICAgICAgICBoID0gdGhpcy5iaXRtYXAuaGVpZ2h0ICogKHcgLyB0aGlzLmJpdG1hcC53aWR0aCk7XG4gICAgICB9XG4gICAgICBpZiAodyA8IDAgfHwgaCA8IDApIHtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IuY2FsbCh0aGlzLCBcIncgYW5kIGggbXVzdCBiZSBwb3NpdGl2ZSBudW1iZXJzXCIsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLy8gcm91bmQgaW5wdXRzXG4gICAgICB3ID0gTWF0aC5yb3VuZCh3KSB8fCAxO1xuICAgICAgaCA9IE1hdGgucm91bmQoaCkgfHwgMTtcbiAgICAgIGlmICh0eXBlb2YgUmVzaXplMlttb2RlXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNvbnN0IGRzdCA9IHtcbiAgICAgICAgICBkYXRhOiBCdWZmZXIuYWxsb2ModyAqIGggKiA0KSxcbiAgICAgICAgICB3aWR0aDogdyxcbiAgICAgICAgICBoZWlnaHQ6IGhcbiAgICAgICAgfTtcbiAgICAgICAgUmVzaXplMlttb2RlXSh0aGlzLmJpdG1hcCwgZHN0KTtcbiAgICAgICAgdGhpcy5iaXRtYXAgPSBkc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBpbWFnZSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJlc2l6ZSA9IG5ldyBSZXNpemUodGhpcy5iaXRtYXAud2lkdGgsIHRoaXMuYml0bWFwLmhlaWdodCwgdywgaCwgdHJ1ZSwgdHJ1ZSwgYnVmZmVyID0+IHtcbiAgICAgICAgICBpbWFnZS5iaXRtYXAuZGF0YSA9IEJ1ZmZlci5mcm9tKGJ1ZmZlcik7XG4gICAgICAgICAgaW1hZ2UuYml0bWFwLndpZHRoID0gdztcbiAgICAgICAgICBpbWFnZS5iaXRtYXAuaGVpZ2h0ID0gaDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc2l6ZS5yZXNpemUodGhpcy5iaXRtYXAuZGF0YSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxufSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-resize/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-resize/es/modules/resize.js":
/*!***************************************************************!*\
  !*** ./node_modules/@jimp/plugin-resize/es/modules/resize.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// JavaScript Image Resizer (c) 2012 - Grant Galitz\n// Released to public domain 29 July 2013: https://github.com/grantgalitz/JS-Image-Resizer/issues/4\n\nfunction Resize(widthOriginal, heightOriginal, targetWidth, targetHeight, blendAlpha, interpolationPass, resizeCallback) {\n  this.widthOriginal = Math.abs(Math.floor(widthOriginal) || 0);\n  this.heightOriginal = Math.abs(Math.floor(heightOriginal) || 0);\n  this.targetWidth = Math.abs(Math.floor(targetWidth) || 0);\n  this.targetHeight = Math.abs(Math.floor(targetHeight) || 0);\n  this.colorChannels = blendAlpha ? 4 : 3;\n  this.interpolationPass = Boolean(interpolationPass);\n  this.resizeCallback = typeof resizeCallback === \"function\" ? resizeCallback : function () {};\n  this.targetWidthMultipliedByChannels = this.targetWidth * this.colorChannels;\n  this.originalWidthMultipliedByChannels = this.widthOriginal * this.colorChannels;\n  this.originalHeightMultipliedByChannels = this.heightOriginal * this.colorChannels;\n  this.widthPassResultSize = this.targetWidthMultipliedByChannels * this.heightOriginal;\n  this.finalResultSize = this.targetWidthMultipliedByChannels * this.targetHeight;\n  this.initialize();\n}\nResize.prototype.initialize = function () {\n  // Perform some checks:\n  if (this.widthOriginal > 0 && this.heightOriginal > 0 && this.targetWidth > 0 && this.targetHeight > 0) {\n    this.configurePasses();\n  } else {\n    throw new Error(\"Invalid settings specified for the resizer.\");\n  }\n};\nResize.prototype.configurePasses = function () {\n  if (this.widthOriginal === this.targetWidth) {\n    // Bypass the width resizer pass:\n    this.resizeWidth = this.bypassResizer;\n  } else {\n    // Setup the width resizer pass:\n    this.ratioWeightWidthPass = this.widthOriginal / this.targetWidth;\n    if (this.ratioWeightWidthPass < 1 && this.interpolationPass) {\n      this.initializeFirstPassBuffers(true);\n      this.resizeWidth = this.colorChannels === 4 ? this.resizeWidthInterpolatedRGBA : this.resizeWidthInterpolatedRGB;\n    } else {\n      this.initializeFirstPassBuffers(false);\n      this.resizeWidth = this.colorChannels === 4 ? this.resizeWidthRGBA : this.resizeWidthRGB;\n    }\n  }\n  if (this.heightOriginal === this.targetHeight) {\n    // Bypass the height resizer pass:\n    this.resizeHeight = this.bypassResizer;\n  } else {\n    // Setup the height resizer pass:\n    this.ratioWeightHeightPass = this.heightOriginal / this.targetHeight;\n    if (this.ratioWeightHeightPass < 1 && this.interpolationPass) {\n      this.initializeSecondPassBuffers(true);\n      this.resizeHeight = this.resizeHeightInterpolated;\n    } else {\n      this.initializeSecondPassBuffers(false);\n      this.resizeHeight = this.colorChannels === 4 ? this.resizeHeightRGBA : this.resizeHeightRGB;\n    }\n  }\n};\nResize.prototype._resizeWidthInterpolatedRGBChannels = function (buffer, fourthChannel) {\n  const channelsNum = fourthChannel ? 4 : 3;\n  const ratioWeight = this.ratioWeightWidthPass;\n  const outputBuffer = this.widthBuffer;\n  let weight = 0;\n  let finalOffset = 0;\n  let pixelOffset = 0;\n  let firstWeight = 0;\n  let secondWeight = 0;\n  let targetPosition;\n\n  // Handle for only one interpolation input being valid for start calculation:\n  for (targetPosition = 0; weight < 1 / 3; targetPosition += channelsNum, weight += ratioWeight) {\n    for (finalOffset = targetPosition, pixelOffset = 0; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n      outputBuffer[finalOffset] = buffer[pixelOffset];\n      outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n      outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n      if (fourthChannel) outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n    }\n  }\n\n  // Adjust for overshoot of the last pass's counter:\n  weight -= 1 / 3;\n  let interpolationWidthSourceReadStop;\n  for (interpolationWidthSourceReadStop = this.widthOriginal - 1; weight < interpolationWidthSourceReadStop; targetPosition += channelsNum, weight += ratioWeight) {\n    // Calculate weightings:\n    secondWeight = weight % 1;\n    firstWeight = 1 - secondWeight;\n    // Interpolate:\n    for (finalOffset = targetPosition, pixelOffset = Math.floor(weight) * channelsNum; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n      outputBuffer[finalOffset + 0] = buffer[pixelOffset + 0] * firstWeight + buffer[pixelOffset + channelsNum + 0] * secondWeight;\n      outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1] * firstWeight + buffer[pixelOffset + channelsNum + 1] * secondWeight;\n      outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2] * firstWeight + buffer[pixelOffset + channelsNum + 2] * secondWeight;\n      if (fourthChannel) outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3] * firstWeight + buffer[pixelOffset + channelsNum + 3] * secondWeight;\n    }\n  }\n\n  // Handle for only one interpolation input being valid for end calculation:\n  for (interpolationWidthSourceReadStop = this.originalWidthMultipliedByChannels - channelsNum; targetPosition < this.targetWidthMultipliedByChannels; targetPosition += channelsNum) {\n    for (finalOffset = targetPosition, pixelOffset = interpolationWidthSourceReadStop; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n      outputBuffer[finalOffset] = buffer[pixelOffset];\n      outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n      outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n      if (fourthChannel) outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n    }\n  }\n  return outputBuffer;\n};\nResize.prototype._resizeWidthRGBChannels = function (buffer, fourthChannel) {\n  const channelsNum = fourthChannel ? 4 : 3;\n  const ratioWeight = this.ratioWeightWidthPass;\n  const ratioWeightDivisor = 1 / ratioWeight;\n  const nextLineOffsetOriginalWidth = this.originalWidthMultipliedByChannels - channelsNum + 1;\n  const nextLineOffsetTargetWidth = this.targetWidthMultipliedByChannels - channelsNum + 1;\n  const output = this.outputWidthWorkBench;\n  const outputBuffer = this.widthBuffer;\n  const trustworthyColorsCount = this.outputWidthWorkBenchOpaquePixelsCount;\n  let weight = 0;\n  let amountToNext = 0;\n  let actualPosition = 0;\n  let currentPosition = 0;\n  let line = 0;\n  let pixelOffset = 0;\n  let outputOffset = 0;\n  let multiplier = 1;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  let a = 0;\n  do {\n    for (line = 0; line < this.originalHeightMultipliedByChannels;) {\n      output[line++] = 0;\n      output[line++] = 0;\n      output[line++] = 0;\n      if (fourthChannel) {\n        output[line++] = 0;\n        trustworthyColorsCount[line / channelsNum - 1] = 0;\n      }\n    }\n    weight = ratioWeight;\n    do {\n      amountToNext = 1 + actualPosition - currentPosition;\n      multiplier = Math.min(weight, amountToNext);\n      for (line = 0, pixelOffset = actualPosition; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetOriginalWidth) {\n        r = buffer[pixelOffset];\n        g = buffer[++pixelOffset];\n        b = buffer[++pixelOffset];\n        a = fourthChannel ? buffer[++pixelOffset] : 255;\n        // Ignore RGB values if pixel is completely transparent\n        output[line++] += (a ? r : 0) * multiplier;\n        output[line++] += (a ? g : 0) * multiplier;\n        output[line++] += (a ? b : 0) * multiplier;\n        if (fourthChannel) {\n          output[line++] += a * multiplier;\n          trustworthyColorsCount[line / channelsNum - 1] += a ? multiplier : 0;\n        }\n      }\n      if (weight >= amountToNext) {\n        actualPosition += channelsNum;\n        currentPosition = actualPosition;\n        weight -= amountToNext;\n      } else {\n        currentPosition += weight;\n        break;\n      }\n    } while (weight > 0 && actualPosition < this.originalWidthMultipliedByChannels);\n    for (line = 0, pixelOffset = outputOffset; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetTargetWidth) {\n      weight = fourthChannel ? trustworthyColorsCount[line / channelsNum] : 1;\n      multiplier = fourthChannel ? weight ? 1 / weight : 0 : ratioWeightDivisor;\n      outputBuffer[pixelOffset] = output[line++] * multiplier;\n      outputBuffer[++pixelOffset] = output[line++] * multiplier;\n      outputBuffer[++pixelOffset] = output[line++] * multiplier;\n      if (fourthChannel) outputBuffer[++pixelOffset] = output[line++] * ratioWeightDivisor;\n    }\n    outputOffset += channelsNum;\n  } while (outputOffset < this.targetWidthMultipliedByChannels);\n  return outputBuffer;\n};\nResize.prototype._resizeHeightRGBChannels = function (buffer, fourthChannel) {\n  const ratioWeight = this.ratioWeightHeightPass;\n  const ratioWeightDivisor = 1 / ratioWeight;\n  const output = this.outputHeightWorkBench;\n  const outputBuffer = this.heightBuffer;\n  const trustworthyColorsCount = this.outputHeightWorkBenchOpaquePixelsCount;\n  let weight = 0;\n  let amountToNext = 0;\n  let actualPosition = 0;\n  let currentPosition = 0;\n  let pixelOffset = 0;\n  let outputOffset = 0;\n  let caret = 0;\n  let multiplier = 1;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  let a = 0;\n  do {\n    for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n      output[pixelOffset++] = 0;\n      output[pixelOffset++] = 0;\n      output[pixelOffset++] = 0;\n      if (fourthChannel) {\n        output[pixelOffset++] = 0;\n        trustworthyColorsCount[pixelOffset / 4 - 1] = 0;\n      }\n    }\n    weight = ratioWeight;\n    do {\n      amountToNext = 1 + actualPosition - currentPosition;\n      multiplier = Math.min(weight, amountToNext);\n      caret = actualPosition;\n      for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n        r = buffer[caret++];\n        g = buffer[caret++];\n        b = buffer[caret++];\n        a = fourthChannel ? buffer[caret++] : 255;\n        // Ignore RGB values if pixel is completely transparent\n        output[pixelOffset++] += (a ? r : 0) * multiplier;\n        output[pixelOffset++] += (a ? g : 0) * multiplier;\n        output[pixelOffset++] += (a ? b : 0) * multiplier;\n        if (fourthChannel) {\n          output[pixelOffset++] += a * multiplier;\n          trustworthyColorsCount[pixelOffset / 4 - 1] += a ? multiplier : 0;\n        }\n      }\n      if (weight >= amountToNext) {\n        actualPosition = caret;\n        currentPosition = actualPosition;\n        weight -= amountToNext;\n      } else {\n        currentPosition += weight;\n        break;\n      }\n    } while (weight > 0 && actualPosition < this.widthPassResultSize);\n    for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n      weight = fourthChannel ? trustworthyColorsCount[pixelOffset / 4] : 1;\n      multiplier = fourthChannel ? weight ? 1 / weight : 0 : ratioWeightDivisor;\n      outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * multiplier);\n      outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * multiplier);\n      outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * multiplier);\n      if (fourthChannel) {\n        outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n      }\n    }\n  } while (outputOffset < this.finalResultSize);\n  return outputBuffer;\n};\nResize.prototype.resizeWidthInterpolatedRGB = function (buffer) {\n  return this._resizeWidthInterpolatedRGBChannels(buffer, false);\n};\nResize.prototype.resizeWidthInterpolatedRGBA = function (buffer) {\n  return this._resizeWidthInterpolatedRGBChannels(buffer, true);\n};\nResize.prototype.resizeWidthRGB = function (buffer) {\n  return this._resizeWidthRGBChannels(buffer, false);\n};\nResize.prototype.resizeWidthRGBA = function (buffer) {\n  return this._resizeWidthRGBChannels(buffer, true);\n};\nResize.prototype.resizeHeightInterpolated = function (buffer) {\n  const ratioWeight = this.ratioWeightHeightPass;\n  const outputBuffer = this.heightBuffer;\n  let weight = 0;\n  let finalOffset = 0;\n  let pixelOffset = 0;\n  let pixelOffsetAccumulated = 0;\n  let pixelOffsetAccumulated2 = 0;\n  let firstWeight = 0;\n  let secondWeight = 0;\n  let interpolationHeightSourceReadStop;\n\n  // Handle for only one interpolation input being valid for start calculation:\n  for (; weight < 1 / 3; weight += ratioWeight) {\n    for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n      outputBuffer[finalOffset++] = Math.round(buffer[pixelOffset++]);\n    }\n  }\n\n  // Adjust for overshoot of the last pass's counter:\n  weight -= 1 / 3;\n  for (interpolationHeightSourceReadStop = this.heightOriginal - 1; weight < interpolationHeightSourceReadStop; weight += ratioWeight) {\n    // Calculate weightings:\n    secondWeight = weight % 1;\n    firstWeight = 1 - secondWeight;\n    // Interpolate:\n    pixelOffsetAccumulated = Math.floor(weight) * this.targetWidthMultipliedByChannels;\n    pixelOffsetAccumulated2 = pixelOffsetAccumulated + this.targetWidthMultipliedByChannels;\n    for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels; ++pixelOffset) {\n      outputBuffer[finalOffset++] = Math.round(buffer[pixelOffsetAccumulated++] * firstWeight + buffer[pixelOffsetAccumulated2++] * secondWeight);\n    }\n  }\n\n  // Handle for only one interpolation input being valid for end calculation:\n  while (finalOffset < this.finalResultSize) {\n    for (pixelOffset = 0, pixelOffsetAccumulated = interpolationHeightSourceReadStop * this.targetWidthMultipliedByChannels; pixelOffset < this.targetWidthMultipliedByChannels; ++pixelOffset) {\n      outputBuffer[finalOffset++] = Math.round(buffer[pixelOffsetAccumulated++]);\n    }\n  }\n  return outputBuffer;\n};\nResize.prototype.resizeHeightRGB = function (buffer) {\n  return this._resizeHeightRGBChannels(buffer, false);\n};\nResize.prototype.resizeHeightRGBA = function (buffer) {\n  return this._resizeHeightRGBChannels(buffer, true);\n};\nResize.prototype.resize = function (buffer) {\n  this.resizeCallback(this.resizeHeight(this.resizeWidth(buffer)));\n};\nResize.prototype.bypassResizer = function (buffer) {\n  // Just return the buffer passed:\n  return buffer;\n};\nResize.prototype.initializeFirstPassBuffers = function (BILINEARAlgo) {\n  // Initialize the internal width pass buffers:\n  this.widthBuffer = this.generateFloatBuffer(this.widthPassResultSize);\n  if (!BILINEARAlgo) {\n    this.outputWidthWorkBench = this.generateFloatBuffer(this.originalHeightMultipliedByChannels);\n    if (this.colorChannels > 3) {\n      this.outputWidthWorkBenchOpaquePixelsCount = this.generateFloat64Buffer(this.heightOriginal);\n    }\n  }\n};\nResize.prototype.initializeSecondPassBuffers = function (BILINEARAlgo) {\n  // Initialize the internal height pass buffers:\n  this.heightBuffer = this.generateUint8Buffer(this.finalResultSize);\n  if (!BILINEARAlgo) {\n    this.outputHeightWorkBench = this.generateFloatBuffer(this.targetWidthMultipliedByChannels);\n    if (this.colorChannels > 3) {\n      this.outputHeightWorkBenchOpaquePixelsCount = this.generateFloat64Buffer(this.targetWidth);\n    }\n  }\n};\nResize.prototype.generateFloatBuffer = function (bufferLength) {\n  // Generate a float32 typed array buffer:\n  try {\n    return new Float32Array(bufferLength);\n  } catch (error) {\n    return [];\n  }\n};\nResize.prototype.generateFloat64Buffer = function (bufferLength) {\n  // Generate a float64 typed array buffer:\n  try {\n    return new Float64Array(bufferLength);\n  } catch (error) {\n    return [];\n  }\n};\nResize.prototype.generateUint8Buffer = function (bufferLength) {\n  // Generate a uint8 typed array buffer:\n  try {\n    return new Uint8Array(bufferLength);\n  } catch (error) {\n    return [];\n  }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Resize);\n//# sourceMappingURL=resize.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-resize/es/modules/resize.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-resize/es/modules/resize2.js":
/*!****************************************************************!*\
  !*** ./node_modules/@jimp/plugin-resize/es/modules/resize2.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Copyright (c) 2015 Guyon Roche\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:</p>\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nconst operations = {\n  nearestNeighbor(src, dst) {\n    const wSrc = src.width;\n    const hSrc = src.height;\n    const wDst = dst.width;\n    const hDst = dst.height;\n    const bufSrc = src.data;\n    const bufDst = dst.data;\n    for (let i = 0; i < hDst; i++) {\n      for (let j = 0; j < wDst; j++) {\n        let posDst = (i * wDst + j) * 4;\n        const iSrc = Math.floor(i * hSrc / hDst);\n        const jSrc = Math.floor(j * wSrc / wDst);\n        let posSrc = (iSrc * wSrc + jSrc) * 4;\n        bufDst[posDst++] = bufSrc[posSrc++];\n        bufDst[posDst++] = bufSrc[posSrc++];\n        bufDst[posDst++] = bufSrc[posSrc++];\n        bufDst[posDst++] = bufSrc[posSrc++];\n      }\n    }\n  },\n  bilinearInterpolation(src, dst) {\n    const wSrc = src.width;\n    const hSrc = src.height;\n    const wDst = dst.width;\n    const hDst = dst.height;\n    const bufSrc = src.data;\n    const bufDst = dst.data;\n    const interpolate = function (k, kMin, vMin, kMax, vMax) {\n      // special case - k is integer\n      if (kMin === kMax) {\n        return vMin;\n      }\n      return Math.round((k - kMin) * vMax + (kMax - k) * vMin);\n    };\n    const assign = function (pos, offset, x, xMin, xMax, y, yMin, yMax) {\n      let posMin = (yMin * wSrc + xMin) * 4 + offset;\n      let posMax = (yMin * wSrc + xMax) * 4 + offset;\n      const vMin = interpolate(x, xMin, bufSrc[posMin], xMax, bufSrc[posMax]);\n\n      // special case, y is integer\n      if (yMax === yMin) {\n        bufDst[pos + offset] = vMin;\n      } else {\n        posMin = (yMax * wSrc + xMin) * 4 + offset;\n        posMax = (yMax * wSrc + xMax) * 4 + offset;\n        const vMax = interpolate(x, xMin, bufSrc[posMin], xMax, bufSrc[posMax]);\n        bufDst[pos + offset] = interpolate(y, yMin, vMin, yMax, vMax);\n      }\n    };\n    for (let i = 0; i < hDst; i++) {\n      for (let j = 0; j < wDst; j++) {\n        const posDst = (i * wDst + j) * 4;\n        // x & y in src coordinates\n        const x = j * wSrc / wDst;\n        const xMin = Math.floor(x);\n        const xMax = Math.min(Math.ceil(x), wSrc - 1);\n        const y = i * hSrc / hDst;\n        const yMin = Math.floor(y);\n        const yMax = Math.min(Math.ceil(y), hSrc - 1);\n        assign(posDst, 0, x, xMin, xMax, y, yMin, yMax);\n        assign(posDst, 1, x, xMin, xMax, y, yMin, yMax);\n        assign(posDst, 2, x, xMin, xMax, y, yMin, yMax);\n        assign(posDst, 3, x, xMin, xMax, y, yMin, yMax);\n      }\n    }\n  },\n  _interpolate2D(src, dst, options, interpolate) {\n    const bufSrc = src.data;\n    const bufDst = dst.data;\n    const wSrc = src.width;\n    const hSrc = src.height;\n    const wDst = dst.width;\n    const hDst = dst.height;\n\n    // when dst smaller than src/2, interpolate first to a multiple between 0.5 and 1.0 src, then sum squares\n    const wM = Math.max(1, Math.floor(wSrc / wDst));\n    const wDst2 = wDst * wM;\n    const hM = Math.max(1, Math.floor(hSrc / hDst));\n    const hDst2 = hDst * hM;\n\n    // ===========================================================\n    // Pass 1 - interpolate rows\n    // buf1 has width of dst2 and height of src\n    const buf1 = Buffer.alloc(wDst2 * hSrc * 4);\n    for (let i = 0; i < hSrc; i++) {\n      for (let j = 0; j < wDst2; j++) {\n        // i in src coords, j in dst coords\n\n        // calculate x in src coords\n        // this interpolation requires 4 sample points and the two inner ones must be real\n        // the outer points can be fudged for the edges.\n        // therefore (wSrc-1)/wDst2\n        const x = j * (wSrc - 1) / wDst2;\n        const xPos = Math.floor(x);\n        const t = x - xPos;\n        const srcPos = (i * wSrc + xPos) * 4;\n        const buf1Pos = (i * wDst2 + j) * 4;\n        for (let k = 0; k < 4; k++) {\n          const kPos = srcPos + k;\n          const x0 = xPos > 0 ? bufSrc[kPos - 4] : 2 * bufSrc[kPos] - bufSrc[kPos + 4];\n          const x1 = bufSrc[kPos];\n          const x2 = bufSrc[kPos + 4];\n          const x3 = xPos < wSrc - 2 ? bufSrc[kPos + 8] : 2 * bufSrc[kPos + 4] - bufSrc[kPos];\n          buf1[buf1Pos + k] = interpolate(x0, x1, x2, x3, t);\n        }\n      }\n    }\n    // this._writeFile(wDst2, hSrc, buf1, \"out/buf1.jpg\");\n\n    // ===========================================================\n    // Pass 2 - interpolate columns\n    // buf2 has width and height of dst2\n    const buf2 = Buffer.alloc(wDst2 * hDst2 * 4);\n    for (let i = 0; i < hDst2; i++) {\n      for (let j = 0; j < wDst2; j++) {\n        // i&j in dst2 coords\n\n        // calculate y in buf1 coords\n        // this interpolation requires 4 sample points and the two inner ones must be real\n        // the outer points can be fudged for the edges.\n        // therefore (hSrc-1)/hDst2\n        const y = i * (hSrc - 1) / hDst2;\n        const yPos = Math.floor(y);\n        const t = y - yPos;\n        const buf1Pos = (yPos * wDst2 + j) * 4;\n        const buf2Pos = (i * wDst2 + j) * 4;\n        for (let k = 0; k < 4; k++) {\n          const kPos = buf1Pos + k;\n          const y0 = yPos > 0 ? buf1[kPos - wDst2 * 4] : 2 * buf1[kPos] - buf1[kPos + wDst2 * 4];\n          const y1 = buf1[kPos];\n          const y2 = buf1[kPos + wDst2 * 4];\n          const y3 = yPos < hSrc - 2 ? buf1[kPos + wDst2 * 8] : 2 * buf1[kPos + wDst2 * 4] - buf1[kPos];\n          buf2[buf2Pos + k] = interpolate(y0, y1, y2, y3, t);\n        }\n      }\n    }\n    // this._writeFile(wDst2, hDst2, buf2, \"out/buf2.jpg\");\n\n    // ===========================================================\n    // Pass 3 - scale to dst\n    const m = wM * hM;\n    if (m > 1) {\n      for (let i = 0; i < hDst; i++) {\n        for (let j = 0; j < wDst; j++) {\n          // i&j in dst bounded coords\n          let r = 0;\n          let g = 0;\n          let b = 0;\n          let a = 0;\n          let realColors = 0;\n          for (let y = 0; y < hM; y++) {\n            const yPos = i * hM + y;\n            for (let x = 0; x < wM; x++) {\n              const xPos = j * wM + x;\n              const xyPos = (yPos * wDst2 + xPos) * 4;\n              const pixelAlpha = buf2[xyPos + 3];\n              if (pixelAlpha) {\n                r += buf2[xyPos];\n                g += buf2[xyPos + 1];\n                b += buf2[xyPos + 2];\n                realColors++;\n              }\n              a += pixelAlpha;\n            }\n          }\n          const pos = (i * wDst + j) * 4;\n          bufDst[pos] = realColors ? Math.round(r / realColors) : 0;\n          bufDst[pos + 1] = realColors ? Math.round(g / realColors) : 0;\n          bufDst[pos + 2] = realColors ? Math.round(b / realColors) : 0;\n          bufDst[pos + 3] = Math.round(a / m);\n        }\n      }\n    } else {\n      // replace dst buffer with buf2\n      dst.data = buf2;\n    }\n  },\n  bicubicInterpolation(src, dst, options) {\n    const interpolateCubic = function (x0, x1, x2, x3, t) {\n      const a0 = x3 - x2 - x0 + x1;\n      const a1 = x0 - x1 - a0;\n      const a2 = x2 - x0;\n      const a3 = x1;\n      return Math.max(0, Math.min(255, a0 * (t * t * t) + a1 * (t * t) + a2 * t + a3));\n    };\n    return this._interpolate2D(src, dst, options, interpolateCubic);\n  },\n  hermiteInterpolation(src, dst, options) {\n    const interpolateHermite = function (x0, x1, x2, x3, t) {\n      const c0 = x1;\n      const c1 = 0.5 * (x2 - x0);\n      const c2 = x0 - 2.5 * x1 + 2 * x2 - 0.5 * x3;\n      const c3 = 0.5 * (x3 - x0) + 1.5 * (x1 - x2);\n      return Math.max(0, Math.min(255, Math.round(((c3 * t + c2) * t + c1) * t + c0)));\n    };\n    return this._interpolate2D(src, dst, options, interpolateHermite);\n  },\n  bezierInterpolation(src, dst, options) {\n    // between 2 points y(n), y(n+1), use next points out, y(n-1), y(n+2)\n    // to predict control points (a & b) to be placed at n+0.5\n    //  ya(n) = y(n) + (y(n+1)-y(n-1))/4\n    //  yb(n) = y(n+1) - (y(n+2)-y(n))/4\n    // then use std bezier to interpolate [n,n+1)\n    //  y(n+t) = y(n)*(1-t)^3 + 3 * ya(n)*(1-t)^2*t + 3 * yb(n)*(1-t)*t^2 + y(n+1)*t^3\n    //  note the 3* factor for the two control points\n    // for edge cases, can choose:\n    //  y(-1) = y(0) - 2*(y(1)-y(0))\n    //  y(w) = y(w-1) + 2*(y(w-1)-y(w-2))\n    // but can go with y(-1) = y(0) and y(w) = y(w-1)\n    const interpolateBezier = function (x0, x1, x2, x3, t) {\n      // x1, x2 are the knots, use x0 and x3 to calculate control points\n      const cp1 = x1 + (x2 - x0) / 4;\n      const cp2 = x2 - (x3 - x1) / 4;\n      const nt = 1 - t;\n      const c0 = x1 * nt * nt * nt;\n      const c1 = 3 * cp1 * nt * nt * t;\n      const c2 = 3 * cp2 * nt * t * t;\n      const c3 = x2 * t * t * t;\n      return Math.max(0, Math.min(255, Math.round(c0 + c1 + c2 + c3)));\n    };\n    return this._interpolate2D(src, dst, options, interpolateBezier);\n  }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (operations);\n//# sourceMappingURL=resize2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-resize/es/modules/resize2.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-rotate/es/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@jimp/plugin-rotate/es/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Rotates an image counter-clockwise by multiple of 90 degrees. NB: 'this' must be a Jimp object.\n *\n * This function is based on matrix rotation. Check this to get an initial idea how it works: https://stackoverflow.com/a/8664879/10561909\n *\n * @param {number} deg the number of degrees to rotate the image by, it should be a multiple of 90\n */\nfunction matrixRotate(deg) {\n  if (Math.abs(deg) % 90 !== 0) {\n    throw new Error(\"Unsupported matrix rotation degree\");\n  }\n  deg %= 360;\n  if (Math.abs(deg) === 0) {\n    // no rotation for 0, 360, -360, 720, -720, ...\n    return;\n  }\n  const w = this.bitmap.width;\n  const h = this.bitmap.height;\n\n  // decide which rotation angle to use\n  let angle;\n  switch (deg) {\n    // 90 degree & -270 degree are same\n    case 90:\n    case -270:\n      angle = 90;\n      break;\n    case 180:\n    case -180:\n      angle = 180;\n      break;\n    case 270:\n    case -90:\n      angle = -90;\n      break;\n    default:\n      throw new Error(\"Unsupported matrix rotation degree\");\n  }\n  // After this switch block, angle will be 90, 180 or -90\n\n  // calculate the new width and height\n  const nW = angle === 180 ? w : h;\n  const nH = angle === 180 ? h : w;\n  const dstBuffer = Buffer.alloc(this.bitmap.data.length);\n\n  // function to translate the x, y coordinate to the index of the pixel in the buffer\n  function createIdxTranslationFunction(w, h) {\n    return function (x, y) {\n      return y * w + x << 2;\n    };\n  }\n  const srcIdxFunction = createIdxTranslationFunction(w, h);\n  const dstIdxFunction = createIdxTranslationFunction(nW, nH);\n  for (let x = 0; x < w; x++) {\n    for (let y = 0; y < h; y++) {\n      const srcIdx = srcIdxFunction(x, y);\n      const pixelRGBA = this.bitmap.data.readUInt32BE(srcIdx);\n      let dstIdx;\n      switch (angle) {\n        case 90:\n          dstIdx = dstIdxFunction(y, w - x - 1);\n          break;\n        case -90:\n          dstIdx = dstIdxFunction(h - y - 1, x);\n          break;\n        case 180:\n          dstIdx = dstIdxFunction(w - x - 1, h - y - 1);\n          break;\n        default:\n          throw new Error(\"Unsupported matrix rotation angle\");\n      }\n      dstBuffer.writeUInt32BE(pixelRGBA, dstIdx);\n    }\n  }\n  this.bitmap.data = dstBuffer;\n  this.bitmap.width = nW;\n  this.bitmap.height = nH;\n}\n\n/**\n * Rotates an image counter-clockwise by an arbitrary number of degrees. NB: 'this' must be a Jimp object.\n * @param {number} deg the number of degrees to rotate the image by\n * @param {string|boolean} mode (optional) resize mode or a boolean, if false then the width and height of the image will not be changed\n */\nfunction advancedRotate(deg, mode) {\n  deg %= 360;\n  const rad = deg * Math.PI / 180;\n  const cosine = Math.cos(rad);\n  const sine = Math.sin(rad);\n\n  // the final width and height will change if resize == true\n  let w = this.bitmap.width;\n  let h = this.bitmap.height;\n  if (mode === true || typeof mode === \"string\") {\n    // resize the image to it maximum dimension and blit the existing image\n    // onto the center so that when it is rotated the image is kept in bounds\n\n    // http://stackoverflow.com/questions/3231176/how-to-get-size-of-a-rotated-rectangle\n    // Plus 1 border pixel to ensure to show all rotated result for some cases.\n    w = Math.ceil(Math.abs(this.bitmap.width * cosine) + Math.abs(this.bitmap.height * sine)) + 1;\n    h = Math.ceil(Math.abs(this.bitmap.width * sine) + Math.abs(this.bitmap.height * cosine)) + 1;\n    // Ensure destination to have even size to a better result.\n    if (w % 2 !== 0) {\n      w++;\n    }\n    if (h % 2 !== 0) {\n      h++;\n    }\n    const c = this.cloneQuiet();\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n      this.bitmap.data.writeUInt32BE(this._background, idx);\n    });\n    const max = Math.max(w, h, this.bitmap.width, this.bitmap.height);\n    this.resize(max, max, mode);\n    this.blit(c, this.bitmap.width / 2 - c.bitmap.width / 2, this.bitmap.height / 2 - c.bitmap.height / 2);\n  }\n  const bW = this.bitmap.width;\n  const bH = this.bitmap.height;\n  const dstBuffer = Buffer.alloc(this.bitmap.data.length);\n  function createTranslationFunction(deltaX, deltaY) {\n    return function (x, y) {\n      return {\n        x: x + deltaX,\n        y: y + deltaY\n      };\n    };\n  }\n  const translate2Cartesian = createTranslationFunction(-(bW / 2), -(bH / 2));\n  const translate2Screen = createTranslationFunction(bW / 2 + 0.5, bH / 2 + 0.5);\n  for (let y = 1; y <= bH; y++) {\n    for (let x = 1; x <= bW; x++) {\n      const cartesian = translate2Cartesian(x, y);\n      const source = translate2Screen(cosine * cartesian.x - sine * cartesian.y, cosine * cartesian.y + sine * cartesian.x);\n      const dstIdx = bW * (y - 1) + x - 1 << 2;\n      if (source.x >= 0 && source.x < bW && source.y >= 0 && source.y < bH) {\n        const srcIdx = (bW * (source.y | 0) + source.x | 0) << 2;\n        const pixelRGBA = this.bitmap.data.readUInt32BE(srcIdx);\n        dstBuffer.writeUInt32BE(pixelRGBA, dstIdx);\n      } else {\n        // reset off-image pixels\n        dstBuffer.writeUInt32BE(this._background, dstIdx);\n      }\n    }\n  }\n  this.bitmap.data = dstBuffer;\n  if (mode === true || typeof mode === \"string\") {\n    // now crop the image to the final size\n    const x = bW / 2 - w / 2;\n    const y = bH / 2 - h / 2;\n    this.crop(x, y, w, h);\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  /**\n   * Rotates the image counter-clockwise by a number of degrees. By default the width and height of the image will be resized appropriately.\n   * @param {number} deg the number of degrees to rotate the image by\n   * @param {string|boolean} mode (optional) resize mode or a boolean, if false then the width and height of the image will not be changed\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  rotate(deg, mode, cb) {\n    // enable overloading\n    if (typeof mode === \"undefined\" || mode === null) {\n      // e.g. image.resize(120);\n      // e.g. image.resize(120, null, cb);\n      // e.g. image.resize(120, undefined, cb);\n      mode = true;\n    }\n    if (typeof mode === \"function\" && typeof cb === \"undefined\") {\n      // e.g. image.resize(120, cb);\n      cb = mode;\n      mode = true;\n    }\n    if (typeof deg !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"deg must be a number\", cb);\n    }\n    if (typeof mode !== \"boolean\" && typeof mode !== \"string\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"mode must be a boolean or a string\", cb);\n    }\n\n    // use matrixRotate if the angle is a multiple of 90 degrees (eg: 180 or -90) and resize is allowed or not needed.\n    const matrixRotateAllowed = deg % 90 === 0 && (mode || this.bitmap.width === this.bitmap.height || deg % 180 === 0);\n    if (matrixRotateAllowed) {\n      matrixRotate.call(this, deg);\n    } else {\n      advancedRotate.call(this, deg, mode, cb);\n    }\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-rotate/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-scale/es/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@jimp/plugin-scale/es/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  /**\n   * Uniformly scales the image by a factor.\n   * @param {number} f the factor to scale the image by\n   * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  scale(f, mode, cb) {\n    if (typeof f !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"f must be a number\", cb);\n    }\n    if (f < 0) {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"f must be a positive number\", cb);\n    }\n    if (typeof mode === \"function\" && typeof cb === \"undefined\") {\n      cb = mode;\n      mode = null;\n    }\n    const w = this.bitmap.width * f;\n    const h = this.bitmap.height * f;\n    this.resize(w, h, mode);\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  },\n  /**\n   * Scale the image to the largest size that fits inside the rectangle that has the given width and height.\n   * @param {number} w the width to resize the image to\n   * @param {number} h the height to resize the image to\n   * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  scaleToFit(w, h, mode, cb) {\n    if (typeof w !== \"number\" || typeof h !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"w and h must be numbers\", cb);\n    }\n    if (typeof mode === \"function\" && typeof cb === \"undefined\") {\n      cb = mode;\n      mode = null;\n    }\n    const f = w / h > this.bitmap.width / this.bitmap.height ? h / this.bitmap.height : w / this.bitmap.width;\n    this.scale(f, mode);\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tc2NhbGUvZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0Q7QUFDeEQsaUVBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsdUJBQXVCO0FBQ3BDLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxhQUFhLG1EQUFVO0FBQ3ZCO0FBQ0E7QUFDQSxhQUFhLG1EQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDBEQUFhO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSx1QkFBdUI7QUFDcEMsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbURBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDBEQUFhO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLEVBQUU7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRuLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1zY2FsZS9lcy9pbmRleC5qcz84ZTZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9kZVBhdHRlcm4sIHRocm93RXJyb3IgfSBmcm9tIFwiQGppbXAvdXRpbHNcIjtcbmV4cG9ydCBkZWZhdWx0ICgoKSA9PiAoe1xuICAvKipcbiAgICogVW5pZm9ybWx5IHNjYWxlcyB0aGUgaW1hZ2UgYnkgYSBmYWN0b3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmIHRoZSBmYWN0b3IgdG8gc2NhbGUgdGhlIGltYWdlIGJ5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlIChvcHRpb25hbCkgYSBzY2FsaW5nIG1ldGhvZCAoZS5nLiBKaW1wLlJFU0laRV9CRVpJRVIpXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAgICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAgICovXG4gIHNjYWxlKGYsIG1vZGUsIGNiKSB7XG4gICAgaWYgKHR5cGVvZiBmICE9PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwiZiBtdXN0IGJlIGEgbnVtYmVyXCIsIGNiKTtcbiAgICB9XG4gICAgaWYgKGYgPCAwKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwiZiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyXCIsIGNiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBtb2RlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGNiID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjYiA9IG1vZGU7XG4gICAgICBtb2RlID0gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdyA9IHRoaXMuYml0bWFwLndpZHRoICogZjtcbiAgICBjb25zdCBoID0gdGhpcy5iaXRtYXAuaGVpZ2h0ICogZjtcbiAgICB0aGlzLnJlc2l6ZSh3LCBoLCBtb2RlKTtcbiAgICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICAvKipcbiAgICogU2NhbGUgdGhlIGltYWdlIHRvIHRoZSBsYXJnZXN0IHNpemUgdGhhdCBmaXRzIGluc2lkZSB0aGUgcmVjdGFuZ2xlIHRoYXQgaGFzIHRoZSBnaXZlbiB3aWR0aCBhbmQgaGVpZ2h0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gdyB0aGUgd2lkdGggdG8gcmVzaXplIHRoZSBpbWFnZSB0b1xuICAgKiBAcGFyYW0ge251bWJlcn0gaCB0aGUgaGVpZ2h0IHRvIHJlc2l6ZSB0aGUgaW1hZ2UgdG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGUgKG9wdGlvbmFsKSBhIHNjYWxpbmcgbWV0aG9kIChlLmcuIEppbXAuUkVTSVpFX0JFWklFUilcbiAgICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgSmltcCl9IGNiIChvcHRpb25hbCkgYSBjYWxsYmFjayBmb3Igd2hlbiBjb21wbGV0ZVxuICAgKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICAgKi9cbiAgc2NhbGVUb0ZpdCh3LCBoLCBtb2RlLCBjYikge1xuICAgIGlmICh0eXBlb2YgdyAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgaCAhPT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIHRocm93RXJyb3IuY2FsbCh0aGlzLCBcIncgYW5kIGggbXVzdCBiZSBudW1iZXJzXCIsIGNiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBtb2RlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGNiID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjYiA9IG1vZGU7XG4gICAgICBtb2RlID0gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgZiA9IHcgLyBoID4gdGhpcy5iaXRtYXAud2lkdGggLyB0aGlzLmJpdG1hcC5oZWlnaHQgPyBoIC8gdGhpcy5iaXRtYXAuaGVpZ2h0IDogdyAvIHRoaXMuYml0bWFwLndpZHRoO1xuICAgIHRoaXMuc2NhbGUoZiwgbW9kZSk7XG4gICAgaWYgKGlzTm9kZVBhdHRlcm4oY2IpKSB7XG4gICAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-scale/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-shadow/es/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@jimp/plugin-shadow/es/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Creates a circle out of an image.\n * @param {function(Error, Jimp)} options (optional)\n * opacity - opacity of the shadow between 0 and 1\n * size,- of the shadow\n * blur - how blurry the shadow is\n * x- x position of shadow\n * y - y position of shadow\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  shadow() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let cb = arguments.length > 1 ? arguments[1] : undefined;\n    if (typeof options === \"function\") {\n      cb = options;\n      options = {};\n    }\n    const {\n      opacity = 0.7,\n      size = 1.1,\n      x = -25,\n      y = 25,\n      blur = 5\n    } = options;\n\n    // clone the image\n    const orig = this.clone();\n    const shadow = this.clone();\n\n    // turn all it's pixels black\n    shadow.scan(0, 0, shadow.bitmap.width, shadow.bitmap.height, (x, y, idx) => {\n      shadow.bitmap.data[idx] = 0x00;\n      shadow.bitmap.data[idx + 1] = 0x00;\n      shadow.bitmap.data[idx + 2] = 0x00;\n      // up the opacity a little,\n      shadow.bitmap.data[idx + 3] = shadow.constructor.limit255(shadow.bitmap.data[idx + 3] * opacity);\n      this.bitmap.data[idx] = 0x00;\n      this.bitmap.data[idx + 1] = 0x00;\n      this.bitmap.data[idx + 2] = 0x00;\n      this.bitmap.data[idx + 3] = 0x00;\n    });\n\n    // enlarge it. This creates a \"shadow\".\n    shadow.resize(shadow.bitmap.width * size, shadow.bitmap.height * size).blur(blur);\n\n    // Then blit the \"shadow\" onto the background and the image on top of that.\n    this.composite(shadow, x, y);\n    this.composite(orig, 0, 0);\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tc2hhZG93L2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDOztBQUU1QztBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsdUJBQXVCO0FBQ2xDLGFBQWEsTUFBTTtBQUNuQjtBQUNBLGlFQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUSwwREFBYTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyxFQUFFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0bi8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tc2hhZG93L2VzL2luZGV4LmpzPzE4YmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb2RlUGF0dGVybiB9IGZyb20gXCJAamltcC91dGlsc1wiO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjaXJjbGUgb3V0IG9mIGFuIGltYWdlLlxuICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgSmltcCl9IG9wdGlvbnMgKG9wdGlvbmFsKVxuICogb3BhY2l0eSAtIG9wYWNpdHkgb2YgdGhlIHNoYWRvdyBiZXR3ZWVuIDAgYW5kIDFcbiAqIHNpemUsLSBvZiB0aGUgc2hhZG93XG4gKiBibHVyIC0gaG93IGJsdXJyeSB0aGUgc2hhZG93IGlzXG4gKiB4LSB4IHBvc2l0aW9uIG9mIHNoYWRvd1xuICogeSAtIHkgcG9zaXRpb24gb2Ygc2hhZG93XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gY2IgKG9wdGlvbmFsKSBhIGNhbGxiYWNrIGZvciB3aGVuIGNvbXBsZXRlXG4gKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICovXG5leHBvcnQgZGVmYXVsdCAoKCkgPT4gKHtcbiAgc2hhZG93KCkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBsZXQgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2IgPSBvcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBvcGFjaXR5ID0gMC43LFxuICAgICAgc2l6ZSA9IDEuMSxcbiAgICAgIHggPSAtMjUsXG4gICAgICB5ID0gMjUsXG4gICAgICBibHVyID0gNVxuICAgIH0gPSBvcHRpb25zO1xuXG4gICAgLy8gY2xvbmUgdGhlIGltYWdlXG4gICAgY29uc3Qgb3JpZyA9IHRoaXMuY2xvbmUoKTtcbiAgICBjb25zdCBzaGFkb3cgPSB0aGlzLmNsb25lKCk7XG5cbiAgICAvLyB0dXJuIGFsbCBpdCdzIHBpeGVscyBibGFja1xuICAgIHNoYWRvdy5zY2FuKDAsIDAsIHNoYWRvdy5iaXRtYXAud2lkdGgsIHNoYWRvdy5iaXRtYXAuaGVpZ2h0LCAoeCwgeSwgaWR4KSA9PiB7XG4gICAgICBzaGFkb3cuYml0bWFwLmRhdGFbaWR4XSA9IDB4MDA7XG4gICAgICBzaGFkb3cuYml0bWFwLmRhdGFbaWR4ICsgMV0gPSAweDAwO1xuICAgICAgc2hhZG93LmJpdG1hcC5kYXRhW2lkeCArIDJdID0gMHgwMDtcbiAgICAgIC8vIHVwIHRoZSBvcGFjaXR5IGEgbGl0dGxlLFxuICAgICAgc2hhZG93LmJpdG1hcC5kYXRhW2lkeCArIDNdID0gc2hhZG93LmNvbnN0cnVjdG9yLmxpbWl0MjU1KHNoYWRvdy5iaXRtYXAuZGF0YVtpZHggKyAzXSAqIG9wYWNpdHkpO1xuICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHhdID0gMHgwMDtcbiAgICAgIHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMV0gPSAweDAwO1xuICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAyXSA9IDB4MDA7XG4gICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDNdID0gMHgwMDtcbiAgICB9KTtcblxuICAgIC8vIGVubGFyZ2UgaXQuIFRoaXMgY3JlYXRlcyBhIFwic2hhZG93XCIuXG4gICAgc2hhZG93LnJlc2l6ZShzaGFkb3cuYml0bWFwLndpZHRoICogc2l6ZSwgc2hhZG93LmJpdG1hcC5oZWlnaHQgKiBzaXplKS5ibHVyKGJsdXIpO1xuXG4gICAgLy8gVGhlbiBibGl0IHRoZSBcInNoYWRvd1wiIG9udG8gdGhlIGJhY2tncm91bmQgYW5kIHRoZSBpbWFnZSBvbiB0b3Agb2YgdGhhdC5cbiAgICB0aGlzLmNvbXBvc2l0ZShzaGFkb3csIHgsIHkpO1xuICAgIHRoaXMuY29tcG9zaXRlKG9yaWcsIDAsIDApO1xuICAgIGlmIChpc05vZGVQYXR0ZXJuKGNiKSkge1xuICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-shadow/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugin-threshold/es/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@jimp/plugin-threshold/es/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\n/**\n * Applies a minimum color threshold to a greyscale image.  Converts image to greyscale by default\n * @param {number} options object\n *  max: A number auto limited between 0 - 255\n *  replace: (optional) A number auto limited between 0 - 255 (default 255)\n *  autoGreyscale: (optional) A boolean whether to apply greyscale beforehand (default true)\n * @param {number} cb (optional) a callback for when complete\n * @return {this} this for chaining of methods\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  threshold(_ref, cb) {\n    let {\n      max,\n      replace = 255,\n      autoGreyscale = true\n    } = _ref;\n    if (typeof max !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"max must be a number\", cb);\n    }\n    if (typeof replace !== \"number\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"replace must be a number\", cb);\n    }\n    if (typeof autoGreyscale !== \"boolean\") {\n      return _jimp_utils__WEBPACK_IMPORTED_MODULE_0__.throwError.call(this, \"autoGreyscale must be a boolean\", cb);\n    }\n    max = this.constructor.limit255(max);\n    replace = this.constructor.limit255(replace);\n    if (autoGreyscale) {\n      this.greyscale();\n    }\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, (x, y, idx) => {\n      const grey = this.bitmap.data[idx] < max ? this.bitmap.data[idx] : replace;\n      this.bitmap.data[idx] = grey;\n      this.bitmap.data[idx + 1] = grey;\n      this.bitmap.data[idx + 2] = grey;\n    });\n    if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_0__.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tdGhyZXNob2xkL2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdEOztBQUV4RDtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLE1BQU07QUFDbEI7QUFDQSxpRUFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLGFBQWEsbURBQVU7QUFDdkI7QUFDQTtBQUNBLGFBQWEsbURBQVU7QUFDdkI7QUFDQTtBQUNBLGFBQWEsbURBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxRQUFRLDBEQUFhO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLEVBQUU7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRuLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi10aHJlc2hvbGQvZXMvaW5kZXguanM/MTc2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vZGVQYXR0ZXJuLCB0aHJvd0Vycm9yIH0gZnJvbSBcIkBqaW1wL3V0aWxzXCI7XG5cbi8qKlxuICogQXBwbGllcyBhIG1pbmltdW0gY29sb3IgdGhyZXNob2xkIHRvIGEgZ3JleXNjYWxlIGltYWdlLiAgQ29udmVydHMgaW1hZ2UgdG8gZ3JleXNjYWxlIGJ5IGRlZmF1bHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zIG9iamVjdFxuICogIG1heDogQSBudW1iZXIgYXV0byBsaW1pdGVkIGJldHdlZW4gMCAtIDI1NVxuICogIHJlcGxhY2U6IChvcHRpb25hbCkgQSBudW1iZXIgYXV0byBsaW1pdGVkIGJldHdlZW4gMCAtIDI1NSAoZGVmYXVsdCAyNTUpXG4gKiAgYXV0b0dyZXlzY2FsZTogKG9wdGlvbmFsKSBBIGJvb2xlYW4gd2hldGhlciB0byBhcHBseSBncmV5c2NhbGUgYmVmb3JlaGFuZCAoZGVmYXVsdCB0cnVlKVxuICogQHBhcmFtIHtudW1iZXJ9IGNiIChvcHRpb25hbCkgYSBjYWxsYmFjayBmb3Igd2hlbiBjb21wbGV0ZVxuICogQHJldHVybiB7dGhpc30gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICovXG5leHBvcnQgZGVmYXVsdCAoKCkgPT4gKHtcbiAgdGhyZXNob2xkKF9yZWYsIGNiKSB7XG4gICAgbGV0IHtcbiAgICAgIG1heCxcbiAgICAgIHJlcGxhY2UgPSAyNTUsXG4gICAgICBhdXRvR3JleXNjYWxlID0gdHJ1ZVxuICAgIH0gPSBfcmVmO1xuICAgIGlmICh0eXBlb2YgbWF4ICE9PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwibWF4IG11c3QgYmUgYSBudW1iZXJcIiwgY2IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcGxhY2UgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiB0aHJvd0Vycm9yLmNhbGwodGhpcywgXCJyZXBsYWNlIG11c3QgYmUgYSBudW1iZXJcIiwgY2IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGF1dG9HcmV5c2NhbGUgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwiYXV0b0dyZXlzY2FsZSBtdXN0IGJlIGEgYm9vbGVhblwiLCBjYik7XG4gICAgfVxuICAgIG1heCA9IHRoaXMuY29uc3RydWN0b3IubGltaXQyNTUobWF4KTtcbiAgICByZXBsYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5saW1pdDI1NShyZXBsYWNlKTtcbiAgICBpZiAoYXV0b0dyZXlzY2FsZSkge1xuICAgICAgdGhpcy5ncmV5c2NhbGUoKTtcbiAgICB9XG4gICAgdGhpcy5zY2FuUXVpZXQoMCwgMCwgdGhpcy5iaXRtYXAud2lkdGgsIHRoaXMuYml0bWFwLmhlaWdodCwgKHgsIHksIGlkeCkgPT4ge1xuICAgICAgY29uc3QgZ3JleSA9IHRoaXMuYml0bWFwLmRhdGFbaWR4XSA8IG1heCA/IHRoaXMuYml0bWFwLmRhdGFbaWR4XSA6IHJlcGxhY2U7XG4gICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeF0gPSBncmV5O1xuICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAxXSA9IGdyZXk7XG4gICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDJdID0gZ3JleTtcbiAgICB9KTtcbiAgICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugin-threshold/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/plugins/es/index.js":
/*!************************************************!*\
  !*** ./node_modules/@jimp/plugins/es/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var timm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! timm */ \"(action-browser)/./node_modules/timm/lib/timm.js\");\n/* harmony import */ var _jimp_plugin_blit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jimp/plugin-blit */ \"(action-browser)/./node_modules/@jimp/plugin-blit/es/index.js\");\n/* harmony import */ var _jimp_plugin_blur__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jimp/plugin-blur */ \"(action-browser)/./node_modules/@jimp/plugin-blur/es/index.js\");\n/* harmony import */ var _jimp_plugin_circle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jimp/plugin-circle */ \"(action-browser)/./node_modules/@jimp/plugin-circle/es/index.js\");\n/* harmony import */ var _jimp_plugin_color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jimp/plugin-color */ \"(action-browser)/./node_modules/@jimp/plugin-color/es/index.js\");\n/* harmony import */ var _jimp_plugin_contain__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jimp/plugin-contain */ \"(action-browser)/./node_modules/@jimp/plugin-contain/es/index.js\");\n/* harmony import */ var _jimp_plugin_cover__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @jimp/plugin-cover */ \"(action-browser)/./node_modules/@jimp/plugin-cover/es/index.js\");\n/* harmony import */ var _jimp_plugin_crop__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @jimp/plugin-crop */ \"(action-browser)/./node_modules/@jimp/plugin-crop/es/index.js\");\n/* harmony import */ var _jimp_plugin_displace__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @jimp/plugin-displace */ \"(action-browser)/./node_modules/@jimp/plugin-displace/es/index.js\");\n/* harmony import */ var _jimp_plugin_dither__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @jimp/plugin-dither */ \"(action-browser)/./node_modules/@jimp/plugin-dither/es/index.js\");\n/* harmony import */ var _jimp_plugin_fisheye__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @jimp/plugin-fisheye */ \"(action-browser)/./node_modules/@jimp/plugin-fisheye/es/index.js\");\n/* harmony import */ var _jimp_plugin_flip__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @jimp/plugin-flip */ \"(action-browser)/./node_modules/@jimp/plugin-flip/es/index.js\");\n/* harmony import */ var _jimp_plugin_gaussian__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @jimp/plugin-gaussian */ \"(action-browser)/./node_modules/@jimp/plugin-gaussian/es/index.js\");\n/* harmony import */ var _jimp_plugin_invert__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @jimp/plugin-invert */ \"(action-browser)/./node_modules/@jimp/plugin-invert/es/index.js\");\n/* harmony import */ var _jimp_plugin_mask__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @jimp/plugin-mask */ \"(action-browser)/./node_modules/@jimp/plugin-mask/es/index.js\");\n/* harmony import */ var _jimp_plugin_normalize__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @jimp/plugin-normalize */ \"(action-browser)/./node_modules/@jimp/plugin-normalize/es/index.js\");\n/* harmony import */ var _jimp_plugin_print__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @jimp/plugin-print */ \"(action-browser)/./node_modules/@jimp/plugin-print/es/index.js\");\n/* harmony import */ var _jimp_plugin_resize__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @jimp/plugin-resize */ \"(action-browser)/./node_modules/@jimp/plugin-resize/es/index.js\");\n/* harmony import */ var _jimp_plugin_rotate__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @jimp/plugin-rotate */ \"(action-browser)/./node_modules/@jimp/plugin-rotate/es/index.js\");\n/* harmony import */ var _jimp_plugin_scale__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @jimp/plugin-scale */ \"(action-browser)/./node_modules/@jimp/plugin-scale/es/index.js\");\n/* harmony import */ var _jimp_plugin_shadow__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @jimp/plugin-shadow */ \"(action-browser)/./node_modules/@jimp/plugin-shadow/es/index.js\");\n/* harmony import */ var _jimp_plugin_threshold__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @jimp/plugin-threshold */ \"(action-browser)/./node_modules/@jimp/plugin-threshold/es/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst plugins = [_jimp_plugin_blit__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _jimp_plugin_blur__WEBPACK_IMPORTED_MODULE_2__[\"default\"], _jimp_plugin_circle__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _jimp_plugin_color__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _jimp_plugin_contain__WEBPACK_IMPORTED_MODULE_5__[\"default\"], _jimp_plugin_cover__WEBPACK_IMPORTED_MODULE_6__[\"default\"], _jimp_plugin_crop__WEBPACK_IMPORTED_MODULE_7__[\"default\"], _jimp_plugin_displace__WEBPACK_IMPORTED_MODULE_8__[\"default\"], _jimp_plugin_dither__WEBPACK_IMPORTED_MODULE_9__[\"default\"], _jimp_plugin_fisheye__WEBPACK_IMPORTED_MODULE_10__[\"default\"], _jimp_plugin_flip__WEBPACK_IMPORTED_MODULE_11__[\"default\"], _jimp_plugin_gaussian__WEBPACK_IMPORTED_MODULE_12__[\"default\"], _jimp_plugin_invert__WEBPACK_IMPORTED_MODULE_13__[\"default\"], _jimp_plugin_mask__WEBPACK_IMPORTED_MODULE_14__[\"default\"], _jimp_plugin_normalize__WEBPACK_IMPORTED_MODULE_15__[\"default\"], _jimp_plugin_print__WEBPACK_IMPORTED_MODULE_16__[\"default\"], _jimp_plugin_resize__WEBPACK_IMPORTED_MODULE_17__[\"default\"], _jimp_plugin_rotate__WEBPACK_IMPORTED_MODULE_18__[\"default\"], _jimp_plugin_scale__WEBPACK_IMPORTED_MODULE_19__[\"default\"], _jimp_plugin_shadow__WEBPACK_IMPORTED_MODULE_20__[\"default\"], _jimp_plugin_threshold__WEBPACK_IMPORTED_MODULE_21__[\"default\"]];\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (jimpEvChange => {\n  const initializedPlugins = plugins.map(pluginModule => {\n    let plugin = pluginModule(jimpEvChange) || {};\n    if (!plugin.class && !plugin.constants) {\n      // Default to class function\n      plugin = {\n        class: plugin\n      };\n    }\n    return plugin;\n  });\n  return (0,timm__WEBPACK_IMPORTED_MODULE_0__.mergeDeep)(...initializedPlugins);\n});\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW5zL2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ0k7QUFDQTtBQUNJO0FBQ0Y7QUFDSTtBQUNKO0FBQ0Y7QUFDUTtBQUNKO0FBQ0U7QUFDTjtBQUNRO0FBQ0o7QUFDSjtBQUNVO0FBQ1I7QUFDRTtBQUNBO0FBQ0Y7QUFDRTtBQUNNO0FBQy9DLGlCQUFpQix5REFBSSxFQUFFLHlEQUFJLEVBQUUsMkRBQU0sRUFBRSwwREFBSyxFQUFFLDREQUFPLEVBQUUsMERBQUssRUFBRSx5REFBSSxFQUFFLDZEQUFRLEVBQUUsMkRBQU0sRUFBRSw2REFBTyxFQUFFLDBEQUFJLEVBQUUsOERBQVEsRUFBRSw0REFBTSxFQUFFLDBEQUFJLEVBQUUsK0RBQVMsRUFBRSwyREFBSyxFQUFFLDREQUFNLEVBQUUsNERBQU0sRUFBRSwyREFBSyxFQUFFLDREQUFNLEVBQUUsK0RBQVM7QUFDckwsaUVBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxTQUFTLCtDQUFTO0FBQ2xCLENBQUMsRUFBRTtBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dG4vLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2lucy9lcy9pbmRleC5qcz9jZmI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1lcmdlRGVlcCB9IGZyb20gXCJ0aW1tXCI7XG5pbXBvcnQgYmxpdCBmcm9tIFwiQGppbXAvcGx1Z2luLWJsaXRcIjtcbmltcG9ydCBibHVyIGZyb20gXCJAamltcC9wbHVnaW4tYmx1clwiO1xuaW1wb3J0IGNpcmNsZSBmcm9tIFwiQGppbXAvcGx1Z2luLWNpcmNsZVwiO1xuaW1wb3J0IGNvbG9yIGZyb20gXCJAamltcC9wbHVnaW4tY29sb3JcIjtcbmltcG9ydCBjb250YWluIGZyb20gXCJAamltcC9wbHVnaW4tY29udGFpblwiO1xuaW1wb3J0IGNvdmVyIGZyb20gXCJAamltcC9wbHVnaW4tY292ZXJcIjtcbmltcG9ydCBjcm9wIGZyb20gXCJAamltcC9wbHVnaW4tY3JvcFwiO1xuaW1wb3J0IGRpc3BsYWNlIGZyb20gXCJAamltcC9wbHVnaW4tZGlzcGxhY2VcIjtcbmltcG9ydCBkaXRoZXIgZnJvbSBcIkBqaW1wL3BsdWdpbi1kaXRoZXJcIjtcbmltcG9ydCBmaXNoZXllIGZyb20gXCJAamltcC9wbHVnaW4tZmlzaGV5ZVwiO1xuaW1wb3J0IGZsaXAgZnJvbSBcIkBqaW1wL3BsdWdpbi1mbGlwXCI7XG5pbXBvcnQgZ2F1c3NpYW4gZnJvbSBcIkBqaW1wL3BsdWdpbi1nYXVzc2lhblwiO1xuaW1wb3J0IGludmVydCBmcm9tIFwiQGppbXAvcGx1Z2luLWludmVydFwiO1xuaW1wb3J0IG1hc2sgZnJvbSBcIkBqaW1wL3BsdWdpbi1tYXNrXCI7XG5pbXBvcnQgbm9ybWFsaXplIGZyb20gXCJAamltcC9wbHVnaW4tbm9ybWFsaXplXCI7XG5pbXBvcnQgcHJpbnQgZnJvbSBcIkBqaW1wL3BsdWdpbi1wcmludFwiO1xuaW1wb3J0IHJlc2l6ZSBmcm9tIFwiQGppbXAvcGx1Z2luLXJlc2l6ZVwiO1xuaW1wb3J0IHJvdGF0ZSBmcm9tIFwiQGppbXAvcGx1Z2luLXJvdGF0ZVwiO1xuaW1wb3J0IHNjYWxlIGZyb20gXCJAamltcC9wbHVnaW4tc2NhbGVcIjtcbmltcG9ydCBzaGFkb3cgZnJvbSBcIkBqaW1wL3BsdWdpbi1zaGFkb3dcIjtcbmltcG9ydCB0aHJlc2hvbGQgZnJvbSBcIkBqaW1wL3BsdWdpbi10aHJlc2hvbGRcIjtcbmNvbnN0IHBsdWdpbnMgPSBbYmxpdCwgYmx1ciwgY2lyY2xlLCBjb2xvciwgY29udGFpbiwgY292ZXIsIGNyb3AsIGRpc3BsYWNlLCBkaXRoZXIsIGZpc2hleWUsIGZsaXAsIGdhdXNzaWFuLCBpbnZlcnQsIG1hc2ssIG5vcm1hbGl6ZSwgcHJpbnQsIHJlc2l6ZSwgcm90YXRlLCBzY2FsZSwgc2hhZG93LCB0aHJlc2hvbGRdO1xuZXhwb3J0IGRlZmF1bHQgKGppbXBFdkNoYW5nZSA9PiB7XG4gIGNvbnN0IGluaXRpYWxpemVkUGx1Z2lucyA9IHBsdWdpbnMubWFwKHBsdWdpbk1vZHVsZSA9PiB7XG4gICAgbGV0IHBsdWdpbiA9IHBsdWdpbk1vZHVsZShqaW1wRXZDaGFuZ2UpIHx8IHt9O1xuICAgIGlmICghcGx1Z2luLmNsYXNzICYmICFwbHVnaW4uY29uc3RhbnRzKSB7XG4gICAgICAvLyBEZWZhdWx0IHRvIGNsYXNzIGZ1bmN0aW9uXG4gICAgICBwbHVnaW4gPSB7XG4gICAgICAgIGNsYXNzOiBwbHVnaW5cbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBwbHVnaW47XG4gIH0pO1xuICByZXR1cm4gbWVyZ2VEZWVwKC4uLmluaXRpYWxpemVkUGx1Z2lucyk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/plugins/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/png/es/index.js":
/*!********************************************!*\
  !*** ./node_modules/@jimp/png/es/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var pngjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pngjs */ \"(action-browser)/./node_modules/pngjs/lib/png.js\");\n/* harmony import */ var _jimp_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jimp/utils */ \"(action-browser)/./node_modules/@jimp/utils/es/index.js\");\n\n\nconst MIME_TYPE = \"image/png\";\n\n// PNG filter types\nconst PNG_FILTER_AUTO = -1;\nconst PNG_FILTER_NONE = 0;\nconst PNG_FILTER_SUB = 1;\nconst PNG_FILTER_UP = 2;\nconst PNG_FILTER_AVERAGE = 3;\nconst PNG_FILTER_PATH = 4;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  mime: {\n    [MIME_TYPE]: [\"png\"]\n  },\n  constants: {\n    MIME_PNG: MIME_TYPE,\n    PNG_FILTER_AUTO,\n    PNG_FILTER_NONE,\n    PNG_FILTER_SUB,\n    PNG_FILTER_UP,\n    PNG_FILTER_AVERAGE,\n    PNG_FILTER_PATH\n  },\n  hasAlpha: {\n    [MIME_TYPE]: true\n  },\n  decoders: {\n    [MIME_TYPE]: pngjs__WEBPACK_IMPORTED_MODULE_0__.PNG.sync.read\n  },\n  encoders: {\n    [MIME_TYPE](data) {\n      const png = new pngjs__WEBPACK_IMPORTED_MODULE_0__.PNG({\n        width: data.bitmap.width,\n        height: data.bitmap.height\n      });\n      png.data = data.bitmap.data;\n      return pngjs__WEBPACK_IMPORTED_MODULE_0__.PNG.sync.write(png, {\n        deflateLevel: data._deflateLevel,\n        deflateStrategy: data._deflateStrategy,\n        filterType: data._filterType,\n        colorType: typeof data._colorType === \"number\" ? data._colorType : data._rgba ? 6 : 2,\n        inputHasAlpha: data._rgba\n      });\n    }\n  },\n  class: {\n    _deflateLevel: 9,\n    _deflateStrategy: 3,\n    _filterType: PNG_FILTER_AUTO,\n    _colorType: null,\n    /**\n     * Sets the deflate level used when saving as PNG format (default is 9)\n     * @param {number} l Deflate level to use 0-9. 0 is no compression. 9 (default) is maximum compression.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateLevel(l, cb) {\n      if (typeof l !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"l must be a number\", cb);\n      }\n      if (l < 0 || l > 9) {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"l must be a number 0 - 9\", cb);\n      }\n      this._deflateLevel = Math.round(l);\n      if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Sets the deflate strategy used when saving as PNG format (default is 3)\n     * @param {number} s Deflate strategy to use 0-3.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateStrategy(s, cb) {\n      if (typeof s !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"s must be a number\", cb);\n      }\n      if (s < 0 || s > 3) {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"s must be a number 0 - 3\", cb);\n      }\n      this._deflateStrategy = Math.round(s);\n      if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Sets the filter type used when saving as PNG format (default is automatic filters)\n     * @param {number} f The quality to use -1-4.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    filterType(f, cb) {\n      if (typeof f !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"n must be a number\", cb);\n      }\n      if (f < -1 || f > 4) {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"n must be -1 (auto) or a number 0 - 4\", cb);\n      }\n      this._filterType = Math.round(f);\n      if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Sets the color type used when saving as PNG format\n     * @param {number} s color type to use 0, 2, 4, 6.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    colorType(s, cb) {\n      if (typeof s !== \"number\") {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"s must be a number\", cb);\n      }\n      if (s !== 0 && s !== 2 && s !== 4 && s !== 6) {\n        return _jimp_utils__WEBPACK_IMPORTED_MODULE_1__.throwError.call(this, \"s must be a number 0, 2, 4, 6.\", cb);\n      }\n      this._colorType = Math.round(s);\n      if ((0,_jimp_utils__WEBPACK_IMPORTED_MODULE_1__.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    }\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC9wbmcvZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRCO0FBQzRCO0FBQ3hEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsaUJBQWlCLHNDQUFHO0FBQ3BCLEdBQUc7QUFDSDtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFHO0FBQ3pCO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxhQUFhLHNDQUFHO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSx1QkFBdUI7QUFDdEMsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtREFBVTtBQUN6QjtBQUNBO0FBQ0EsZUFBZSxtREFBVTtBQUN6QjtBQUNBO0FBQ0EsVUFBVSwwREFBYTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLHVCQUF1QjtBQUN0QyxpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1EQUFVO0FBQ3pCO0FBQ0E7QUFDQSxlQUFlLG1EQUFVO0FBQ3pCO0FBQ0E7QUFDQSxVQUFVLDBEQUFhO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsdUJBQXVCO0FBQ3RDLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbURBQVU7QUFDekI7QUFDQTtBQUNBLGVBQWUsbURBQVU7QUFDekI7QUFDQTtBQUNBLFVBQVUsMERBQWE7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSx1QkFBdUI7QUFDdEMsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtREFBVTtBQUN6QjtBQUNBO0FBQ0EsZUFBZSxtREFBVTtBQUN6QjtBQUNBO0FBQ0EsVUFBVSwwREFBYTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLEVBQUU7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRuLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BuZy9lcy9pbmRleC5qcz9mMGRmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBORyB9IGZyb20gXCJwbmdqc1wiO1xuaW1wb3J0IHsgdGhyb3dFcnJvciwgaXNOb2RlUGF0dGVybiB9IGZyb20gXCJAamltcC91dGlsc1wiO1xuY29uc3QgTUlNRV9UWVBFID0gXCJpbWFnZS9wbmdcIjtcblxuLy8gUE5HIGZpbHRlciB0eXBlc1xuY29uc3QgUE5HX0ZJTFRFUl9BVVRPID0gLTE7XG5jb25zdCBQTkdfRklMVEVSX05PTkUgPSAwO1xuY29uc3QgUE5HX0ZJTFRFUl9TVUIgPSAxO1xuY29uc3QgUE5HX0ZJTFRFUl9VUCA9IDI7XG5jb25zdCBQTkdfRklMVEVSX0FWRVJBR0UgPSAzO1xuY29uc3QgUE5HX0ZJTFRFUl9QQVRIID0gNDtcbmV4cG9ydCBkZWZhdWx0ICgoKSA9PiAoe1xuICBtaW1lOiB7XG4gICAgW01JTUVfVFlQRV06IFtcInBuZ1wiXVxuICB9LFxuICBjb25zdGFudHM6IHtcbiAgICBNSU1FX1BORzogTUlNRV9UWVBFLFxuICAgIFBOR19GSUxURVJfQVVUTyxcbiAgICBQTkdfRklMVEVSX05PTkUsXG4gICAgUE5HX0ZJTFRFUl9TVUIsXG4gICAgUE5HX0ZJTFRFUl9VUCxcbiAgICBQTkdfRklMVEVSX0FWRVJBR0UsXG4gICAgUE5HX0ZJTFRFUl9QQVRIXG4gIH0sXG4gIGhhc0FscGhhOiB7XG4gICAgW01JTUVfVFlQRV06IHRydWVcbiAgfSxcbiAgZGVjb2RlcnM6IHtcbiAgICBbTUlNRV9UWVBFXTogUE5HLnN5bmMucmVhZFxuICB9LFxuICBlbmNvZGVyczoge1xuICAgIFtNSU1FX1RZUEVdKGRhdGEpIHtcbiAgICAgIGNvbnN0IHBuZyA9IG5ldyBQTkcoe1xuICAgICAgICB3aWR0aDogZGF0YS5iaXRtYXAud2lkdGgsXG4gICAgICAgIGhlaWdodDogZGF0YS5iaXRtYXAuaGVpZ2h0XG4gICAgICB9KTtcbiAgICAgIHBuZy5kYXRhID0gZGF0YS5iaXRtYXAuZGF0YTtcbiAgICAgIHJldHVybiBQTkcuc3luYy53cml0ZShwbmcsIHtcbiAgICAgICAgZGVmbGF0ZUxldmVsOiBkYXRhLl9kZWZsYXRlTGV2ZWwsXG4gICAgICAgIGRlZmxhdGVTdHJhdGVneTogZGF0YS5fZGVmbGF0ZVN0cmF0ZWd5LFxuICAgICAgICBmaWx0ZXJUeXBlOiBkYXRhLl9maWx0ZXJUeXBlLFxuICAgICAgICBjb2xvclR5cGU6IHR5cGVvZiBkYXRhLl9jb2xvclR5cGUgPT09IFwibnVtYmVyXCIgPyBkYXRhLl9jb2xvclR5cGUgOiBkYXRhLl9yZ2JhID8gNiA6IDIsXG4gICAgICAgIGlucHV0SGFzQWxwaGE6IGRhdGEuX3JnYmFcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgY2xhc3M6IHtcbiAgICBfZGVmbGF0ZUxldmVsOiA5LFxuICAgIF9kZWZsYXRlU3RyYXRlZ3k6IDMsXG4gICAgX2ZpbHRlclR5cGU6IFBOR19GSUxURVJfQVVUTyxcbiAgICBfY29sb3JUeXBlOiBudWxsLFxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRlZmxhdGUgbGV2ZWwgdXNlZCB3aGVuIHNhdmluZyBhcyBQTkcgZm9ybWF0IChkZWZhdWx0IGlzIDkpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGwgRGVmbGF0ZSBsZXZlbCB0byB1c2UgMC05LiAwIGlzIG5vIGNvbXByZXNzaW9uLiA5IChkZWZhdWx0KSBpcyBtYXhpbXVtIGNvbXByZXNzaW9uLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAgICAgKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICAgICAqL1xuICAgIGRlZmxhdGVMZXZlbChsLCBjYikge1xuICAgICAgaWYgKHR5cGVvZiBsICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yLmNhbGwodGhpcywgXCJsIG11c3QgYmUgYSBudW1iZXJcIiwgY2IpO1xuICAgICAgfVxuICAgICAgaWYgKGwgPCAwIHx8IGwgPiA5KSB7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yLmNhbGwodGhpcywgXCJsIG11c3QgYmUgYSBudW1iZXIgMCAtIDlcIiwgY2IpO1xuICAgICAgfVxuICAgICAgdGhpcy5fZGVmbGF0ZUxldmVsID0gTWF0aC5yb3VuZChsKTtcbiAgICAgIGlmIChpc05vZGVQYXR0ZXJuKGNiKSkge1xuICAgICAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkZWZsYXRlIHN0cmF0ZWd5IHVzZWQgd2hlbiBzYXZpbmcgYXMgUE5HIGZvcm1hdCAoZGVmYXVsdCBpcyAzKVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzIERlZmxhdGUgc3RyYXRlZ3kgdG8gdXNlIDAtMy5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gY2IgKG9wdGlvbmFsKSBhIGNhbGxiYWNrIGZvciB3aGVuIGNvbXBsZXRlXG4gICAgICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAgICAgKi9cbiAgICBkZWZsYXRlU3RyYXRlZ3kocywgY2IpIHtcbiAgICAgIGlmICh0eXBlb2YgcyAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwicyBtdXN0IGJlIGEgbnVtYmVyXCIsIGNiKTtcbiAgICAgIH1cbiAgICAgIGlmIChzIDwgMCB8fCBzID4gMykge1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwicyBtdXN0IGJlIGEgbnVtYmVyIDAgLSAzXCIsIGNiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2RlZmxhdGVTdHJhdGVneSA9IE1hdGgucm91bmQocyk7XG4gICAgICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZmlsdGVyIHR5cGUgdXNlZCB3aGVuIHNhdmluZyBhcyBQTkcgZm9ybWF0IChkZWZhdWx0IGlzIGF1dG9tYXRpYyBmaWx0ZXJzKVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmIFRoZSBxdWFsaXR5IHRvIHVzZSAtMS00LlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAgICAgKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICAgICAqL1xuICAgIGZpbHRlclR5cGUoZiwgY2IpIHtcbiAgICAgIGlmICh0eXBlb2YgZiAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvci5jYWxsKHRoaXMsIFwibiBtdXN0IGJlIGEgbnVtYmVyXCIsIGNiKTtcbiAgICAgIH1cbiAgICAgIGlmIChmIDwgLTEgfHwgZiA+IDQpIHtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IuY2FsbCh0aGlzLCBcIm4gbXVzdCBiZSAtMSAoYXV0bykgb3IgYSBudW1iZXIgMCAtIDRcIiwgY2IpO1xuICAgICAgfVxuICAgICAgdGhpcy5fZmlsdGVyVHlwZSA9IE1hdGgucm91bmQoZik7XG4gICAgICBpZiAoaXNOb2RlUGF0dGVybihjYikpIHtcbiAgICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY29sb3IgdHlwZSB1c2VkIHdoZW4gc2F2aW5nIGFzIFBORyBmb3JtYXRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcyBjb2xvciB0eXBlIHRvIHVzZSAwLCAyLCA0LCA2LlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAgICAgKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICAgICAqL1xuICAgIGNvbG9yVHlwZShzLCBjYikge1xuICAgICAgaWYgKHR5cGVvZiBzICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yLmNhbGwodGhpcywgXCJzIG11c3QgYmUgYSBudW1iZXJcIiwgY2IpO1xuICAgICAgfVxuICAgICAgaWYgKHMgIT09IDAgJiYgcyAhPT0gMiAmJiBzICE9PSA0ICYmIHMgIT09IDYpIHtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IuY2FsbCh0aGlzLCBcInMgbXVzdCBiZSBhIG51bWJlciAwLCAyLCA0LCA2LlwiLCBjYik7XG4gICAgICB9XG4gICAgICB0aGlzLl9jb2xvclR5cGUgPSBNYXRoLnJvdW5kKHMpO1xuICAgICAgaWYgKGlzTm9kZVBhdHRlcm4oY2IpKSB7XG4gICAgICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/png/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/tiff/es/index.js":
/*!*********************************************!*\
  !*** ./node_modules/@jimp/tiff/es/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var utif2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utif2 */ \"(action-browser)/./node_modules/utif2/UTIF.js\");\n/* harmony import */ var utif2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(utif2__WEBPACK_IMPORTED_MODULE_0__);\n\nconst MIME_TYPE = \"image/tiff\";\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => ({\n  mime: {\n    [MIME_TYPE]: [\"tiff\", \"tif\"]\n  },\n  constants: {\n    MIME_TIFF: MIME_TYPE\n  },\n  decoders: {\n    [MIME_TYPE]: data => {\n      const ifds = utif2__WEBPACK_IMPORTED_MODULE_0___default().decode(data);\n      const page = ifds[0];\n      ifds.forEach(ifd => {\n        utif2__WEBPACK_IMPORTED_MODULE_0___default().decodeImage(data, ifd);\n      });\n      const rgba = utif2__WEBPACK_IMPORTED_MODULE_0___default().toRGBA8(page);\n      return {\n        data: Buffer.from(rgba),\n        width: page.t256[0],\n        height: page.t257[0]\n      };\n    }\n  },\n  encoders: {\n    [MIME_TYPE]: image => {\n      const tiff = utif2__WEBPACK_IMPORTED_MODULE_0___default().encodeImage(image.bitmap.data, image.bitmap.width, image.bitmap.height);\n      return Buffer.from(tiff);\n    }\n  }\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC90aWZmL2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5QjtBQUN6QjtBQUNBLGlFQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1CQUFtQixtREFBVztBQUM5QjtBQUNBO0FBQ0EsUUFBUSx3REFBZ0I7QUFDeEIsT0FBTztBQUNQLG1CQUFtQixvREFBWTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1CQUFtQix3REFBZ0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLEVBQUU7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRuLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3RpZmYvZXMvaW5kZXguanM/NDliYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXRpZiBmcm9tIFwidXRpZjJcIjtcbmNvbnN0IE1JTUVfVFlQRSA9IFwiaW1hZ2UvdGlmZlwiO1xuZXhwb3J0IGRlZmF1bHQgKCgpID0+ICh7XG4gIG1pbWU6IHtcbiAgICBbTUlNRV9UWVBFXTogW1widGlmZlwiLCBcInRpZlwiXVxuICB9LFxuICBjb25zdGFudHM6IHtcbiAgICBNSU1FX1RJRkY6IE1JTUVfVFlQRVxuICB9LFxuICBkZWNvZGVyczoge1xuICAgIFtNSU1FX1RZUEVdOiBkYXRhID0+IHtcbiAgICAgIGNvbnN0IGlmZHMgPSB1dGlmLmRlY29kZShkYXRhKTtcbiAgICAgIGNvbnN0IHBhZ2UgPSBpZmRzWzBdO1xuICAgICAgaWZkcy5mb3JFYWNoKGlmZCA9PiB7XG4gICAgICAgIHV0aWYuZGVjb2RlSW1hZ2UoZGF0YSwgaWZkKTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcmdiYSA9IHV0aWYudG9SR0JBOChwYWdlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IEJ1ZmZlci5mcm9tKHJnYmEpLFxuICAgICAgICB3aWR0aDogcGFnZS50MjU2WzBdLFxuICAgICAgICBoZWlnaHQ6IHBhZ2UudDI1N1swXVxuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIGVuY29kZXJzOiB7XG4gICAgW01JTUVfVFlQRV06IGltYWdlID0+IHtcbiAgICAgIGNvbnN0IHRpZmYgPSB1dGlmLmVuY29kZUltYWdlKGltYWdlLmJpdG1hcC5kYXRhLCBpbWFnZS5iaXRtYXAud2lkdGgsIGltYWdlLmJpdG1hcC5oZWlnaHQpO1xuICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRpZmYpO1xuICAgIH1cbiAgfVxufSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/tiff/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/types/es/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@jimp/types/es/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var timm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! timm */ \"(action-browser)/./node_modules/timm/lib/timm.js\");\n/* harmony import */ var _jimp_jpeg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jimp/jpeg */ \"(action-browser)/./node_modules/@jimp/jpeg/es/index.js\");\n/* harmony import */ var _jimp_png__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jimp/png */ \"(action-browser)/./node_modules/@jimp/png/es/index.js\");\n/* harmony import */ var _jimp_bmp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jimp/bmp */ \"(action-browser)/./node_modules/@jimp/bmp/es/index.js\");\n/* harmony import */ var _jimp_tiff__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jimp/tiff */ \"(action-browser)/./node_modules/@jimp/tiff/es/index.js\");\n/* harmony import */ var _jimp_gif__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jimp/gif */ \"(action-browser)/./node_modules/@jimp/gif/es/index.js\");\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => (0,timm__WEBPACK_IMPORTED_MODULE_0__.mergeDeep)((0,_jimp_jpeg__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(), (0,_jimp_png__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(), (0,_jimp_bmp__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(), (0,_jimp_tiff__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(), (0,_jimp_gif__WEBPACK_IMPORTED_MODULE_5__[\"default\"])()));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC90eXBlcy9lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWlDO0FBQ0g7QUFDRjtBQUNBO0FBQ0U7QUFDRjtBQUM1QixpRUFBZ0IsTUFBTSwrQ0FBUyxDQUFDLHNEQUFJLElBQUkscURBQUcsSUFBSSxxREFBRyxJQUFJLHNEQUFJLElBQUkscURBQUcsR0FBRyxFQUFFO0FBQ3RFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dG4vLi9ub2RlX21vZHVsZXMvQGppbXAvdHlwZXMvZXMvaW5kZXguanM/YTE1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZXJnZURlZXAgfSBmcm9tIFwidGltbVwiO1xuaW1wb3J0IGpwZWcgZnJvbSBcIkBqaW1wL2pwZWdcIjtcbmltcG9ydCBwbmcgZnJvbSBcIkBqaW1wL3BuZ1wiO1xuaW1wb3J0IGJtcCBmcm9tIFwiQGppbXAvYm1wXCI7XG5pbXBvcnQgdGlmZiBmcm9tIFwiQGppbXAvdGlmZlwiO1xuaW1wb3J0IGdpZiBmcm9tIFwiQGppbXAvZ2lmXCI7XG5leHBvcnQgZGVmYXVsdCAoKCkgPT4gbWVyZ2VEZWVwKGpwZWcoKSwgcG5nKCksIGJtcCgpLCB0aWZmKCksIGdpZigpKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/types/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@jimp/utils/es/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@jimp/utils/es/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNodePattern: () => (/* binding */ isNodePattern),\n/* harmony export */   scan: () => (/* binding */ scan),\n/* harmony export */   scanIterator: () => (/* binding */ scanIterator),\n/* harmony export */   throwError: () => (/* binding */ throwError)\n/* harmony export */ });\nfunction isNodePattern(cb) {\n  if (typeof cb === \"undefined\") {\n    return false;\n  }\n  if (typeof cb !== \"function\") {\n    throw new TypeError(\"Callback must be a function\");\n  }\n  return true;\n}\nfunction throwError(error, cb) {\n  if (typeof error === \"string\") {\n    error = new Error(error);\n  }\n  if (typeof cb === \"function\") {\n    return cb.call(this, error);\n  }\n  throw error;\n}\nfunction scan(image, x, y, w, h, f) {\n  // round input\n  x = Math.round(x);\n  y = Math.round(y);\n  w = Math.round(w);\n  h = Math.round(h);\n  for (let _y = y; _y < y + h; _y++) {\n    for (let _x = x; _x < x + w; _x++) {\n      const idx = image.bitmap.width * _y + _x << 2;\n      f.call(image, _x, _y, idx);\n    }\n  }\n  return image;\n}\nfunction* scanIterator(image, x, y, w, h) {\n  // round input\n  x = Math.round(x);\n  y = Math.round(y);\n  w = Math.round(w);\n  h = Math.round(h);\n  for (let _y = y; _y < y + h; _y++) {\n    for (let _x = x; _x < x + w; _x++) {\n      const idx = image.bitmap.width * _y + _x << 2;\n      yield {\n        x: _x,\n        y: _y,\n        idx,\n        image\n      };\n    }\n  }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AamltcC91dGlscy9lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFlBQVk7QUFDL0IscUJBQXFCLFlBQVk7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFlBQVk7QUFDL0IscUJBQXFCLFlBQVk7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRuLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3V0aWxzL2VzL2luZGV4LmpzP2U2M2MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVBhdHRlcm4oY2IpIHtcbiAgaWYgKHR5cGVvZiBjYiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIGNiICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93RXJyb3IoZXJyb3IsIGNiKSB7XG4gIGlmICh0eXBlb2YgZXJyb3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICBlcnJvciA9IG5ldyBFcnJvcihlcnJvcik7XG4gIH1cbiAgaWYgKHR5cGVvZiBjYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGNiLmNhbGwodGhpcywgZXJyb3IpO1xuICB9XG4gIHRocm93IGVycm9yO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNjYW4oaW1hZ2UsIHgsIHksIHcsIGgsIGYpIHtcbiAgLy8gcm91bmQgaW5wdXRcbiAgeCA9IE1hdGgucm91bmQoeCk7XG4gIHkgPSBNYXRoLnJvdW5kKHkpO1xuICB3ID0gTWF0aC5yb3VuZCh3KTtcbiAgaCA9IE1hdGgucm91bmQoaCk7XG4gIGZvciAobGV0IF95ID0geTsgX3kgPCB5ICsgaDsgX3krKykge1xuICAgIGZvciAobGV0IF94ID0geDsgX3ggPCB4ICsgdzsgX3grKykge1xuICAgICAgY29uc3QgaWR4ID0gaW1hZ2UuYml0bWFwLndpZHRoICogX3kgKyBfeCA8PCAyO1xuICAgICAgZi5jYWxsKGltYWdlLCBfeCwgX3ksIGlkeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbWFnZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiogc2Nhbkl0ZXJhdG9yKGltYWdlLCB4LCB5LCB3LCBoKSB7XG4gIC8vIHJvdW5kIGlucHV0XG4gIHggPSBNYXRoLnJvdW5kKHgpO1xuICB5ID0gTWF0aC5yb3VuZCh5KTtcbiAgdyA9IE1hdGgucm91bmQodyk7XG4gIGggPSBNYXRoLnJvdW5kKGgpO1xuICBmb3IgKGxldCBfeSA9IHk7IF95IDwgeSArIGg7IF95KyspIHtcbiAgICBmb3IgKGxldCBfeCA9IHg7IF94IDwgeCArIHc7IF94KyspIHtcbiAgICAgIGNvbnN0IGlkeCA9IGltYWdlLmJpdG1hcC53aWR0aCAqIF95ICsgX3ggPDwgMjtcbiAgICAgIHlpZWxkIHtcbiAgICAgICAgeDogX3gsXG4gICAgICAgIHk6IF95LFxuICAgICAgICBpZHgsXG4gICAgICAgIGltYWdlXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@jimp/utils/es/index.js\n");

/***/ })

};
;